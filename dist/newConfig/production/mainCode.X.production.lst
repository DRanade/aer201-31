

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Apr 09 16:06:45 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,inline
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=2
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=2
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=2
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=2
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=2
    70                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=2
    71                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text59,global,reloc=2,class=CODE,delta=1
    73                           	psect	text60,global,reloc=2,class=CODE,delta=1
    74                           	psect	text61,global,reloc=2,class=CODE,delta=1
    75                           	psect	text62,global,reloc=2,class=CODE,delta=1,inline
    76                           	psect	text63,global,reloc=2,class=CODE,delta=1
    77                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    82                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    83  0000                     
    84                           ; Version 2.05
    85                           ; Generated 20/12/2018 GMT
    86                           ; 
    87                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    88                           ; All rights reserved.
    89                           ; 
    90                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    91                           ; 
    92                           ; Redistribution and use in source and binary forms, with or without modification, are
    93                           ; permitted provided that the following conditions are met:
    94                           ; 
    95                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    96                           ;        conditions and the following disclaimer.
    97                           ; 
    98                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    99                           ;        of conditions and the following disclaimer in the documentation and/or other
   100                           ;        materials provided with the distribution.
   101                           ; 
   102                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   103                           ;        software without specific prior written permission.
   104                           ; 
   105                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   106                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   107                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   108                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   109                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   110                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   111                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   112                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   113                           ; 
   114                           ; 
   115                           ; Code-generator required, PIC18F4620 Definitions
   116                           ; 
   117                           ; SFR Addresses
   118  0000                     
   119                           	psect	idataBANK0
   120  003610                     __pidataBANK0:
   121                           	opt callstack 0
   122                           
   123                           ;initializer for stoa@F1139
   124  003610  28                 	db	40
   125  003611  6E                 	db	110
   126  003612  75                 	db	117
   127  003613  6C                 	db	108
   128  003614  6C                 	db	108
   129  003615  29                 	db	41
   130  003616  00                 	db	0
   131                           
   132                           ;initializer for _lastStored
   133  003617  03                 	db	3
   134                           
   135                           	psect	mediumconst
   136  00FC4E                     __pmediumconst:
   137                           	opt callstack 0
   138  00FC4E  00                 	db	0
   139  00FC4F  50                 	db	80
   140  00FC50                     __end_of_LCD_LINE4_ADDR:
   141                           	opt callstack 0
   142  00FC50  10                 	db	16
   143  00FC51                     __end_of_LCD_LINE3_ADDR:
   144                           	opt callstack 0
   145  00FC51  40                 	db	64
   146  00FC52                     __end_of_LCD_LINE2_ADDR:
   147                           	opt callstack 0
   148  00FC52                     _LCD_LINE1_ADDR:
   149                           	opt callstack 0
   150  00FC52  00                 	db	0
   151  00FC53                     __end_of_LCD_LINE1_ADDR:
   152                           	opt callstack 0
   153  00FC53                     _LCD_SIZE_VERT:
   154                           	opt callstack 0
   155  00FC53  04                 	db	4
   156  00FC54                     __end_of_LCD_SIZE_VERT:
   157                           	opt callstack 0
   158  00FC54                     _LCD_SIZE_HORZ:
   159                           	opt callstack 0
   160  00FC54  10                 	db	16
   161  00FC55                     __end_of_LCD_SIZE_HORZ:
   162                           	opt callstack 0
   163  0000                     _PORTBbits	set	3969
   164  0000                     _PORTEbits	set	3972
   165  0000                     _EECON2	set	4007
   166  0000                     _EEDATA	set	4008
   167  0000                     _EEADR	set	4009
   168  0000                     _EECON1bits	set	4006
   169  0000                     _LATB	set	3978
   170  0000                     _LATEbits	set	3981
   171  0000                     _LATA	set	3977
   172  0000                     _PORTCbits	set	3970
   173  0000                     _LATD	set	3980
   174  0000                     _SSPBUF	set	4041
   175  0000                     _SSPCON2bits	set	4037
   176  0000                     _SSPCON1	set	4038
   177  0000                     _SSPADD	set	4040
   178  0000                     _TRISCbits	set	3988
   179  0000                     _SSPCON1bits	set	4038
   180  0000                     _SSPCON2	set	4037
   181  0000                     _SSPSTAT	set	4039
   182  0000                     _PORTB	set	3969
   183  0000                     _LATCbits	set	3979
   184  0000                     _LATAbits	set	3977
   185  0000                     _LATDbits	set	3980
   186  0000                     _TRISE	set	3990
   187  0000                     _TRISD	set	3989
   188  0000                     _TRISC	set	3988
   189  0000                     _TRISB	set	3987
   190  0000                     _TRISA	set	3986
   191  0000                     _INTCONbits	set	4082
   192  0000                     _ADCON1	set	4033
   193  0000                     _INT0IF	set	32657
   194  0000                     _INT1IF	set	32640
   195  0000                     _INT0IE	set	32660
   196  0000                     _INT1IE	set	32643
   197  00FC55                     STR_2:
   198  00FC55  20                 	db	32
   199  00FC56  20                 	db	32
   200  00FC57  20                 	db	32
   201  00FC58  20                 	db	32
   202  00FC59  25                 	db	37
   203  00FC5A  30                 	db	48	;'0'
   204  00FC5B  32                 	db	50	;'2'
   205  00FC5C  78                 	db	120	;'x'
   206  00FC5D  2F                 	db	47
   207  00FC5E  25                 	db	37
   208  00FC5F  30                 	db	48	;'0'
   209  00FC60  32                 	db	50	;'2'
   210  00FC61  78                 	db	120	;'x'
   211  00FC62  2F                 	db	47
   212  00FC63  25                 	db	37
   213  00FC64  30                 	db	48	;'0'
   214  00FC65  32                 	db	50	;'2'
   215  00FC66  78                 	db	120	;'x'
   216  00FC67  20                 	db	32
   217  00FC68  20                 	db	32
   218  00FC69  20                 	db	32
   219  00FC6A  20                 	db	32
   220  00FC6B  00                 	db	0
   221  00FC6C                     STR_3:
   222  00FC6C  20                 	db	32
   223  00FC6D  20                 	db	32
   224  00FC6E  20                 	db	32
   225  00FC6F  20                 	db	32
   226  00FC70  25                 	db	37
   227  00FC71  30                 	db	48	;'0'
   228  00FC72  32                 	db	50	;'2'
   229  00FC73  78                 	db	120	;'x'
   230  00FC74  3A                 	db	58	;':'
   231  00FC75  25                 	db	37
   232  00FC76  30                 	db	48	;'0'
   233  00FC77  32                 	db	50	;'2'
   234  00FC78  78                 	db	120	;'x'
   235  00FC79  3A                 	db	58	;':'
   236  00FC7A  25                 	db	37
   237  00FC7B  30                 	db	48	;'0'
   238  00FC7C  32                 	db	50	;'2'
   239  00FC7D  78                 	db	120	;'x'
   240  00FC7E  20                 	db	32
   241  00FC7F  20                 	db	32
   242  00FC80  20                 	db	32
   243  00FC81  20                 	db	32
   244  00FC82  00                 	db	0
   245  00FC83                     STR_13:
   246  00FC83  50                 	db	80	;'P'
   247  00FC84  4F                 	db	79	;'O'
   248  00FC85  4C                 	db	76	;'L'
   249  00FC86  45                 	db	69	;'E'
   250  00FC87  25                 	db	37
   251  00FC88  31                 	db	49	;'1'
   252  00FC89  78                 	db	120	;'x'
   253  00FC8A  20                 	db	32
   254  00FC8B  50                 	db	80	;'P'
   255  00FC8C  4F                 	db	79	;'O'
   256  00FC8D  53                 	db	83	;'S'
   257  00FC8E  3A                 	db	58	;':'
   258  00FC8F  20                 	db	32
   259  00FC90  25                 	db	37
   260  00FC91  31                 	db	49	;'1'
   261  00FC92  64                 	db	100	;'d'
   262  00FC93  2E                 	db	46
   263  00FC94  25                 	db	37
   264  00FC95  30                 	db	48	;'0'
   265  00FC96  32                 	db	50	;'2'
   266  00FC97  64                 	db	100	;'d'
   267  00FC98  6D                 	db	109	;'m'
   268  00FC99  00                 	db	0
   269  00FC9A                     STR_14:
   270  00FC9A  54                 	db	84	;'T'
   271  00FC9B  49                 	db	73	;'I'
   272  00FC9C  52                 	db	82	;'R'
   273  00FC9D  45                 	db	69	;'E'
   274  00FC9E  53                 	db	83	;'S'
   275  00FC9F  20                 	db	32
   276  00FCA0  53                 	db	83	;'S'
   277  00FCA1  55                 	db	85	;'U'
   278  00FCA2  50                 	db	80	;'P'
   279  00FCA3  50                 	db	80	;'P'
   280  00FCA4  3A                 	db	58	;':'
   281  00FCA5  20                 	db	32
   282  00FCA6  20                 	db	32
   283  00FCA7  20                 	db	32
   284  00FCA8  25                 	db	37
   285  00FCA9  31                 	db	49	;'1'
   286  00FCAA  64                 	db	100	;'d'
   287  00FCAB  20                 	db	32
   288  00FCAC  00                 	db	0
   289  00FCAD                     STR_15:
   290  00FCAD  54                 	db	84	;'T'
   291  00FCAE  49                 	db	73	;'I'
   292  00FCAF  52                 	db	82	;'R'
   293  00FCB0  45                 	db	69	;'E'
   294  00FCB1  53                 	db	83	;'S'
   295  00FCB2  20                 	db	32
   296  00FCB3  4F                 	db	79	;'O'
   297  00FCB4  4E                 	db	78	;'N'
   298  00FCB5  20                 	db	32
   299  00FCB6  50                 	db	80	;'P'
   300  00FCB7  4F                 	db	79	;'O'
   301  00FCB8  4C                 	db	76	;'L'
   302  00FCB9  45                 	db	69	;'E'
   303  00FCBA  3A                 	db	58	;':'
   304  00FCBB  25                 	db	37
   305  00FCBC  31                 	db	49	;'1'
   306  00FCBD  64                 	db	100	;'d'
   307  00FCBE  20                 	db	32
   308  00FCBF  00                 	db	0
   309  00FCC0                     STR_49:
   310  00FCC0  20                 	db	32
   311  00FCC1  20                 	db	32
   312  00FCC2  20                 	db	32
   313  00FCC3  20                 	db	32
   314  00FCC4  20                 	db	32
   315  00FCC5  20                 	db	32
   316  00FCC6  45                 	db	69	;'E'
   317  00FCC7  52                 	db	82	;'R'
   318  00FCC8  52                 	db	82	;'R'
   319  00FCC9  4F                 	db	79	;'O'
   320  00FCCA  52                 	db	82	;'R'
   321  00FCCB  20                 	db	32
   322  00FCCC  20                 	db	32
   323  00FCCD  20                 	db	32
   324  00FCCE  20                 	db	32
   325  00FCCF  20                 	db	32
   326  00FCD0  20                 	db	32
   327  00FCD1  00                 	db	0
   328  00FCD2                     STR_51:
   329  00FCD2  20                 	db	32
   330  00FCD3  20                 	db	32
   331  00FCD4  20                 	db	32
   332  00FCD5  20                 	db	32
   333  00FCD6  20                 	db	32
   334  00FCD7  20                 	db	32
   335  00FCD8  53                 	db	83	;'S'
   336  00FCD9  54                 	db	84	;'T'
   337  00FCDA  4F                 	db	79	;'O'
   338  00FCDB  52                 	db	82	;'R'
   339  00FCDC  45                 	db	69	;'E'
   340  00FCDD  44                 	db	68	;'D'
   341  00FCDE  20                 	db	32
   342  00FCDF  20                 	db	32
   343  00FCE0  20                 	db	32
   344  00FCE1  20                 	db	32
   345  00FCE2  20                 	db	32
   346  00FCE3  00                 	db	0
   347  00FCE4                     STR_50:
   348  00FCE4  20                 	db	32
   349  00FCE5  4E                 	db	78	;'N'
   350  00FCE6  4F                 	db	79	;'O'
   351  00FCE7  20                 	db	32
   352  00FCE8  20                 	db	32
   353  00FCE9  49                 	db	73	;'I'
   354  00FCEA  4E                 	db	78	;'N'
   355  00FCEB  46                 	db	70	;'F'
   356  00FCEC  4F                 	db	79	;'O'
   357  00FCED  52                 	db	82	;'R'
   358  00FCEE  4D                 	db	77	;'M'
   359  00FCEF  41                 	db	65	;'A'
   360  00FCF0  54                 	db	84	;'T'
   361  00FCF1  49                 	db	73	;'I'
   362  00FCF2  4F                 	db	79	;'O'
   363  00FCF3  4E                 	db	78	;'N'
   364  00FCF4  20                 	db	32
   365  00FCF5  00                 	db	0
   366  00FCF6                     STR_10:
   367  00FCF6  54                 	db	84	;'T'
   368  00FCF7  49                 	db	73	;'I'
   369  00FCF8  52                 	db	82	;'R'
   370  00FCF9  45                 	db	69	;'E'
   371  00FCFA  53                 	db	83	;'S'
   372  00FCFB  20                 	db	32
   373  00FCFC  53                 	db	83	;'S'
   374  00FCFD  55                 	db	85	;'U'
   375  00FCFE  50                 	db	80	;'P'
   376  00FCFF  50                 	db	80	;'P'
   377  00FD00  3A                 	db	58	;':'
   378  00FD01  20                 	db	32
   379  00FD02  20                 	db	32
   380  00FD03  25                 	db	37
   381  00FD04  32                 	db	50	;'2'
   382  00FD05  64                 	db	100	;'d'
   383  00FD06  20                 	db	32
   384  00FD07  00                 	db	0
   385  00FD08                     STR_11:
   386  00FD08  50                 	db	80	;'P'
   387  00FD09  4F                 	db	79	;'O'
   388  00FD0A  4C                 	db	76	;'L'
   389  00FD0B  45                 	db	69	;'E'
   390  00FD0C  20                 	db	32
   391  00FD0D  43                 	db	67	;'C'
   392  00FD0E  4F                 	db	79	;'O'
   393  00FD0F  55                 	db	85	;'U'
   394  00FD10  4E                 	db	78	;'N'
   395  00FD11  54                 	db	84	;'T'
   396  00FD12  3A                 	db	58	;':'
   397  00FD13  20                 	db	32
   398  00FD14  20                 	db	32
   399  00FD15  25                 	db	37
   400  00FD16  32                 	db	50	;'2'
   401  00FD17  64                 	db	100	;'d'
   402  00FD18  20                 	db	32
   403  00FD19  00                 	db	0
   404  00FD1A                     STR_77:
   405  00FD1A  20                 	db	32
   406  00FD1B  53                 	db	83	;'S'
   407  00FD1C  54                 	db	84	;'T'
   408  00FD1D  45                 	db	69	;'E'
   409  00FD1E  50                 	db	80	;'P'
   410  00FD1F  50                 	db	80	;'P'
   411  00FD20  45                 	db	69	;'E'
   412  00FD21  52                 	db	82	;'R'
   413  00FD22  20                 	db	32
   414  00FD23  20                 	db	32
   415  00FD24  4D                 	db	77	;'M'
   416  00FD25  4F                 	db	79	;'O'
   417  00FD26  54                 	db	84	;'T'
   418  00FD27  4F                 	db	79	;'O'
   419  00FD28  52                 	db	82	;'R'
   420  00FD29  20                 	db	32
   421  00FD2A  00                 	db	0
   422  00FD2B                     STR_82:
   423  00FD2B  31                 	db	49	;'1'
   424  00FD2C  3A                 	db	58	;':'
   425  00FD2D  53                 	db	83	;'S'
   426  00FD2E  57                 	db	87	;'W'
   427  00FD2F  49                 	db	73	;'I'
   428  00FD30  54                 	db	84	;'T'
   429  00FD31  43                 	db	67	;'C'
   430  00FD32  48                 	db	72	;'H'
   431  00FD33  20                 	db	32
   432  00FD34  20                 	db	32
   433  00FD35  44                 	db	68	;'D'
   434  00FD36  3A                 	db	58	;':'
   435  00FD37  53                 	db	83	;'S'
   436  00FD38  54                 	db	84	;'T'
   437  00FD39  4F                 	db	79	;'O'
   438  00FD3A  50                 	db	80	;'P'
   439  00FD3B  00                 	db	0
   440  00FD3C                     STR_20:
   441  00FD3C  20                 	db	32
   442  00FD3D  20                 	db	32
   443  00FD3E  20                 	db	32
   444  00FD3F  20                 	db	32
   445  00FD40  20                 	db	32
   446  00FD41  20                 	db	32
   447  00FD42  20                 	db	32
   448  00FD43  20                 	db	32
   449  00FD44  20                 	db	32
   450  00FD45  20                 	db	32
   451  00FD46  20                 	db	32
   452  00FD47  20                 	db	32
   453  00FD48  20                 	db	32
   454  00FD49  20                 	db	32
   455  00FD4A  20                 	db	32
   456  00FD4B  20                 	db	32
   457  00FD4C  00                 	db	0
   458  00FD4D                     STR_71:
   459  00FD4D  20                 	db	32
   460  00FD4E  20                 	db	32
   461  00FD4F  20                 	db	32
   462  00FD50  20                 	db	32
   463  00FD51  44                 	db	68	;'D'
   464  00FD52  45                 	db	69	;'E'
   465  00FD53  54                 	db	84	;'T'
   466  00FD54  45                 	db	69	;'E'
   467  00FD55  43                 	db	67	;'C'
   468  00FD56  54                 	db	84	;'T'
   469  00FD57  45                 	db	69	;'E'
   470  00FD58  44                 	db	68	;'D'
   471  00FD59  20                 	db	32
   472  00FD5A  20                 	db	32
   473  00FD5B  20                 	db	32
   474  00FD5C  20                 	db	32
   475  00FD5D  00                 	db	0
   476  00FD5E                     STR_70:
   477  00FD5E  20                 	db	32
   478  00FD5F  20                 	db	32
   479  00FD60  20                 	db	32
   480  00FD61  20                 	db	32
   481  00FD62  4E                 	db	78	;'N'
   482  00FD63  4F                 	db	79	;'O'
   483  00FD64  20                 	db	32
   484  00FD65  50                 	db	80	;'P'
   485  00FD66  4F                 	db	79	;'O'
   486  00FD67  4C                 	db	76	;'L'
   487  00FD68  45                 	db	69	;'E'
   488  00FD69  53                 	db	83	;'S'
   489  00FD6A  20                 	db	32
   490  00FD6B  20                 	db	32
   491  00FD6C  20                 	db	32
   492  00FD6D  20                 	db	32
   493  00FD6E  00                 	db	0
   494  00FD6F                     STR_27:
   495  00FD6F  20                 	db	32
   496  00FD70  20                 	db	32
   497  00FD71  20                 	db	32
   498  00FD72  50                 	db	80	;'P'
   499  00FD73  4F                 	db	79	;'O'
   500  00FD74  4C                 	db	76	;'L'
   501  00FD75  45                 	db	69	;'E'
   502  00FD76  20                 	db	32
   503  00FD77  46                 	db	70	;'F'
   504  00FD78  4F                 	db	79	;'O'
   505  00FD79  55                 	db	85	;'U'
   506  00FD7A  4E                 	db	78	;'N'
   507  00FD7B  44                 	db	68	;'D'
   508  00FD7C  20                 	db	32
   509  00FD7D  20                 	db	32
   510  00FD7E  20                 	db	32
   511  00FD7F  00                 	db	0
   512  00FD80                     STR_25:
   513  00FD80  20                 	db	32
   514  00FD81  20                 	db	32
   515  00FD82  20                 	db	32
   516  00FD83  42                 	db	66	;'B'
   517  00FD84  41                 	db	65	;'A'
   518  00FD85  53                 	db	83	;'S'
   519  00FD86  45                 	db	69	;'E'
   520  00FD87  20                 	db	32
   521  00FD88  46                 	db	70	;'F'
   522  00FD89  4F                 	db	79	;'O'
   523  00FD8A  55                 	db	85	;'U'
   524  00FD8B  4E                 	db	78	;'N'
   525  00FD8C  44                 	db	68	;'D'
   526  00FD8D  20                 	db	32
   527  00FD8E  20                 	db	32
   528  00FD8F  20                 	db	32
   529  00FD90  00                 	db	0
   530  00FD91                     STR_69:
   531  00FD91  20                 	db	32
   532  00FD92  20                 	db	32
   533  00FD93  54                 	db	84	;'T'
   534  00FD94  48                 	db	72	;'H'
   535  00FD95  49                 	db	73	;'I'
   536  00FD96  53                 	db	83	;'S'
   537  00FD97  20                 	db	32
   538  00FD98  52                 	db	82	;'R'
   539  00FD99  55                 	db	85	;'U'
   540  00FD9A  4E                 	db	78	;'N'
   541  00FD9B  20                 	db	32
   542  00FD9C  48                 	db	72	;'H'
   543  00FD9D  41                 	db	65	;'A'
   544  00FD9E  44                 	db	68	;'D'
   545  00FD9F  20                 	db	32
   546  00FDA0  20                 	db	32
   547  00FDA1  00                 	db	0
   548  00FDA2                     STR_31:
   549  00FDA2  20                 	db	32
   550  00FDA3  20                 	db	32
   551  00FDA4  4D                 	db	77	;'M'
   552  00FDA5  41                 	db	65	;'A'
   553  00FDA6  58                 	db	88	;'X'
   554  00FDA7  20                 	db	32
   555  00FDA8  44                 	db	68	;'D'
   556  00FDA9  49                 	db	73	;'I'
   557  00FDAA  53                 	db	83	;'S'
   558  00FDAB  54                 	db	84	;'T'
   559  00FDAC  41                 	db	65	;'A'
   560  00FDAD  4E                 	db	78	;'N'
   561  00FDAE  43                 	db	67	;'C'
   562  00FDAF  45                 	db	69	;'E'
   563  00FDB0  20                 	db	32
   564  00FDB1  20                 	db	32
   565  00FDB2  00                 	db	0
   566  00FDB3                     STR_19:
   567  00FDB3  20                 	db	32
   568  00FDB4  20                 	db	32
   569  00FDB5  20                 	db	32
   570  00FDB6  49                 	db	73	;'I'
   571  00FDB7  4E                 	db	78	;'N'
   572  00FDB8  20                 	db	32
   573  00FDB9  50                 	db	80	;'P'
   574  00FDBA  52                 	db	82	;'R'
   575  00FDBB  4F                 	db	79	;'O'
   576  00FDBC  47                 	db	71	;'G'
   577  00FDBD  52                 	db	82	;'R'
   578  00FDBE  45                 	db	69	;'E'
   579  00FDBF  53                 	db	83	;'S'
   580  00FDC0  53                 	db	83	;'S'
   581  00FDC1  20                 	db	32
   582  00FDC2  20                 	db	32
   583  00FDC3  00                 	db	0
   584  00FDC4                     STR_18:
   585  00FDC4  20                 	db	32
   586  00FDC5  20                 	db	32
   587  00FDC6  49                 	db	73	;'I'
   588  00FDC7  53                 	db	83	;'S'
   589  00FDC8  20                 	db	32
   590  00FDC9  43                 	db	67	;'C'
   591  00FDCA  55                 	db	85	;'U'
   592  00FDCB  52                 	db	82	;'R'
   593  00FDCC  52                 	db	82	;'R'
   594  00FDCD  45                 	db	69	;'E'
   595  00FDCE  4E                 	db	78	;'N'
   596  00FDCF  54                 	db	84	;'T'
   597  00FDD0  4C                 	db	76	;'L'
   598  00FDD1  59                 	db	89	;'Y'
   599  00FDD2  20                 	db	32
   600  00FDD3  20                 	db	32
   601  00FDD4  00                 	db	0
   602  00FDD5                     STR_29:
   603  00FDD5  20                 	db	32
   604  00FDD6  54                 	db	84	;'T'
   605  00FDD7  49                 	db	73	;'I'
   606  00FDD8  52                 	db	82	;'R'
   607  00FDD9  45                 	db	69	;'E'
   608  00FDDA  53                 	db	83	;'S'
   609  00FDDB  20                 	db	32
   610  00FDDC  20                 	db	32
   611  00FDDD  41                 	db	65	;'A'
   612  00FDDE  52                 	db	82	;'R'
   613  00FDDF  52                 	db	82	;'R'
   614  00FDE0  49                 	db	73	;'I'
   615  00FDE1  56                 	db	86	;'V'
   616  00FDE2  45                 	db	69	;'E'
   617  00FDE3  44                 	db	68	;'D'
   618  00FDE4  20                 	db	32
   619  00FDE5  00                 	db	0
   620  00FDE6                     STR_17:
   621  00FDE6  20                 	db	32
   622  00FDE7  20                 	db	32
   623  00FDE8  54                 	db	84	;'T'
   624  00FDE9  48                 	db	72	;'H'
   625  00FDEA  45                 	db	69	;'E'
   626  00FDEB  20                 	db	32
   627  00FDEC  4F                 	db	79	;'O'
   628  00FDED  50                 	db	80	;'P'
   629  00FDEE  45                 	db	69	;'E'
   630  00FDEF  52                 	db	82	;'R'
   631  00FDF0  41                 	db	65	;'A'
   632  00FDF1  54                 	db	84	;'T'
   633  00FDF2  49                 	db	73	;'I'
   634  00FDF3  4F                 	db	79	;'O'
   635  00FDF4  4E                 	db	78	;'N'
   636  00FDF5  20                 	db	32
   637  00FDF6  00                 	db	0
   638  00FDF7                     STR_6:
   639  00FDF7  37                 	db	55	;'7'
   640  00FDF8  3A                 	db	58	;':'
   641  00FDF9  20                 	db	32
   642  00FDFA  47                 	db	71	;'G'
   643  00FDFB  45                 	db	69	;'E'
   644  00FDFC  4E                 	db	78	;'N'
   645  00FDFD  45                 	db	69	;'E'
   646  00FDFE  52                 	db	82	;'R'
   647  00FDFF  41                 	db	65	;'A'
   648  00FE00  4C                 	db	76	;'L'
   649  00FE01  20                 	db	32
   650  00FE02  49                 	db	73	;'I'
   651  00FE03  4E                 	db	78	;'N'
   652  00FE04  46                 	db	70	;'F'
   653  00FE05  4F                 	db	79	;'O'
   654  00FE06  20                 	db	32
   655  00FE07  00                 	db	0
   656  00FE08                     STR_7:
   657  00FE08  39                 	db	57	;'9'
   658  00FE09  3A                 	db	58	;':'
   659  00FE0A  20                 	db	32
   660  00FE0B  50                 	db	80	;'P'
   661  00FE0C  4F                 	db	79	;'O'
   662  00FE0D  4C                 	db	76	;'L'
   663  00FE0E  45                 	db	69	;'E'
   664  00FE0F  20                 	db	32
   665  00FE10  44                 	db	68	;'D'
   666  00FE11  45                 	db	69	;'E'
   667  00FE12  54                 	db	84	;'T'
   668  00FE13  41                 	db	65	;'A'
   669  00FE14  49                 	db	73	;'I'
   670  00FE15  4C                 	db	76	;'L'
   671  00FE16  53                 	db	83	;'S'
   672  00FE17  20                 	db	32
   673  00FE18  00                 	db	0
   674  00FE19                     STR_24:
   675  00FE19  20                 	db	32
   676  00FE1A  49                 	db	73	;'I'
   677  00FE1B  20                 	db	32
   678  00FE1C  41                 	db	65	;'A'
   679  00FE1D  4D                 	db	77	;'M'
   680  00FE1E  20                 	db	32
   681  00FE1F  47                 	db	71	;'G'
   682  00FE20  4F                 	db	79	;'O'
   683  00FE21  49                 	db	73	;'I'
   684  00FE22  4E                 	db	78	;'N'
   685  00FE23  47                 	db	71	;'G'
   686  00FE24  20                 	db	32
   687  00FE25  4F                 	db	79	;'O'
   688  00FE26  55                 	db	85	;'U'
   689  00FE27  54                 	db	84	;'T'
   690  00FE28  20                 	db	32
   691  00FE29  00                 	db	0
   692  00FE2A  21                 	db	33
   693  00FE2B  20                 	db	32
   694  00FE2C  20                 	db	32
   695  00FE2D  20                 	db	32
   696  00FE2E  44                 	db	68	;'D'
   697  00FE2F  45                 	db	69	;'E'
   698  00FE30  54                 	db	84	;'T'
   699  00FE31  45                 	db	69	;'E'
   700  00FE32  43                 	db	67	;'C'
   701  00FE33  54                 	db	84	;'T'
   702  00FE34  45                 	db	69	;'E'
   703  00FE35  44                 	db	68	;'D'
   704  00FE36  20                 	db	32
   705  00FE37  20                 	db	32
   706  00FE38  20                 	db	32
   707  00FE39  21                 	db	33
   708  00FE3A  00                 	db	0
   709  00FE3B  21                 	db	33
   710  00FE3C  20                 	db	32
   711  00FE3D  20                 	db	32
   712  00FE3E  54                 	db	84	;'T'
   713  00FE3F  48                 	db	72	;'H'
   714  00FE40  49                 	db	73	;'I'
   715  00FE41  53                 	db	83	;'S'
   716  00FE42  20                 	db	32
   717  00FE43  20                 	db	32
   718  00FE44  50                 	db	80	;'P'
   719  00FE45  4F                 	db	79	;'O'
   720  00FE46  4C                 	db	76	;'L'
   721  00FE47  45                 	db	69	;'E'
   722  00FE48  20                 	db	32
   723  00FE49  20                 	db	32
   724  00FE4A  21                 	db	33
   725  00FE4B  00                 	db	0
   726  00FE4C  21                 	db	33
   727  00FE4D  20                 	db	32
   728  00FE4E  54                 	db	84	;'T'
   729  00FE4F  49                 	db	73	;'I'
   730  00FE50  52                 	db	82	;'R'
   731  00FE51  45                 	db	69	;'E'
   732  00FE52  53                 	db	83	;'S'
   733  00FE53  20                 	db	32
   734  00FE54  4F                 	db	79	;'O'
   735  00FE55  4E                 	db	78	;'N'
   736  00FE56  20                 	db	32
   737  00FE57  49                 	db	73	;'I'
   738  00FE58  54                 	db	84	;'T'
   739  00FE59  20                 	db	32
   740  00FE5A  20                 	db	32
   741  00FE5B  21                 	db	33
   742  00FE5C  00                 	db	0
   743  00FE5D  21                 	db	33
   744  00FE5E  20                 	db	32
   745  00FE5F  53                 	db	83	;'S'
   746  00FE60  55                 	db	85	;'U'
   747  00FE61  43                 	db	67	;'C'
   748  00FE62  43                 	db	67	;'C'
   749  00FE63  45                 	db	69	;'E'
   750  00FE64  53                 	db	83	;'S'
   751  00FE65  53                 	db	83	;'S'
   752  00FE66  46                 	db	70	;'F'
   753  00FE67  55                 	db	85	;'U'
   754  00FE68  4C                 	db	76	;'L'
   755  00FE69  4C                 	db	76	;'L'
   756  00FE6A  59                 	db	89	;'Y'
   757  00FE6B  20                 	db	32
   758  00FE6C  21                 	db	33
   759  00FE6D  00                 	db	0
   760  00FE6E  21                 	db	33
   761  00FE6F  20                 	db	32
   762  00FE70  48                 	db	72	;'H'
   763  00FE71  41                 	db	65	;'A'
   764  00FE72  53                 	db	83	;'S'
   765  00FE73  20                 	db	32
   766  00FE74  54                 	db	84	;'T'
   767  00FE75  4F                 	db	79	;'O'
   768  00FE76  4F                 	db	79	;'O'
   769  00FE77  20                 	db	32
   770  00FE78  4D                 	db	77	;'M'
   771  00FE79  41                 	db	65	;'A'
   772  00FE7A  4E                 	db	78	;'N'
   773  00FE7B  59                 	db	89	;'Y'
   774  00FE7C  20                 	db	32
   775  00FE7D  21                 	db	33
   776  00FE7E  00                 	db	0
   777  00FE7F  21                 	db	33
   778  00FE80  21                 	db	33
   779  00FE81  21                 	db	33
   780  00FE82  21                 	db	33
   781  00FE83  21                 	db	33
   782  00FE84  20                 	db	32
   783  00FE85  50                 	db	80	;'P'
   784  00FE86  4F                 	db	79	;'O'
   785  00FE87  4C                 	db	76	;'L'
   786  00FE88  45                 	db	69	;'E'
   787  00FE89  20                 	db	32
   788  00FE8A  21                 	db	33
   789  00FE8B  21                 	db	33
   790  00FE8C  21                 	db	33
   791  00FE8D  21                 	db	33
   792  00FE8E  21                 	db	33
   793  00FE8F  00                 	db	0
   794  00FE90  21                 	db	33
   795  00FE91  21                 	db	33
   796  00FE92  21                 	db	33
   797  00FE93  21                 	db	33
   798  00FE94  21                 	db	33
   799  00FE95  21                 	db	33
   800  00FE96  21                 	db	33
   801  00FE97  21                 	db	33
   802  00FE98  21                 	db	33
   803  00FE99  21                 	db	33
   804  00FE9A  21                 	db	33
   805  00FE9B  21                 	db	33
   806  00FE9C  21                 	db	33
   807  00FE9D  21                 	db	33
   808  00FE9E  21                 	db	33
   809  00FE9F  21                 	db	33
   810  00FEA0  00                 	db	0
   811  00FEA1  21                 	db	33
   812  00FEA2  21                 	db	33
   813  00FEA3  21                 	db	33
   814  00FEA4  21                 	db	33
   815  00FEA5  21                 	db	33
   816  00FEA6  45                 	db	69	;'E'
   817  00FEA7  52                 	db	82	;'R'
   818  00FEA8  52                 	db	82	;'R'
   819  00FEA9  4F                 	db	79	;'O'
   820  00FEAA  52                 	db	82	;'R'
   821  00FEAB  21                 	db	33
   822  00FEAC  21                 	db	33
   823  00FEAD  21                 	db	33
   824  00FEAE  21                 	db	33
   825  00FEAF  21                 	db	33
   826  00FEB0  21                 	db	33
   827  00FEB1  00                 	db	0
   828  00FEB2                     STR_46:
   829  00FEB2  54                 	db	84	;'T'
   830  00FEB3  4F                 	db	79	;'O'
   831  00FEB4  20                 	db	32
   832  00FEB5  53                 	db	83	;'S'
   833  00FEB6  45                 	db	69	;'E'
   834  00FEB7  45                 	db	69	;'E'
   835  00FEB8  20                 	db	32
   836  00FEB9  28                 	db	40
   837  00FEBA  20                 	db	32
   838  00FEBB  31                 	db	49	;'1'
   839  00FEBC  20                 	db	32
   840  00FEBD  2D                 	db	45
   841  00FEBE  20                 	db	32
   842  00FEBF  34                 	db	52	;'4'
   843  00FEC0  20                 	db	32
   844  00FEC1  29                 	db	41
   845  00FEC2  00                 	db	0
   846  00FEC3                     STR_8:
   847  00FEC3  2D                 	db	45
   848  00FEC4  2D                 	db	45
   849  00FEC5  2D                 	db	45
   850  00FEC6  2D                 	db	45
   851  00FEC7  2D                 	db	45
   852  00FEC8  30                 	db	48	;'0'
   853  00FEC9  3A                 	db	58	;':'
   854  00FECA  44                 	db	68	;'D'
   855  00FECB  4F                 	db	79	;'O'
   856  00FECC  4E                 	db	78	;'N'
   857  00FECD  45                 	db	69	;'E'
   858  00FECE  2D                 	db	45
   859  00FECF  2D                 	db	45
   860  00FED0  2D                 	db	45
   861  00FED1  2D                 	db	45
   862  00FED2  2D                 	db	45
   863  00FED3  00                 	db	0
   864  00FED4                     STR_12:
   865  00FED4  2D                 	db	45
   866  00FED5  2D                 	db	45
   867  00FED6  2D                 	db	45
   868  00FED7  2D                 	db	45
   869  00FED8  2D                 	db	45
   870  00FED9  30                 	db	48	;'0'
   871  00FEDA  3A                 	db	58	;':'
   872  00FEDB  4D                 	db	77	;'M'
   873  00FEDC  45                 	db	69	;'E'
   874  00FEDD  4E                 	db	78	;'N'
   875  00FEDE  55                 	db	85	;'U'
   876  00FEDF  2D                 	db	45
   877  00FEE0  2D                 	db	45
   878  00FEE1  2D                 	db	45
   879  00FEE2  2D                 	db	45
   880  00FEE3  2D                 	db	45
   881  00FEE4  00                 	db	0
   882  00FEE5                     STR_5:
   883  00FEE5  2D                 	db	45
   884  00FEE6  2D                 	db	45
   885  00FEE7  52                 	db	82	;'R'
   886  00FEE8  55                 	db	85	;'U'
   887  00FEE9  4E                 	db	78	;'N'
   888  00FEEA  20                 	db	32
   889  00FEEB  43                 	db	67	;'C'
   890  00FEEC  4F                 	db	79	;'O'
   891  00FEED  4D                 	db	77	;'M'
   892  00FEEE  50                 	db	80	;'P'
   893  00FEEF  4C                 	db	76	;'L'
   894  00FEF0  45                 	db	69	;'E'
   895  00FEF1  54                 	db	84	;'T'
   896  00FEF2  45                 	db	69	;'E'
   897  00FEF3  2D                 	db	45
   898  00FEF4  2D                 	db	45
   899  00FEF5  00                 	db	0
   900  00FEF6                     STR_53:
   901  00FEF6  2D                 	db	45
   902  00FEF7  2D                 	db	45
   903  00FEF8  53                 	db	83	;'S'
   904  00FEF9  48                 	db	72	;'H'
   905  00FEFA  4F                 	db	79	;'O'
   906  00FEFB  57                 	db	87	;'W'
   907  00FEFC  49                 	db	73	;'I'
   908  00FEFD  4E                 	db	78	;'N'
   909  00FEFE  47                 	db	71	;'G'
   910  00FEFF  20                 	db	32
   911  00FF00  20                 	db	32
   912  00FF01  4C                 	db	76	;'L'
   913  00FF02  4F                 	db	79	;'O'
   914  00FF03  47                 	db	71	;'G'
   915  00FF04  2D                 	db	45
   916  00FF05  2D                 	db	45
   917  00FF06  00                 	db	0
   918  00FF07                     STR_16:
   919  00FF07  3C                 	db	60	;'<'
   920  00FF08  2A                 	db	42
   921  00FF09  20                 	db	32
   922  00FF0A  20                 	db	32
   923  00FF0B  20                 	db	32
   924  00FF0C  30                 	db	48	;'0'
   925  00FF0D  3A                 	db	58	;':'
   926  00FF0E  4D                 	db	77	;'M'
   927  00FF0F  45                 	db	69	;'E'
   928  00FF10  4E                 	db	78	;'N'
   929  00FF11  55                 	db	85	;'U'
   930  00FF12  20                 	db	32
   931  00FF13  20                 	db	32
   932  00FF14  20                 	db	32
   933  00FF15  23                 	db	35
   934  00FF16  3E                 	db	62	;'>'
   935  00FF17  00                 	db	0
   936  00FF18                     STR_47:
   937  00FF18  31                 	db	49	;'1'
   938  00FF19  3A                 	db	58	;':'
   939  00FF1A  4E                 	db	78	;'N'
   940  00FF1B  45                 	db	69	;'E'
   941  00FF1C  57                 	db	87	;'W'
   942  00FF1D  20                 	db	32
   943  00FF1E  20                 	db	32
   944  00FF1F  20                 	db	32
   945  00FF20  20                 	db	32
   946  00FF21  20                 	db	32
   947  00FF22  20                 	db	32
   948  00FF23  34                 	db	52	;'4'
   949  00FF24  3A                 	db	58	;':'
   950  00FF25  4F                 	db	79	;'O'
   951  00FF26  4C                 	db	76	;'L'
   952  00FF27  44                 	db	68	;'D'
   953  00FF28  00                 	db	0
   954  00FF29                     STR_26:
   955  00FF29  4C                 	db	76	;'L'
   956  00FF2A  4F                 	db	79	;'O'
   957  00FF2B  4F                 	db	79	;'O'
   958  00FF2C  4B                 	db	75	;'K'
   959  00FF2D  49                 	db	73	;'I'
   960  00FF2E  4E                 	db	78	;'N'
   961  00FF2F  47                 	db	71	;'G'
   962  00FF30  20                 	db	32
   963  00FF31  46                 	db	70	;'F'
   964  00FF32  4F                 	db	79	;'O'
   965  00FF33  52                 	db	82	;'R'
   966  00FF34  20                 	db	32
   967  00FF35  50                 	db	80	;'P'
   968  00FF36  4F                 	db	79	;'O'
   969  00FF37  4C                 	db	76	;'L'
   970  00FF38  45                 	db	69	;'E'
   971  00FF39  00                 	db	0
   972  00FF3A                     STR_32:
   973  00FF3A  49                 	db	73	;'I'
   974  00FF3B  20                 	db	32
   975  00FF3C  41                 	db	65	;'A'
   976  00FF3D  4D                 	db	77	;'M'
   977  00FF3E  20                 	db	32
   978  00FF3F  43                 	db	67	;'C'
   979  00FF40  4F                 	db	79	;'O'
   980  00FF41  4D                 	db	77	;'M'
   981  00FF42  49                 	db	73	;'I'
   982  00FF43  4E                 	db	78	;'N'
   983  00FF44  47                 	db	71	;'G'
   984  00FF45  20                 	db	32
   985  00FF46  48                 	db	72	;'H'
   986  00FF47  4F                 	db	79	;'O'
   987  00FF48  4D                 	db	77	;'M'
   988  00FF49  45                 	db	69	;'E'
   989  00FF4A  00                 	db	0
   990  00FF4B                     STR_1:
   991  00FF4B  54                 	db	84	;'T'
   992  00FF4C  45                 	db	69	;'E'
   993  00FF4D  41                 	db	65	;'A'
   994  00FF4E  4D                 	db	77	;'M'
   995  00FF4F  20                 	db	32
   996  00FF50  33                 	db	51	;'3'
   997  00FF51  31                 	db	49	;'1'
   998  00FF52  20                 	db	32
   999  00FF53  20                 	db	32
  1000  00FF54  20                 	db	32
  1001  00FF55  20                 	db	32
  1002  00FF56  20                 	db	32
  1003  00FF57  54                 	db	84	;'T'
  1004  00FF58  49                 	db	73	;'I'
  1005  00FF59  52                 	db	82	;'R'
  1006  00FF5A  45                 	db	69	;'E'
  1007  00FF5B  00                 	db	0
  1008  00FF5C                     STR_45:
  1009  00FF5C  43                 	db	67	;'C'
  1010  00FF5D  48                 	db	72	;'H'
  1011  00FF5E  4F                 	db	79	;'O'
  1012  00FF5F  4F                 	db	79	;'O'
  1013  00FF60  53                 	db	83	;'S'
  1014  00FF61  45                 	db	69	;'E'
  1015  00FF62  20                 	db	32
  1016  00FF63  57                 	db	87	;'W'
  1017  00FF64  48                 	db	72	;'H'
  1018  00FF65  49                 	db	73	;'I'
  1019  00FF66  43                 	db	67	;'C'
  1020  00FF67  48                 	db	72	;'H'
  1021  00FF68  20                 	db	32
  1022  00FF69  4C                 	db	76	;'L'
  1023  00FF6A  4F                 	db	79	;'O'
  1024  00FF6B  47                 	db	71	;'G'
  1025  00FF6C  00                 	db	0
  1026  00FF6D                     STR_30:
  1027  00FF6D  4D                 	db	77	;'M'
  1028  00FF6E  4F                 	db	79	;'O'
  1029  00FF6F  56                 	db	86	;'V'
  1030  00FF70  49                 	db	73	;'I'
  1031  00FF71  4E                 	db	78	;'N'
  1032  00FF72  47                 	db	71	;'G'
  1033  00FF73  20                 	db	32
  1034  00FF74  2B                 	db	43
  1035  00FF75  20                 	db	32
  1036  00FF76  52                 	db	82	;'R'
  1037  00FF77  41                 	db	65	;'A'
  1038  00FF78  4D                 	db	77	;'M'
  1039  00FF79  50                 	db	80	;'P'
  1040  00FF7A  20                 	db	32
  1041  00FF7B  49                 	db	73	;'I'
  1042  00FF7C  4E                 	db	78	;'N'
  1043  00FF7D  00                 	db	0
  1044  00FF7E                     STR_28:
  1045  00FF7E  44                 	db	68	;'D'
  1046  00FF7F  45                 	db	69	;'E'
  1047  00FF80  50                 	db	80	;'P'
  1048  00FF81  4C                 	db	76	;'L'
  1049  00FF82  4F                 	db	79	;'O'
  1050  00FF83  59                 	db	89	;'Y'
  1051  00FF84  49                 	db	73	;'I'
  1052  00FF85  4E                 	db	78	;'N'
  1053  00FF86  47                 	db	71	;'G'
  1054  00FF87  20                 	db	32
  1055  00FF88  20                 	db	32
  1056  00FF89  54                 	db	84	;'T'
  1057  00FF8A  49                 	db	73	;'I'
  1058  00FF8B  52                 	db	82	;'R'
  1059  00FF8C  45                 	db	69	;'E'
  1060  00FF8D  53                 	db	83	;'S'
  1061  00FF8E  00                 	db	0
  1062  00FF8F                     STR_4:
  1063  00FF8F  30                 	db	48	;'0'
  1064  00FF90  3A                 	db	58	;':'
  1065  00FF91  53                 	db	83	;'S'
  1066  00FF92  54                 	db	84	;'T'
  1067  00FF93  41                 	db	65	;'A'
  1068  00FF94  52                 	db	82	;'R'
  1069  00FF95  54                 	db	84	;'T'
  1070  00FF96  20                 	db	32
  1071  00FF97  20                 	db	32
  1072  00FF98  20                 	db	32
  1073  00FF99  38                 	db	56	;'8'
  1074  00FF9A  3A                 	db	58	;':'
  1075  00FF9B  4C                 	db	76	;'L'
  1076  00FF9C  4F                 	db	79	;'O'
  1077  00FF9D  47                 	db	71	;'G'
  1078  00FF9E  53                 	db	83	;'S'
  1079  00FF9F  00                 	db	0
  1080  00FFA0                     STR_9:
  1081  00FFA0  54                 	db	84	;'T'
  1082  00FFA1  4F                 	db	79	;'O'
  1083  00FFA2  54                 	db	84	;'T'
  1084  00FFA3  41                 	db	65	;'A'
  1085  00FFA4  4C                 	db	76	;'L'
  1086  00FFA5  20                 	db	32
  1087  00FFA6  54                 	db	84	;'T'
  1088  00FFA7  49                 	db	73	;'I'
  1089  00FFA8  4D                 	db	77	;'M'
  1090  00FFA9  45                 	db	69	;'E'
  1091  00FFAA  3A                 	db	58	;':'
  1092  00FFAB  20                 	db	32
  1093  00FFAC  25                 	db	37
  1094  00FFAD  33                 	db	51	;'3'
  1095  00FFAE  64                 	db	100	;'d'
  1096  00FFAF  73                 	db	115	;'s'
  1097  00FFB0  00                 	db	0
  1098  00FFB1  41                 	db	65	;'A'
  1099  00FFB2  20                 	db	32
  1100  00FFB3  44                 	db	68	;'D'
  1101  00FFB4  49                 	db	73	;'I'
  1102  00FFB5  52                 	db	82	;'R'
  1103  00FFB6  20                 	db	32
  1104  00FFB7  25                 	db	37
  1105  00FFB8  73                 	db	115	;'s'
  1106  00FFB9  20                 	db	32
  1107  00FFBA  20                 	db	32
  1108  00FFBB  20                 	db	32
  1109  00FFBC  20                 	db	32
  1110  00FFBD  20                 	db	32
  1111  00FFBE  20                 	db	32
  1112  00FFBF  20                 	db	32
  1113  00FFC0  00                 	db	0
  1114  00FFC1  42                 	db	66	;'B'
  1115  00FFC2  20                 	db	32
  1116  00FFC3  44                 	db	68	;'D'
  1117  00FFC4  49                 	db	73	;'I'
  1118  00FFC5  52                 	db	82	;'R'
  1119  00FFC6  20                 	db	32
  1120  00FFC7  25                 	db	37
  1121  00FFC8  73                 	db	115	;'s'
  1122  00FFC9  20                 	db	32
  1123  00FFCA  20                 	db	32
  1124  00FFCB  20                 	db	32
  1125  00FFCC  20                 	db	32
  1126  00FFCD  20                 	db	32
  1127  00FFCE  20                 	db	32
  1128  00FFCF  20                 	db	32
  1129  00FFD0  00                 	db	0
  1130  00FFD1                     STR_78:
  1131  00FFD1  20                 	db	32
  1132  00FFD2  52                 	db	82	;'R'
  1133  00FFD3  55                 	db	85	;'U'
  1134  00FFD4  4E                 	db	78	;'N'
  1135  00FFD5  4E                 	db	78	;'N'
  1136  00FFD6  49                 	db	73	;'I'
  1137  00FFD7  4E                 	db	78	;'N'
  1138  00FFD8  47                 	db	71	;'G'
  1139  00FFD9  20                 	db	32
  1140  00FFDA  44                 	db	68	;'D'
  1141  00FFDB  49                 	db	73	;'I'
  1142  00FFDC  52                 	db	82	;'R'
  1143  00FFDD  20                 	db	32
  1144  00FFDE  25                 	db	37
  1145  00FFDF  73                 	db	115	;'s'
  1146  00FFE0  00                 	db	0
  1147  00FFE1                     STR_91:
  1148  00FFE1  25                 	db	37
  1149  00FFE2  30                 	db	48	;'0'
  1150  00FFE3  35                 	db	53	;'5'
  1151  00FFE4  75                 	db	117	;'u'
  1152  00FFE5  20                 	db	32
  1153  00FFE6  20                 	db	32
  1154  00FFE7  20                 	db	32
  1155  00FFE8  20                 	db	32
  1156  00FFE9  20                 	db	32
  1157  00FFEA  20                 	db	32
  1158  00FFEB  25                 	db	37
  1159  00FFEC  30                 	db	48	;'0'
  1160  00FFED  35                 	db	53	;'5'
  1161  00FFEE  75                 	db	117	;'u'
  1162  00FFEF  00                 	db	0
  1163  00FFF0                     STR_80:
  1164  00FFF0  43                 	db	67	;'C'
  1165  00FFF1  57                 	db	87	;'W'
  1166  00FFF2  20                 	db	32
  1167  00FFF3  00                 	db	0
  1168  00FFF4  00                 	db	0
  1169  00FFF5                     STR_79:
  1170  00FFF5  43                 	db	67	;'C'
  1171  00FFF6  43                 	db	67	;'C'
  1172  00FFF7  57                 	db	87	;'W'
  1173  00FFF8  00                 	db	0
  1174  00FFF9  00                 	db	0
  1175  00FFFA                     STR_81:
  1176  00FFFA  25                 	db	37
  1177  00FFFB  31                 	db	49	;'1'
  1178  00FFFC  36                 	db	54	;'6'
  1179  00FFFD  78                 	db	120	;'x'
  1180  00FFFE  00                 	db	0
  1181  0000                     
  1182                           ; #config settings
  1183  00FFFF  00                 	db	0	; dummy byte at the end
  1184  0000                     
  1185                           	psect	cinit
  1186  003294                     __pcinit:
  1187                           	opt callstack 0
  1188  003294                     start_initialization:
  1189                           	opt callstack 0
  1190  003294                     __initialization:
  1191                           	opt callstack 0
  1192                           
  1193                           ; Initialize objects allocated to BANK0 (8 bytes)
  1194                           ; load TBLPTR registers with __pidataBANK0
  1195  003294  0E10               	movlw	low __pidataBANK0
  1196  003296  6EF6               	movwf	tblptrl,c
  1197  003298  0E36               	movlw	high __pidataBANK0
  1198  00329A  6EF7               	movwf	tblptrh,c
  1199  00329C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1200  00329E  6EF8               	movwf	tblptru,c
  1201  0032A0  EE00  F0E9         	lfsr	0,__pdataBANK0
  1202  0032A4  EE10 F008          	lfsr	1,8
  1203  0032A8                     copy_data0:
  1204  0032A8  0009               	tblrd		*+
  1205  0032AA  CFF5 FFEE          	movff	tablat,postinc0
  1206  0032AE  50E5               	movf	postdec1,w,c
  1207  0032B0  50E1               	movf	fsr1l,w,c
  1208  0032B2  E1FA               	bnz	copy_data0
  1209                           
  1210                           ; Clear objects allocated to BANK1 (75 bytes)
  1211  0032B4  EE01  F000         	lfsr	0,__pbssBANK1
  1212  0032B8  0E4B               	movlw	75
  1213  0032BA                     clear_0:
  1214  0032BA  6AEE               	clrf	postinc0,c
  1215  0032BC  06E8               	decf	wreg,f,c
  1216  0032BE  E1FD               	bnz	clear_0
  1217                           
  1218                           ; Clear objects allocated to BANK0 (48 bytes)
  1219  0032C0  EE00  F0B9         	lfsr	0,__pbssBANK0
  1220  0032C4  0E30               	movlw	48
  1221  0032C6                     clear_1:
  1222  0032C6  6AEE               	clrf	postinc0,c
  1223  0032C8  06E8               	decf	wreg,f,c
  1224  0032CA  E1FD               	bnz	clear_1
  1225  0032CC                     end_of_initialization:
  1226                           	opt callstack 0
  1227  0032CC                     __end_of__initialization:
  1228                           	opt callstack 0
  1229  0032CC  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1230  0032CE  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1231  0032D0  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1232  0032D2  6EF8               	movwf	tblptru,c
  1233  0032D4  0100               	movlb	0
  1234  0032D6  EF86  F006         	goto	_main	;jump to C main() function
  1235                           
  1236                           	psect	bssBANK0
  1237  0000B9                     __pbssBANK0:
  1238                           	opt callstack 0
  1239  0000B9                     _nout:
  1240                           	opt callstack 0
  1241  0000B9                     	ds	2
  1242  0000BB                     _width:
  1243                           	opt callstack 0
  1244  0000BB                     	ds	2
  1245  0000BD                     _prec:
  1246                           	opt callstack 0
  1247  0000BD                     	ds	2
  1248  0000BF                     _flags:
  1249                           	opt callstack 0
  1250  0000BF                     	ds	2
  1251  0000C1                     _tick:
  1252                           	opt callstack 0
  1253  0000C1                     	ds	1
  1254  0000C2                     _currPole:
  1255                           	opt callstack 0
  1256  0000C2                     	ds	1
  1257  0000C3                     _dbuf:
  1258                           	opt callstack 0
  1259  0000C3                     	ds	32
  1260  0000E3                     _logToShow:
  1261                           	opt callstack 0
  1262  0000E3                     	ds	1
  1263  0000E4                     _poleCount:
  1264                           	opt callstack 0
  1265  0000E4                     	ds	1
  1266  0000E5                     _tiresSupp:
  1267                           	opt callstack 0
  1268  0000E5                     	ds	1
  1269  0000E6                     _totalTime:
  1270                           	opt callstack 0
  1271  0000E6                     	ds	1
  1272  0000E7                     _int0Pressed:
  1273                           	opt callstack 0
  1274  0000E7                     	ds	1
  1275  0000E8                     _int1Pressed:
  1276                           	opt callstack 0
  1277  0000E8                     	ds	1
  1278                           
  1279                           	psect	dataBANK0
  1280  0000E9                     __pdataBANK0:
  1281                           	opt callstack 0
  1282  0000E9                     stoa@F1139:
  1283                           	opt callstack 0
  1284  0000E9                     	ds	7
  1285  0000F0                     _lastStored:
  1286                           	opt callstack 0
  1287  0000F0                     	ds	1
  1288                           
  1289                           	psect	bssBANK1
  1290  000100                     __pbssBANK1:
  1291                           	opt callstack 0
  1292  000100                     _poleInfoArr:
  1293                           	opt callstack 0
  1294  000100                     	ds	75
  1295                           
  1296                           	psect	cstackBANK0
  1297  000080                     __pcstackBANK0:
  1298                           	opt callstack 0
  1299  000080                     ??_showTime:
  1300  000080                     ??_dispLogPoleDet:
  1301  000080                     dispSMrun@direc:
  1302                           	opt callstack 0
  1303  000080                     scrDoneGen@time:
  1304                           	opt callstack 0
  1305  000080                     scrDonePoleDet@poleData:
  1306                           	opt callstack 0
  1307  000080                     runOp@time:
  1308                           	opt callstack 0
  1309                           
  1310                           ; 2 bytes @ 0x0
  1311  000080                     	ds	1
  1312  000081                     _dispSMrun$976:
  1313                           	opt callstack 0
  1314                           
  1315                           ; 2 bytes @ 0x1
  1316  000081                     	ds	1
  1317  000082                     scrDoneGen@tireCount:
  1318                           	opt callstack 0
  1319  000082                     scrDonePoleDet@currPole:
  1320                           	opt callstack 0
  1321  000082                     runOp@pTotalSupplied:
  1322                           	opt callstack 0
  1323                           
  1324                           ; 2 bytes @ 0x2
  1325  000082                     	ds	1
  1326  000083                     scrDoneGen@poles:
  1327                           	opt callstack 0
  1328                           
  1329                           ; 1 bytes @ 0x3
  1330  000083                     	ds	1
  1331  000084                     runOp@pNumPoles:
  1332                           	opt callstack 0
  1333  000084                     _scrDonePoleDet$2356:
  1334                           	opt callstack 0
  1335                           
  1336                           ; 2 bytes @ 0x4
  1337  000084                     	ds	2
  1338  000086                     dispLogPoleDet@pos:
  1339                           	opt callstack 0
  1340  000086                     runOp@infoArr:
  1341                           	opt callstack 0
  1342  000086                     _scrDonePoleDet$2357:
  1343                           	opt callstack 0
  1344                           
  1345                           ; 2 bytes @ 0x6
  1346  000086                     	ds	2
  1347  000088                     dispLogPoleDet@log:
  1348                           	opt callstack 0
  1349  000088                     runOp@pInt0P:
  1350                           	opt callstack 0
  1351  000088                     _scrDonePoleDet$2355:
  1352                           	opt callstack 0
  1353                           
  1354                           ; 2 bytes @ 0x8
  1355  000088                     	ds	2
  1356  00008A                     runOp@opTime:
  1357                           	opt callstack 0
  1358                           
  1359                           ; 2 bytes @ 0xA
  1360  00008A                     	ds	2
  1361  00008C                     ??_runOp:
  1362                           
  1363                           ; 1 bytes @ 0xC
  1364  00008C                     	ds	6
  1365  000092                     runOp@origDetLoc:
  1366                           	opt callstack 0
  1367                           
  1368                           ; 1 bytes @ 0x12
  1369  000092                     	ds	1
  1370  000093                     runOp@i:
  1371                           	opt callstack 0
  1372                           
  1373                           ; 2 bytes @ 0x13
  1374  000093                     	ds	2
  1375  000095                     runOp@distPoleDet:
  1376                           	opt callstack 0
  1377                           
  1378                           ; 1 bytes @ 0x15
  1379  000095                     	ds	1
  1380  000096                     runOp@distSinceBase:
  1381                           	opt callstack 0
  1382                           
  1383                           ; 1 bytes @ 0x16
  1384  000096                     	ds	1
  1385  000097                     runOp@temp:
  1386                           	opt callstack 0
  1387                           
  1388                           ; 1 bytes @ 0x17
  1389  000097                     	ds	1
  1390  000098                     runOp@found:
  1391                           	opt callstack 0
  1392                           
  1393                           ; 1 bytes @ 0x18
  1394  000098                     	ds	1
  1395  000099                     runOp@endTime:
  1396                           	opt callstack 0
  1397                           
  1398                           ; 3 bytes @ 0x19
  1399  000099                     	ds	3
  1400  00009C                     runOp@oldPosSig:
  1401                           	opt callstack 0
  1402                           
  1403                           ; 1 bytes @ 0x1C
  1404  00009C                     	ds	1
  1405  00009D                     runOp@oldPosSig_1381:
  1406                           	opt callstack 0
  1407                           
  1408                           ; 1 bytes @ 0x1D
  1409  00009D                     	ds	1
  1410  00009E                     runOp@oldPosSig_1391:
  1411                           	opt callstack 0
  1412                           
  1413                           ; 1 bytes @ 0x1E
  1414  00009E                     	ds	1
  1415  00009F                     runOp@oldPosSig_1403:
  1416                           	opt callstack 0
  1417                           
  1418                           ; 1 bytes @ 0x1F
  1419  00009F                     	ds	1
  1420  0000A0                     runOp@oldPosSig_1404:
  1421                           	opt callstack 0
  1422                           
  1423                           ; 1 bytes @ 0x20
  1424  0000A0                     	ds	1
  1425  0000A1                     runOp@tireVar:
  1426                           	opt callstack 0
  1427                           
  1428                           ; 1 bytes @ 0x21
  1429  0000A1                     	ds	1
  1430  0000A2                     runOp@pos:
  1431                           	opt callstack 0
  1432                           
  1433                           ; 1 bytes @ 0x22
  1434  0000A2                     	ds	1
  1435  0000A3                     runOp@posTurns:
  1436                           	opt callstack 0
  1437                           
  1438                           ; 1 bytes @ 0x23
  1439  0000A3                     	ds	1
  1440  0000A4                     runOp@procMode:
  1441                           	opt callstack 0
  1442                           
  1443                           ; 1 bytes @ 0x24
  1444  0000A4                     	ds	1
  1445  0000A5                     ??_main:
  1446                           
  1447                           ; 1 bytes @ 0x25
  1448  0000A5                     	ds	5
  1449  0000AA                     main@time:
  1450                           	opt callstack 0
  1451                           
  1452                           ; 7 bytes @ 0x2A
  1453  0000AA                     	ds	7
  1454  0000B1                     main@startTimeInt:
  1455                           	opt callstack 0
  1456                           
  1457                           ; 3 bytes @ 0x31
  1458  0000B1                     	ds	3
  1459  0000B4                     main@direction2:
  1460                           	opt callstack 0
  1461                           
  1462                           ; 1 bytes @ 0x34
  1463  0000B4                     	ds	1
  1464  0000B5                     main@SMposition:
  1465                           	opt callstack 0
  1466                           
  1467                           ; 2 bytes @ 0x35
  1468  0000B5                     	ds	2
  1469  0000B7                     main@direction1:
  1470                           	opt callstack 0
  1471                           
  1472                           ; 1 bytes @ 0x37
  1473  0000B7                     	ds	1
  1474  0000B8                     main@dispMode:
  1475                           	opt callstack 0
  1476                           
  1477                           ; 1 bytes @ 0x38
  1478  0000B8                     	ds	1
  1479                           
  1480                           	psect	cstackCOMRAM
  1481  000001                     __pcstackCOMRAM:
  1482                           	opt callstack 0
  1483  000001                     ??_I2C_Master_Wait:
  1484  000001                     ?_strlen:
  1485                           	opt callstack 0
  1486  000001                     ?_isupper:
  1487                           	opt callstack 0
  1488  000001                     ?_isalpha:
  1489                           	opt callstack 0
  1490  000001                     ?_isdigit:
  1491                           	opt callstack 0
  1492  000001                     ?_isspace:
  1493                           	opt callstack 0
  1494  000001                     ?_islower:
  1495                           	opt callstack 0
  1496  000001                     ?___wmul:
  1497                           	opt callstack 0
  1498  000001                     ?___lldiv:
  1499                           	opt callstack 0
  1500  000001                     ?___aodiv:
  1501                           	opt callstack 0
  1502  000001                     ?___aomod:
  1503                           	opt callstack 0
  1504  000001                     ?___lodiv:
  1505                           	opt callstack 0
  1506  000001                     ?___lomod:
  1507                           	opt callstack 0
  1508  000001                     pulse_e@interruptState:
  1509                           	opt callstack 0
  1510  000001                     runSMA@dirA:
  1511                           	opt callstack 0
  1512  000001                     runSMB@dirB:
  1513                           	opt callstack 0
  1514  000001                     runSMs@dirB:
  1515                           	opt callstack 0
  1516  000001                     write_EEPROM@data:
  1517                           	opt callstack 0
  1518  000001                     read_EEPROM@address:
  1519                           	opt callstack 0
  1520  000001                     fixTime@Time:
  1521                           	opt callstack 0
  1522  000001                     runSM@pSMposition:
  1523                           	opt callstack 0
  1524  000001                     ___wmul@multiplier:
  1525                           	opt callstack 0
  1526  000001                     isalpha@c:
  1527                           	opt callstack 0
  1528  000001                     isdigit@c:
  1529                           	opt callstack 0
  1530  000001                     isspace@c:
  1531                           	opt callstack 0
  1532  000001                     isupper@c:
  1533                           	opt callstack 0
  1534  000001                     strlen@s:
  1535                           	opt callstack 0
  1536  000001                     islower@c:
  1537                           	opt callstack 0
  1538  000001                     ___lldiv@dividend:
  1539                           	opt callstack 0
  1540  000001                     ___aodiv@dividend:
  1541                           	opt callstack 0
  1542  000001                     ___aomod@dividend:
  1543                           	opt callstack 0
  1544  000001                     ___lodiv@dividend:
  1545                           	opt callstack 0
  1546  000001                     ___lomod@dividend:
  1547                           	opt callstack 0
  1548                           
  1549                           ; 8 bytes @ 0x0
  1550  000001                     	ds	1
  1551  000002                     I2C_Master_Read@ackBit:
  1552                           	opt callstack 0
  1553  000002                     send_nibble@data:
  1554                           	opt callstack 0
  1555  000002                     runSMA@ctr:
  1556                           	opt callstack 0
  1557  000002                     runSMs@dirA:
  1558                           	opt callstack 0
  1559  000002                     write_EEPROM@address:
  1560                           	opt callstack 0
  1561  000002                     I2C_Master_Write@byteToWrite:
  1562                           	opt callstack 0
  1563  000002                     runSMB@ctr:
  1564                           	opt callstack 0
  1565                           
  1566                           ; 2 bytes @ 0x1
  1567  000002                     	ds	1
  1568  000003                     ??_isupper:
  1569  000003                     ??_isalpha:
  1570  000003                     ??_isdigit:
  1571  000003                     ??_isspace:
  1572  000003                     ??_islower:
  1573  000003                     ??_fixTime:
  1574  000003                     I2C_Master_Read@receivedByte:
  1575                           	opt callstack 0
  1576  000003                     send_byte@data:
  1577                           	opt callstack 0
  1578  000003                     runSMA@subCtr:
  1579                           	opt callstack 0
  1580  000003                     storeLog@numPoles:
  1581                           	opt callstack 0
  1582  000003                     runSM@int1Pressed:
  1583                           	opt callstack 0
  1584  000003                     runSMs@ctr:
  1585                           	opt callstack 0
  1586  000003                     ___wmul@multiplicand:
  1587                           	opt callstack 0
  1588  000003                     strlen@a:
  1589                           	opt callstack 0
  1590                           
  1591                           ; 2 bytes @ 0x2
  1592  000003                     	ds	1
  1593  000004                     lcdInst@data:
  1594                           	opt callstack 0
  1595  000004                     putch@data:
  1596                           	opt callstack 0
  1597  000004                     runSMA@ticksA:
  1598                           	opt callstack 0
  1599  000004                     runSMB@subCtr:
  1600                           	opt callstack 0
  1601  000004                     storeLog@tiresDep:
  1602                           	opt callstack 0
  1603  000004                     getTime@pTime:
  1604                           	opt callstack 0
  1605                           
  1606                           ; 2 bytes @ 0x3
  1607  000004                     	ds	1
  1608  000005                     ??_initLCD:
  1609  000005                     runSM@direction:
  1610                           	opt callstack 0
  1611  000005                     runSMB@ticksB:
  1612                           	opt callstack 0
  1613  000005                     runSMs@subCtr:
  1614                           	opt callstack 0
  1615  000005                     storeLog@infoArr:
  1616                           	opt callstack 0
  1617  000005                     ___wmul@product:
  1618                           	opt callstack 0
  1619  000005                     fputc@c:
  1620                           	opt callstack 0
  1621  000005                     ___lldiv@divisor:
  1622                           	opt callstack 0
  1623                           
  1624                           ; 4 bytes @ 0x4
  1625  000005                     	ds	1
  1626  000006                     getTime@i:
  1627                           	opt callstack 0
  1628  000006                     runSM@hundreds:
  1629                           	opt callstack 0
  1630  000006                     runSMs@ticksA:
  1631                           	opt callstack 0
  1632                           
  1633                           ; 1 bytes @ 0x5
  1634  000006                     	ds	1
  1635  000007                     ?_toupper:
  1636                           	opt callstack 0
  1637  000007                     ?___awmod:
  1638                           	opt callstack 0
  1639  000007                     dispStateTrans@dispMode:
  1640                           	opt callstack 0
  1641  000007                     runSM@ticksA:
  1642                           	opt callstack 0
  1643  000007                     runSMs@ticksB:
  1644                           	opt callstack 0
  1645  000007                     _isspace$2009:
  1646                           	opt callstack 0
  1647  000007                     storeLog@pLastLog:
  1648                           	opt callstack 0
  1649  000007                     ___awmod@dividend:
  1650                           	opt callstack 0
  1651  000007                     fputc@fp:
  1652                           	opt callstack 0
  1653  000007                     toupper@c:
  1654                           	opt callstack 0
  1655                           
  1656                           ; 2 bytes @ 0x6
  1657  000007                     	ds	1
  1658  000008                     ?_atoi:
  1659                           	opt callstack 0
  1660  000008                     tireDeploy@firstTank:
  1661                           	opt callstack 0
  1662  000008                     dispStateTrans@startTime:
  1663                           	opt callstack 0
  1664  000008                     atoi@s:
  1665                           	opt callstack 0
  1666                           
  1667                           ; 2 bytes @ 0x7
  1668  000008                     	ds	1
  1669  000009                     ??_storeLog:
  1670  000009                     ??_fputc:
  1671  000009                     ??_toupper:
  1672  000009                     tireDeploy@amount:
  1673                           	opt callstack 0
  1674  000009                     ___awmod@divisor:
  1675                           	opt callstack 0
  1676  000009                     ___lldiv@quotient:
  1677                           	opt callstack 0
  1678  000009                     ___aodiv@divisor:
  1679                           	opt callstack 0
  1680  000009                     ___aomod@divisor:
  1681                           	opt callstack 0
  1682  000009                     ___lodiv@divisor:
  1683                           	opt callstack 0
  1684  000009                     ___lomod@divisor:
  1685                           	opt callstack 0
  1686                           
  1687                           ; 8 bytes @ 0x8
  1688  000009                     	ds	1
  1689  00000A                     ??_atoi:
  1690  00000A                     dispStateTrans@pStepDir1:
  1691                           	opt callstack 0
  1692                           
  1693                           ; 2 bytes @ 0x9
  1694  00000A                     	ds	1
  1695  00000B                     ___awmod@counter:
  1696                           	opt callstack 0
  1697                           
  1698                           ; 1 bytes @ 0xA
  1699  00000B                     	ds	1
  1700  00000C                     ___awmod@sign:
  1701                           	opt callstack 0
  1702  00000C                     dispStateTrans@pStepDir2:
  1703                           	opt callstack 0
  1704                           
  1705                           ; 2 bytes @ 0xB
  1706  00000C                     	ds	1
  1707  00000D                     ?___awdiv:
  1708                           	opt callstack 0
  1709  00000D                     storeLog@time:
  1710                           	opt callstack 0
  1711  00000D                     ___lldiv@counter:
  1712                           	opt callstack 0
  1713  00000D                     ___awdiv@dividend:
  1714                           	opt callstack 0
  1715  00000D                     _toupper$2073:
  1716                           	opt callstack 0
  1717                           
  1718                           ; 2 bytes @ 0xC
  1719  00000D                     	ds	1
  1720  00000E                     ?_stoa:
  1721                           	opt callstack 0
  1722  00000E                     storeLog@currLog:
  1723                           	opt callstack 0
  1724  00000E                     dispStateTrans@pLogToShow:
  1725                           	opt callstack 0
  1726  00000E                     stoa@fp:
  1727                           	opt callstack 0
  1728  00000E                     atoi@neg:
  1729                           	opt callstack 0
  1730  00000E                     fputs@s:
  1731                           	opt callstack 0
  1732  00000E                     I2C_Master_Init@clockFreq:
  1733                           	opt callstack 0
  1734                           
  1735                           ; 4 bytes @ 0xD
  1736  00000E                     	ds	1
  1737  00000F                     storeLog@i:
  1738                           	opt callstack 0
  1739  00000F                     ___awdiv@divisor:
  1740                           	opt callstack 0
  1741                           
  1742                           ; 2 bytes @ 0xE
  1743  00000F                     	ds	1
  1744  000010                     dispStateTrans@lastWritten:
  1745                           	opt callstack 0
  1746  000010                     storeLog@currAdr:
  1747                           	opt callstack 0
  1748  000010                     stoa@s:
  1749                           	opt callstack 0
  1750  000010                     _atoi$1982:
  1751                           	opt callstack 0
  1752  000010                     fputs@fp:
  1753                           	opt callstack 0
  1754                           
  1755                           ; 2 bytes @ 0xF
  1756  000010                     	ds	1
  1757  000011                     ??_dispStateTrans:
  1758  000011                     ___aodiv@counter:
  1759                           	opt callstack 0
  1760  000011                     ___aomod@counter:
  1761                           	opt callstack 0
  1762  000011                     ___awdiv@counter:
  1763                           	opt callstack 0
  1764  000011                     ___lomod@counter:
  1765                           	opt callstack 0
  1766  000011                     ___lodiv@quotient:
  1767                           	opt callstack 0
  1768                           
  1769                           ; 8 bytes @ 0x10
  1770  000011                     	ds	1
  1771  000012                     ??_I2C_Master_Init:
  1772  000012                     ??_stoa:
  1773  000012                     dispStateTrans@keypress:
  1774                           	opt callstack 0
  1775  000012                     ___aodiv@sign:
  1776                           	opt callstack 0
  1777  000012                     ___aomod@sign:
  1778                           	opt callstack 0
  1779  000012                     ___awdiv@sign:
  1780                           	opt callstack 0
  1781  000012                     fputs@c:
  1782                           	opt callstack 0
  1783  000012                     _atoi$1984:
  1784                           	opt callstack 0
  1785                           
  1786                           ; 2 bytes @ 0x11
  1787  000012                     	ds	1
  1788  000013                     ?_abs:
  1789                           	opt callstack 0
  1790  000013                     ___awdiv@quotient:
  1791                           	opt callstack 0
  1792  000013                     abs@a:
  1793                           	opt callstack 0
  1794  000013                     fputs@i:
  1795                           	opt callstack 0
  1796  000013                     stoa@nuls:
  1797                           	opt callstack 0
  1798  000013                     ___aodiv@quotient:
  1799                           	opt callstack 0
  1800                           
  1801                           ; 8 bytes @ 0x12
  1802  000013                     	ds	1
  1803  000014                     _atoi$1983:
  1804                           	opt callstack 0
  1805                           
  1806                           ; 1 bytes @ 0x13
  1807  000014                     	ds	1
  1808  000015                     ??_abs:
  1809  000015                     ?_pad:
  1810                           	opt callstack 0
  1811  000015                     pad@fp:
  1812                           	opt callstack 0
  1813  000015                     atoi@n:
  1814                           	opt callstack 0
  1815                           
  1816                           ; 2 bytes @ 0x14
  1817  000015                     	ds	2
  1818  000017                     pad@buf:
  1819                           	opt callstack 0
  1820                           
  1821                           ; 2 bytes @ 0x16
  1822  000017                     	ds	2
  1823  000019                     ___lodiv@counter:
  1824                           	opt callstack 0
  1825  000019                     pad@p:
  1826                           	opt callstack 0
  1827                           
  1828                           ; 2 bytes @ 0x18
  1829  000019                     	ds	1
  1830  00001A                     stoa@i:
  1831                           	opt callstack 0
  1832                           
  1833                           ; 2 bytes @ 0x19
  1834  00001A                     	ds	1
  1835  00001B                     ??_pad:
  1836                           
  1837                           ; 1 bytes @ 0x1A
  1838  00001B                     	ds	1
  1839  00001C                     pad@i:
  1840                           	opt callstack 0
  1841  00001C                     stoa@w:
  1842                           	opt callstack 0
  1843                           
  1844                           ; 2 bytes @ 0x1B
  1845  00001C                     	ds	2
  1846  00001E                     pad@w:
  1847                           	opt callstack 0
  1848  00001E                     stoa@cp:
  1849                           	opt callstack 0
  1850                           
  1851                           ; 2 bytes @ 0x1D
  1852  00001E                     	ds	2
  1853  000020                     ?_dtoa:
  1854                           	opt callstack 0
  1855  000020                     ?_utoa:
  1856                           	opt callstack 0
  1857  000020                     ?_xtoa:
  1858                           	opt callstack 0
  1859  000020                     dtoa@fp:
  1860                           	opt callstack 0
  1861  000020                     stoa@p:
  1862                           	opt callstack 0
  1863  000020                     utoa@fp:
  1864                           	opt callstack 0
  1865  000020                     xtoa@fp:
  1866                           	opt callstack 0
  1867                           
  1868                           ; 2 bytes @ 0x1F
  1869  000020                     	ds	2
  1870  000022                     stoa@l:
  1871                           	opt callstack 0
  1872  000022                     dtoa@d:
  1873                           	opt callstack 0
  1874  000022                     utoa@d:
  1875                           	opt callstack 0
  1876  000022                     xtoa@d:
  1877                           	opt callstack 0
  1878                           
  1879                           ; 8 bytes @ 0x21
  1880  000022                     	ds	8
  1881  00002A                     ??_dtoa:
  1882  00002A                     ??_utoa:
  1883  00002A                     xtoa@x:
  1884                           	opt callstack 0
  1885                           
  1886                           ; 1 bytes @ 0x29
  1887  00002A                     	ds	1
  1888  00002B                     ??_xtoa:
  1889                           
  1890                           ; 1 bytes @ 0x2A
  1891  00002B                     	ds	7
  1892  000032                     _dtoa$1478:
  1893                           	opt callstack 0
  1894  000032                     utoa@p:
  1895                           	opt callstack 0
  1896                           
  1897                           ; 2 bytes @ 0x31
  1898  000032                     	ds	1
  1899  000033                     _xtoa$1507:
  1900                           	opt callstack 0
  1901                           
  1902                           ; 2 bytes @ 0x32
  1903  000033                     	ds	1
  1904  000034                     dtoa@p:
  1905                           	opt callstack 0
  1906  000034                     utoa@w:
  1907                           	opt callstack 0
  1908                           
  1909                           ; 2 bytes @ 0x33
  1910  000034                     	ds	1
  1911  000035                     _xtoa$1508:
  1912                           	opt callstack 0
  1913                           
  1914                           ; 2 bytes @ 0x34
  1915  000035                     	ds	1
  1916  000036                     dtoa@w:
  1917                           	opt callstack 0
  1918  000036                     utoa@n:
  1919                           	opt callstack 0
  1920                           
  1921                           ; 8 bytes @ 0x35
  1922  000036                     	ds	1
  1923  000037                     xtoa@p:
  1924                           	opt callstack 0
  1925                           
  1926                           ; 2 bytes @ 0x36
  1927  000037                     	ds	1
  1928  000038                     dtoa@s:
  1929                           	opt callstack 0
  1930                           
  1931                           ; 2 bytes @ 0x37
  1932  000038                     	ds	1
  1933  000039                     xtoa@w:
  1934                           	opt callstack 0
  1935                           
  1936                           ; 2 bytes @ 0x38
  1937  000039                     	ds	1
  1938  00003A                     dtoa@n:
  1939                           	opt callstack 0
  1940                           
  1941                           ; 8 bytes @ 0x39
  1942  00003A                     	ds	1
  1943  00003B                     xtoa@n:
  1944                           	opt callstack 0
  1945                           
  1946                           ; 8 bytes @ 0x3A
  1947  00003B                     	ds	3
  1948  00003E                     utoa@i:
  1949                           	opt callstack 0
  1950                           
  1951                           ; 2 bytes @ 0x3D
  1952  00003E                     	ds	4
  1953  000042                     dtoa@i:
  1954                           	opt callstack 0
  1955                           
  1956                           ; 2 bytes @ 0x41
  1957  000042                     	ds	1
  1958  000043                     xtoa@i:
  1959                           	opt callstack 0
  1960                           
  1961                           ; 2 bytes @ 0x42
  1962  000043                     	ds	2
  1963  000045                     xtoa@c:
  1964                           	opt callstack 0
  1965                           
  1966                           ; 2 bytes @ 0x44
  1967  000045                     	ds	2
  1968  000047                     ?_vfpfcnvrt:
  1969                           	opt callstack 0
  1970  000047                     vfpfcnvrt@fp:
  1971                           	opt callstack 0
  1972                           
  1973                           ; 2 bytes @ 0x46
  1974  000047                     	ds	2
  1975  000049                     vfpfcnvrt@fmt:
  1976                           	opt callstack 0
  1977                           
  1978                           ; 2 bytes @ 0x48
  1979  000049                     	ds	2
  1980  00004B                     vfpfcnvrt@ap:
  1981                           	opt callstack 0
  1982                           
  1983                           ; 2 bytes @ 0x4A
  1984  00004B                     	ds	2
  1985  00004D                     ??_vfpfcnvrt:
  1986                           
  1987                           ; 1 bytes @ 0x4C
  1988  00004D                     	ds	4
  1989  000051                     vfpfcnvrt@ll:
  1990                           	opt callstack 0
  1991                           
  1992                           ; 8 bytes @ 0x50
  1993  000051                     	ds	8
  1994  000059                     vfpfcnvrt@cp:
  1995                           	opt callstack 0
  1996                           
  1997                           ; 2 bytes @ 0x58
  1998  000059                     	ds	2
  1999  00005B                     vfpfcnvrt@done:
  2000                           	opt callstack 0
  2001                           
  2002                           ; 2 bytes @ 0x5A
  2003  00005B                     	ds	2
  2004  00005D                     _vfpfcnvrt$1522:
  2005                           	opt callstack 0
  2006                           
  2007                           ; 2 bytes @ 0x5C
  2008  00005D                     	ds	2
  2009  00005F                     vfpfcnvrt@c:
  2010                           	opt callstack 0
  2011                           
  2012                           ; 1 bytes @ 0x5E
  2013  00005F                     	ds	1
  2014  000060                     vfpfcnvrt@llu:
  2015                           	opt callstack 0
  2016                           
  2017                           ; 8 bytes @ 0x5F
  2018  000060                     	ds	8
  2019  000068                     ?_vfprintf:
  2020                           	opt callstack 0
  2021  000068                     vfprintf@fp:
  2022                           	opt callstack 0
  2023                           
  2024                           ; 2 bytes @ 0x67
  2025  000068                     	ds	2
  2026  00006A                     vfprintf@fmt:
  2027                           	opt callstack 0
  2028                           
  2029                           ; 2 bytes @ 0x69
  2030  00006A                     	ds	2
  2031  00006C                     vfprintf@ap:
  2032                           	opt callstack 0
  2033                           
  2034                           ; 2 bytes @ 0x6B
  2035  00006C                     	ds	2
  2036  00006E                     vfprintf@cfmt:
  2037                           	opt callstack 0
  2038                           
  2039                           ; 2 bytes @ 0x6D
  2040  00006E                     	ds	2
  2041  000070                     ?_printf:
  2042                           	opt callstack 0
  2043  000070                     printf@fmt:
  2044                           	opt callstack 0
  2045                           
  2046                           ; 2 bytes @ 0x6F
  2047  000070                     	ds	8
  2048  000078                     
  2049                           ; 1 bytes @ 0x77
  2050  000078                     	ds	2
  2051  00007A                     printf@ap:
  2052                           	opt callstack 0
  2053                           
  2054                           ; 2 bytes @ 0x79
  2055  00007A                     	ds	2
  2056  00007C                     ??_scrDoneMain:
  2057  00007C                     ??_scrDoneGen:
  2058  00007C                     ??_scrDonePoleDet:
  2059  00007C                     ??_dispShowLogs:
  2060  00007C                     ??_dispLogMain:
  2061  00007C                     ??_dispLogGen:
  2062  00007C                     ??_dispProcMode:
  2063  00007C                     dispLogPoleDet@currPole:
  2064                           	opt callstack 0
  2065  00007C                     showTime@pTime:
  2066                           	opt callstack 0
  2067  00007C                     dispSMrun@motorPos:
  2068                           	opt callstack 0
  2069                           
  2070                           ; 2 bytes @ 0x7B
  2071  00007C                     	ds	1
  2072  00007D                     dispProcMode@mode:
  2073                           	opt callstack 0
  2074  00007D                     dispLogMain@log:
  2075                           	opt callstack 0
  2076  00007D                     dispLogGen@log:
  2077                           	opt callstack 0
  2078                           
  2079                           ; 1 bytes @ 0x7C
  2080  00007D                     	ds	1
  2081  00007E                     ??_dispSMrun:
  2082  00007E                     showTime@i:
  2083                           	opt callstack 0
  2084                           
  2085                           ; 1 bytes @ 0x7D
  2086  00007E                     	ds	1
  2087                           
  2088 ;;
  2089 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  2090 ;;
  2091 ;; *************** function _main *****************
  2092 ;; Defined at:
  2093 ;;		line 26 in file "main.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;		None
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;  time            7   42[BANK0 ] unsigned char [7]
  2098 ;;  startTimeInt    3   49[BANK0 ] unsigned char [3]
  2099 ;;  SMposition      2   53[BANK0 ] unsigned int 
  2100 ;;  dispMode        1   56[BANK0 ] unsigned char 
  2101 ;;  direction1      1   55[BANK0 ] unsigned char 
  2102 ;;  direction2      1   52[BANK0 ] unsigned char 
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  1    wreg      void 
  2105 ;; Registers used:
  2106 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2107 ;; Tracked objects:
  2108 ;;		On entry : 0/0
  2109 ;;		On exit  : 0/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2113 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2114 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2115 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2116 ;;Total ram usage:       20 bytes
  2117 ;; Hardware stack levels required when called:   14
  2118 ;; This function calls:
  2119 ;;		_I2C_Master_Init
  2120 ;;		_dispLogGen
  2121 ;;		_dispLogMain
  2122 ;;		_dispLogPoleDet
  2123 ;;		_dispSMrun
  2124 ;;		_dispShowLogs
  2125 ;;		_dispStateTrans
  2126 ;;		_initLCD
  2127 ;;		_read_EEPROM
  2128 ;;		_runOp
  2129 ;;		_runSM
  2130 ;;		_scrDoneGen
  2131 ;;		_scrDoneMain
  2132 ;;		_scrDonePoleDet
  2133 ;;		_showTime
  2134 ;;		_storeLog
  2135 ;; This function is called by:
  2136 ;;		Startup code after reset
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           	psect	text0
  2141  000D0C                     __ptext0:
  2142                           	opt callstack 0
  2143  000D0C                     _main:
  2144                           	opt callstack 17
  2145                           
  2146                           ;main.c: 27:     ADCON1 = 0b00001111;
  2147                           
  2148                           ;incstack = 0
  2149  000D0C  0E0F               	movlw	15
  2150  000D0E  6EC1               	movwf	4033,c	;volatile
  2151                           
  2152                           ;main.c: 28:     INT1IE = 1;
  2153  000D10  86F0               	bsf	4080,3,c	;volatile
  2154                           
  2155                           ;main.c: 29:     INT0IE = 0;
  2156  000D12  98F2               	bcf	4082,4,c	;volatile
  2157                           
  2158                           ;main.c: 30:     (INTCONbits.GIE = 1);
  2159  000D14  8EF2               	bsf	4082,7,c	;volatile
  2160                           
  2161                           ;main.c: 32:     TRISA = 0b11000000; TRISB = 0b11111111;
  2162  000D16  0EC0               	movlw	192
  2163  000D18  6E92               	movwf	3986,c	;volatile
  2164  000D1A  6893               	setf	3987,c	;volatile
  2165                           
  2166                           ;main.c: 33:     TRISC = 0b11011001; TRISD = 0b00000000; TRISE = 0b00001110;
  2167  000D1C  0ED9               	movlw	217
  2168  000D1E  6E94               	movwf	3988,c	;volatile
  2169  000D20  0E00               	movlw	0
  2170  000D22  6E95               	movwf	3989,c	;volatile
  2171  000D24  0E0E               	movlw	14
  2172  000D26  6E96               	movwf	3990,c	;volatile
  2173                           
  2174                           ;main.c: 35:     LATDbits.LATD1 = 0; LATAbits.LATA5 = 0;
  2175  000D28  928C               	bcf	3980,1,c	;volatile
  2176  000D2A  9A89               	bcf	3977,5,c	;volatile
  2177                           
  2178                           ;main.c: 37:     LATAbits.LATA1 = 0; LATAbits.LATA3 = 0;
  2179  000D2C  9289               	bcf	3977,1,c	;volatile
  2180  000D2E  9689               	bcf	3977,3,c	;volatile
  2181                           
  2182                           ;main.c: 39:     LATCbits.LATC2 = 0;
  2183  000D30  948B               	bcf	3979,2,c	;volatile
  2184                           
  2185                           ;main.c: 41:     LATCbits.LATC5 = 0;
  2186  000D32  9A8B               	bcf	3979,5,c	;volatile
  2187                           
  2188                           ;main.c: 43:     initLCD();
  2189  000D34  EC08  F018         	call	_initLCD	;wreg free
  2190                           
  2191                           ;main.c: 45:     I2C_Master_Init(100000);
  2192  000D38  0EA0               	movlw	160
  2193  000D3A  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  2194  000D3C  0E86               	movlw	134
  2195  000D3E  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  2196  000D40  0E01               	movlw	1
  2197  000D42  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  2198  000D44  0E00               	movlw	0
  2199  000D46  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  2200  000D48  EC72  F018         	call	_I2C_Master_Init	;wreg free
  2201                           
  2202                           ;main.c: 47:     unsigned char time[7];;main.c: 49:     unsigned char startTimeInt[3];;m
      +                          ain.c: 51:     unsigned char dispMode = 0;
  2203  000D4C  0E00               	movlw	0
  2204  000D4E  0100               	movlb	0	; () banked
  2205  000D50  6FB8               	movwf	main@dispMode& (0+255),b
  2206                           
  2207                           ;main.c: 57:     unsigned char direction1 = 1;
  2208  000D52  0E01               	movlw	1
  2209  000D54  6FB7               	movwf	main@direction1& (0+255),b
  2210                           
  2211                           ;main.c: 58:     unsigned char direction2 = 1;
  2212  000D56  0E01               	movlw	1
  2213  000D58  6FB4               	movwf	main@direction2& (0+255),b
  2214                           
  2215                           ;main.c: 60:     unsigned int SMposition = 0;
  2216  000D5A  0E00               	movlw	0
  2217  000D5C  6FB6               	movwf	(main@SMposition+1)& (0+255),b
  2218  000D5E  0E00               	movlw	0
  2219  000D60  6FB5               	movwf	main@SMposition& (0+255),b
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;main.c: 62:     if (read_EEPROM(63) < 5){
  2223  000D62  0E3F               	movlw	63
  2224  000D64  ECD5  F01A         	call	_read_EEPROM
  2225  000D68  0100               	movlb	0	; () banked
  2226  000D6A  6FA5               	movwf	??_main& (0+255),b
  2227  000D6C  0E05               	movlw	5
  2228  000D6E  61A5               	cpfslt	??_main& (0+255),b
  2229  000D70  D005               	goto	l6684
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;main.c: 63:         lastStored = read_EEPROM(63);
  2233  000D72  0E3F               	movlw	63
  2234  000D74  ECD5  F01A         	call	_read_EEPROM
  2235  000D78  0100               	movlb	0	; () banked
  2236  000D7A  6FF0               	movwf	_lastStored& (0+255),b
  2237  000D7C                     l6684:
  2238                           
  2239                           ;main.c: 67:         if(int1Pressed){
  2240  000D7C  0100               	movlb	0	; () banked
  2241  000D7E  51E8               	movf	_int1Pressed& (0+255),w,b	;volatile
  2242  000D80  B4D8               	btfsc	status,2,c
  2243  000D82  D01D               	goto	l6690
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;main.c: 68:             int1Pressed = 0;
  2247  000D84  0E00               	movlw	0
  2248  000D86  6FE8               	movwf	_int1Pressed& (0+255),b	;volatile
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;main.c: 69:             dispMode = dispStateTrans(((PORTB & 0xF0) >> 4),dispMode,
  2252  000D88  C0B8  F007         	movff	main@dispMode,dispStateTrans@dispMode
  2253  000D8C  0EB1               	movlw	low main@startTimeInt
  2254  000D8E  6E08               	movwf	dispStateTrans@startTime,c
  2255  000D90  0E00               	movlw	high main@startTimeInt
  2256  000D92  6E09               	movwf	dispStateTrans@startTime+1,c
  2257  000D94  0EB7               	movlw	low main@direction1
  2258  000D96  6E0A               	movwf	dispStateTrans@pStepDir1,c
  2259  000D98  0E00               	movlw	high main@direction1
  2260  000D9A  6E0B               	movwf	dispStateTrans@pStepDir1+1,c
  2261  000D9C  0EB4               	movlw	low main@direction2
  2262  000D9E  6E0C               	movwf	dispStateTrans@pStepDir2,c
  2263  000DA0  0E00               	movlw	high main@direction2
  2264  000DA2  6E0D               	movwf	dispStateTrans@pStepDir2+1,c
  2265  000DA4  0EE3               	movlw	low _logToShow
  2266  000DA6  6E0E               	movwf	dispStateTrans@pLogToShow,c
  2267  000DA8  0E00               	movlw	high _logToShow
  2268  000DAA  6E0F               	movwf	dispStateTrans@pLogToShow+1,c
  2269  000DAC  C0F0  F010         	movff	_lastStored,dispStateTrans@lastWritten
  2270  000DB0  3881               	swapf	3969,w,c	;volatile
  2271  000DB2  0B0F               	andlw	15
  2272  000DB4  0B0F               	andlw	15
  2273  000DB6  EC38  F00B         	call	_dispStateTrans
  2274  000DBA  0100               	movlb	0	; () banked
  2275  000DBC  6FB8               	movwf	main@dispMode& (0+255),b
  2276  000DBE                     l6690:
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;main.c: 73:         if (dispMode == 0){
  2280  000DBE  51B8               	movf	main@dispMode& (0+255),w,b
  2281  000DC0  A4D8               	btfss	status,2,c
  2282  000DC2  D00E               	goto	l6700
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;main.c: 74:             if (tick >= 50){
  2286  000DC4  0E31               	movlw	49
  2287  000DC6  65C1               	cpfsgt	_tick& (0+255),b
  2288  000DC8  D009               	goto	l6698
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;main.c: 75:                 showTime(time);
  2292  000DCA  0EAA               	movlw	low main@time
  2293  000DCC  6E7C               	movwf	showTime@pTime,c
  2294  000DCE  0E00               	movlw	high main@time
  2295  000DD0  6E7D               	movwf	showTime@pTime+1,c
  2296  000DD2  EC65  F00F         	call	_showTime	;wreg free
  2297                           
  2298                           ;main.c: 76:                 tick = 0;
  2299  000DD6  0E00               	movlw	0
  2300  000DD8  0100               	movlb	0	; () banked
  2301  000DDA  6FC1               	movwf	_tick& (0+255),b
  2302  000DDC                     l6698:
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;main.c: 78:             tick ++;
  2306  000DDC  2BC1               	incf	_tick& (0+255),f,b
  2307                           
  2308                           ;main.c: 79:         } else if (dispMode == 1){
  2309  000DDE  D0EB               	goto	l116
  2310  000DE0                     l6700:
  2311                           
  2312                           ; BSR set to: 0
  2313  000DE0  05B8               	decf	main@dispMode& (0+255),w,b
  2314  000DE2  A4D8               	btfss	status,2,c
  2315  000DE4  D032               	goto	l6714
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;main.c: 80:             runOp(startTimeInt,&tiresSupp,&poleCount,poleInfoArr,&int0Press
      +                          ed,
  2319  000DE6  0EB1               	movlw	low main@startTimeInt
  2320  000DE8  6F80               	movwf	runOp@time& (0+255),b
  2321  000DEA  0E00               	movlw	high main@startTimeInt
  2322  000DEC  6F81               	movwf	(runOp@time+1)& (0+255),b
  2323  000DEE  0EE5               	movlw	low _tiresSupp
  2324  000DF0  6F82               	movwf	runOp@pTotalSupplied& (0+255),b
  2325  000DF2  0E00               	movlw	high _tiresSupp
  2326  000DF4  6F83               	movwf	(runOp@pTotalSupplied+1)& (0+255),b
  2327  000DF6  0EE4               	movlw	low _poleCount
  2328  000DF8  6F84               	movwf	runOp@pNumPoles& (0+255),b
  2329  000DFA  0E00               	movlw	high _poleCount
  2330  000DFC  6F85               	movwf	(runOp@pNumPoles+1)& (0+255),b
  2331  000DFE  0E00               	movlw	low _poleInfoArr
  2332  000E00  6F86               	movwf	runOp@infoArr& (0+255),b
  2333  000E02  0E01               	movlw	high _poleInfoArr
  2334  000E04  6F87               	movwf	(runOp@infoArr+1)& (0+255),b
  2335  000E06  0EE7               	movlw	low _int0Pressed
  2336  000E08  6F88               	movwf	runOp@pInt0P& (0+255),b
  2337  000E0A  0E00               	movlw	high _int0Pressed
  2338  000E0C  6F89               	movwf	(runOp@pInt0P+1)& (0+255),b
  2339  000E0E  0EE6               	movlw	low _totalTime
  2340  000E10  6F8A               	movwf	runOp@opTime& (0+255),b
  2341  000E12  0E00               	movlw	high _totalTime
  2342  000E14  6F8B               	movwf	(runOp@opTime+1)& (0+255),b
  2343  000E16  EC09  F000         	call	_runOp	;wreg free
  2344                           
  2345                           ;main.c: 82:             TRISB = 0b11111011;
  2346  000E1A  0EFB               	movlw	251
  2347  000E1C  6E93               	movwf	3987,c	;volatile
  2348                           
  2349                           ;main.c: 83:             INT1IE = 1;
  2350  000E1E  86F0               	bsf	4080,3,c	;volatile
  2351                           
  2352                           ;main.c: 84:             LATCbits.LATC5 = 0;
  2353  000E20  9A8B               	bcf	3979,5,c	;volatile
  2354                           
  2355                           ;main.c: 87:             storeLog(totalTime,poleCount,tiresSupp,poleInfoArr,&lastStored)
      +                          ;
  2356  000E22  C0E4  F003         	movff	_poleCount,storeLog@numPoles
  2357  000E26  C0E5  F004         	movff	_tiresSupp,storeLog@tiresDep
  2358  000E2A  0E00               	movlw	low _poleInfoArr
  2359  000E2C  6E05               	movwf	storeLog@infoArr,c
  2360  000E2E  0E01               	movlw	high _poleInfoArr
  2361  000E30  6E06               	movwf	storeLog@infoArr+1,c
  2362  000E32  0EF0               	movlw	low _lastStored
  2363  000E34  6E07               	movwf	storeLog@pLastLog,c
  2364  000E36  0E00               	movlw	high _lastStored
  2365  000E38  6E08               	movwf	storeLog@pLastLog+1,c
  2366  000E3A  0100               	movlb	0	; () banked
  2367  000E3C  51E6               	movf	_totalTime& (0+255),w,b
  2368  000E3E  EC4A  F011         	call	_storeLog
  2369                           
  2370                           ;main.c: 89:             dispMode = 2;
  2371  000E42  0E02               	movlw	2
  2372  000E44  0100               	movlb	0	; () banked
  2373  000E46  6FB8               	movwf	main@dispMode& (0+255),b
  2374                           
  2375                           ;main.c: 90:         } else if (dispMode == 2){
  2376  000E48  D0B6               	goto	l116
  2377  000E4A                     l6714:
  2378                           
  2379                           ; BSR set to: 0
  2380  000E4A  0E02               	movlw	2
  2381  000E4C  19B8               	xorwf	main@dispMode& (0+255),w,b
  2382  000E4E  A4D8               	btfss	status,2,c
  2383  000E50  D006               	goto	l6720
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;main.c: 91:             scrDoneMain();
  2387  000E52  ECA0  F018         	call	_scrDoneMain	;wreg free
  2388  000E56                     l6718:
  2389                           
  2390                           ;main.c: 92:             currPole = 0;
  2391  000E56  0E00               	movlw	0
  2392  000E58  0100               	movlb	0	; () banked
  2393  000E5A  6FC2               	movwf	_currPole& (0+255),b
  2394                           
  2395                           ;main.c: 93:         } else if (dispMode == 3){
  2396  000E5C  D0AC               	goto	l116
  2397  000E5E                     l6720:
  2398                           
  2399                           ; BSR set to: 0
  2400  000E5E  0E03               	movlw	3
  2401  000E60  19B8               	xorwf	main@dispMode& (0+255),w,b
  2402  000E62  A4D8               	btfss	status,2,c
  2403  000E64  D00A               	goto	l6724
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;main.c: 94:             scrDoneGen(totalTime,tiresSupp,poleCount);
  2407  000E66  C0E6  F080         	movff	_totalTime,scrDoneGen@time
  2408  000E6A  6B81               	clrf	(scrDoneGen@time+1)& (0+255),b
  2409  000E6C  C0E5  F082         	movff	_tiresSupp,scrDoneGen@tireCount
  2410  000E70  C0E4  F083         	movff	_poleCount,scrDoneGen@poles
  2411  000E74  EC9B  F017         	call	_scrDoneGen	;wreg free
  2412                           
  2413                           ;main.c: 95:         } else if (dispMode == 4){
  2414  000E78  D09E               	goto	l116
  2415  000E7A                     l6724:
  2416                           
  2417                           ; BSR set to: 0
  2418  000E7A  0E04               	movlw	4
  2419  000E7C  19B8               	xorwf	main@dispMode& (0+255),w,b
  2420  000E7E  A4D8               	btfss	status,2,c
  2421  000E80  D00A               	goto	l6728
  2422  000E82                     u7260:
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;main.c: 96:             scrDonePoleDet(poleInfoArr,currPole);
  2426  000E82  0E00               	movlw	low _poleInfoArr
  2427  000E84  6F80               	movwf	scrDonePoleDet@poleData& (0+255),b
  2428  000E86  0E01               	movlw	high _poleInfoArr
  2429  000E88  6F81               	movwf	(scrDonePoleDet@poleData+1)& (0+255),b
  2430  000E8A  C0C2  F082         	movff	_currPole,scrDonePoleDet@currPole
  2431  000E8E  6B83               	clrf	(scrDonePoleDet@currPole+1)& (0+255),b
  2432  000E90  EC4E  F00C         	call	_scrDonePoleDet	;wreg free
  2433                           
  2434                           ;main.c: 97:         } else if (dispMode == 5){
  2435  000E94  D090               	goto	l116
  2436  000E96                     l6728:
  2437                           
  2438                           ; BSR set to: 0
  2439  000E96  0E05               	movlw	5
  2440  000E98  19B8               	xorwf	main@dispMode& (0+255),w,b
  2441  000E9A  A4D8               	btfss	status,2,c
  2442  000E9C  D006               	goto	l6738
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;main.c: 98:             if (currPole > 0){ currPole -= 1; }
  2446  000E9E  51C2               	movf	_currPole& (0+255),w,b
  2447  000EA0  A4D8               	btfss	status,2,c
  2448                           
  2449                           ; BSR set to: 0
  2450  000EA2  07C2               	decf	_currPole& (0+255),f,b
  2451  000EA4                     l6734:
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;main.c: 99:             dispMode = 4;
  2455  000EA4  0E04               	movlw	4
  2456  000EA6  6FB8               	movwf	main@dispMode& (0+255),b
  2457  000EA8  D7EC               	goto	u7260
  2458  000EAA                     l6738:
  2459                           
  2460                           ; BSR set to: 0
  2461  000EAA  0E06               	movlw	6
  2462  000EAC  19B8               	xorwf	main@dispMode& (0+255),w,b
  2463  000EAE  A4D8               	btfss	status,2,c
  2464  000EB0  D016               	goto	l6748
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;main.c: 102:             if (currPole+1 < poleCount){ currPole += 1; }
  2468  000EB2  51E4               	movf	_poleCount& (0+255),w,b
  2469  000EB4  6FA5               	movwf	??_main& (0+255),b
  2470  000EB6  6BA6               	clrf	(??_main+1)& (0+255),b
  2471  000EB8  51C2               	movf	_currPole& (0+255),w,b
  2472  000EBA  6FA7               	movwf	(??_main+2)& (0+255),b
  2473  000EBC  6BA8               	clrf	(??_main+3)& (0+255),b
  2474  000EBE  0E01               	movlw	1
  2475  000EC0  27A7               	addwf	(??_main+2)& (0+255),f,b
  2476  000EC2  0E00               	movlw	0
  2477  000EC4  23A8               	addwfc	(??_main+3)& (0+255),f,b
  2478  000EC6  51A5               	movf	??_main& (0+255),w,b
  2479  000EC8  5DA7               	subwf	(??_main+2)& (0+255),w,b
  2480  000ECA  51A8               	movf	(??_main+3)& (0+255),w,b
  2481  000ECC  0A80               	xorlw	128
  2482  000ECE  6FA9               	movwf	(??_main+4)& (0+255),b
  2483  000ED0  51A6               	movf	(??_main+1)& (0+255),w,b
  2484  000ED2  0A80               	xorlw	128
  2485  000ED4  59A9               	subwfb	(??_main+4)& (0+255),w,b
  2486  000ED6  B0D8               	btfsc	status,0,c
  2487  000ED8  D7E5               	goto	l6734
  2488                           
  2489                           ; BSR set to: 0
  2490  000EDA  2BC2               	incf	_currPole& (0+255),f,b
  2491  000EDC  D7E3               	goto	l6734
  2492  000EDE                     l6748:
  2493                           
  2494                           ; BSR set to: 0
  2495  000EDE  0E07               	movlw	7
  2496  000EE0  19B8               	xorwf	main@dispMode& (0+255),w,b
  2497  000EE2  A4D8               	btfss	status,2,c
  2498  000EE4  D014               	goto	l6754
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;main.c: 106:             dispSMrun(direction1, SMposition);
  2502  000EE6  C0B5  F07C         	movff	main@SMposition,dispSMrun@motorPos
  2503  000EEA  C0B6  F07D         	movff	main@SMposition+1,dispSMrun@motorPos+1
  2504  000EEE  51B7               	movf	main@direction1& (0+255),w,b
  2505  000EF0  EC9D  F016         	call	_dispSMrun
  2506                           
  2507                           ;main.c: 107:             runSM(direction1,&SMposition,&int1Pressed);
  2508  000EF4  0EB5               	movlw	low main@SMposition
  2509  000EF6  6E01               	movwf	runSM@pSMposition,c
  2510  000EF8  0E00               	movlw	high main@SMposition
  2511  000EFA  6E02               	movwf	runSM@pSMposition+1,c
  2512  000EFC  0EE8               	movlw	low _int1Pressed
  2513  000EFE  6E03               	movwf	runSM@int1Pressed,c
  2514  000F00  0E00               	movlw	high _int1Pressed
  2515  000F02  6E04               	movwf	runSM@int1Pressed+1,c
  2516  000F04  0100               	movlb	0	; () banked
  2517  000F06  51B7               	movf	main@direction1& (0+255),w,b
  2518  000F08  EC89  F013         	call	_runSM
  2519                           
  2520                           ;main.c: 108:         } else if (dispMode == 8){
  2521  000F0C  D054               	goto	l116
  2522  000F0E                     l6754:
  2523                           
  2524                           ; BSR set to: 0
  2525  000F0E  0E08               	movlw	8
  2526  000F10  19B8               	xorwf	main@dispMode& (0+255),w,b
  2527  000F12  A4D8               	btfss	status,2,c
  2528  000F14  D003               	goto	l6758
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;main.c: 109:             dispShowLogs();
  2532  000F16  ECCD  F018         	call	_dispShowLogs	;wreg free
  2533                           
  2534                           ;main.c: 110:         } else if (dispMode == 9){
  2535  000F1A  D04D               	goto	l116
  2536  000F1C                     l6758:
  2537                           
  2538                           ; BSR set to: 0
  2539  000F1C  0E09               	movlw	9
  2540  000F1E  19B8               	xorwf	main@dispMode& (0+255),w,b
  2541  000F20  A4D8               	btfss	status,2,c
  2542  000F22  D004               	goto	l6764
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;main.c: 111:             dispLogMain(logToShow);
  2546  000F24  51E3               	movf	_logToShow& (0+255),w,b
  2547  000F26  EC09  F014         	call	_dispLogMain
  2548  000F2A  D795               	goto	l6718
  2549  000F2C                     l6764:
  2550                           
  2551                           ; BSR set to: 0
  2552  000F2C  0E0A               	movlw	10
  2553  000F2E  19B8               	xorwf	main@dispMode& (0+255),w,b
  2554  000F30  A4D8               	btfss	status,2,c
  2555  000F32  D004               	goto	l6768
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;main.c: 114:             dispLogGen(logToShow);
  2559  000F34  51E3               	movf	_logToShow& (0+255),w,b
  2560  000F36  EC78  F012         	call	_dispLogGen
  2561                           
  2562                           ;main.c: 115:         } else if (dispMode == 11){
  2563  000F3A  D03D               	goto	l116
  2564  000F3C                     l6768:
  2565                           
  2566                           ; BSR set to: 0
  2567  000F3C  0E0B               	movlw	11
  2568  000F3E  19B8               	xorwf	main@dispMode& (0+255),w,b
  2569  000F40  A4D8               	btfss	status,2,c
  2570  000F42  D006               	goto	l6772
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;main.c: 116:             dispLogPoleDet(logToShow, currPole);
  2574  000F44  C0C2  F07C         	movff	_currPole,dispLogPoleDet@currPole
  2575  000F48  51E3               	movf	_logToShow& (0+255),w,b
  2576  000F4A  EC08  F009         	call	_dispLogPoleDet
  2577                           
  2578                           ;main.c: 117:         } else if (dispMode == 12){
  2579  000F4E  D033               	goto	l116
  2580  000F50                     l6772:
  2581                           
  2582                           ; BSR set to: 0
  2583  000F50  0E0C               	movlw	12
  2584  000F52  19B8               	xorwf	main@dispMode& (0+255),w,b
  2585  000F54  A4D8               	btfss	status,2,c
  2586  000F56  D00B               	goto	l6782
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;main.c: 118:             if (currPole > 0){ currPole -= 1; }
  2590  000F58  51C2               	movf	_currPole& (0+255),w,b
  2591  000F5A  A4D8               	btfss	status,2,c
  2592                           
  2593                           ; BSR set to: 0
  2594  000F5C  07C2               	decf	_currPole& (0+255),f,b
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;main.c: 119:             dispMode = 11;
  2598  000F5E  0E0B               	movlw	11
  2599  000F60  6FB8               	movwf	main@dispMode& (0+255),b
  2600                           
  2601                           ; BSR set to: 0
  2602                           ;main.c: 120:             dispLogPoleDet(logToShow, currPole);
  2603  000F62  C0C2  F07C         	movff	_currPole,dispLogPoleDet@currPole
  2604  000F66  51E3               	movf	_logToShow& (0+255),w,b
  2605  000F68  EC08  F009         	call	_dispLogPoleDet
  2606                           
  2607                           ;main.c: 121:         } else if (dispMode == 13){
  2608  000F6C  D024               	goto	l116
  2609  000F6E                     l6782:
  2610                           
  2611                           ; BSR set to: 0
  2612  000F6E  0E0D               	movlw	13
  2613  000F70  19B8               	xorwf	main@dispMode& (0+255),w,b
  2614  000F72  A4D8               	btfss	status,2,c
  2615  000F74  D020               	goto	l116
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;main.c: 122:             if (currPole+1 < read_EEPROM(64*logToShow+1)){ currPole += 1; 
      +                          }
  2619  000F76  51E3               	movf	_logToShow& (0+255),w,b
  2620  000F78  0D40               	mullw	64
  2621  000F7A  28F3               	incf	prodl,w,c
  2622  000F7C  ECD5  F01A         	call	_read_EEPROM
  2623  000F80  0100               	movlb	0	; () banked
  2624  000F82  6FA5               	movwf	??_main& (0+255),b
  2625  000F84  6BA6               	clrf	(??_main+1)& (0+255),b
  2626  000F86  51C2               	movf	_currPole& (0+255),w,b
  2627  000F88  6FA7               	movwf	(??_main+2)& (0+255),b
  2628  000F8A  6BA8               	clrf	(??_main+3)& (0+255),b
  2629  000F8C  0E01               	movlw	1
  2630  000F8E  27A7               	addwf	(??_main+2)& (0+255),f,b
  2631  000F90  0E00               	movlw	0
  2632  000F92  23A8               	addwfc	(??_main+3)& (0+255),f,b
  2633  000F94  51A5               	movf	??_main& (0+255),w,b
  2634  000F96  5DA7               	subwf	(??_main+2)& (0+255),w,b
  2635  000F98  51A8               	movf	(??_main+3)& (0+255),w,b
  2636  000F9A  0A80               	xorlw	128
  2637  000F9C  6FA9               	movwf	(??_main+4)& (0+255),b
  2638  000F9E  51A6               	movf	(??_main+1)& (0+255),w,b
  2639  000FA0  0A80               	xorlw	128
  2640  000FA2  59A9               	subwfb	(??_main+4)& (0+255),w,b
  2641  000FA4  A0D8               	btfss	status,0,c
  2642                           
  2643                           ; BSR set to: 0
  2644  000FA6  2BC2               	incf	_currPole& (0+255),f,b
  2645                           
  2646                           ; BSR set to: 0
  2647                           ;main.c: 123:             dispMode = 11;
  2648  000FA8  0E0B               	movlw	11
  2649  000FAA  6FB8               	movwf	main@dispMode& (0+255),b
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;main.c: 124:             dispLogPoleDet(logToShow, currPole);
  2653  000FAC  C0C2  F07C         	movff	_currPole,dispLogPoleDet@currPole
  2654  000FB0  51E3               	movf	_logToShow& (0+255),w,b
  2655  000FB2  EC08  F009         	call	_dispLogPoleDet
  2656  000FB6                     l116:
  2657                           
  2658                           ;main.c: 126:         _delay((unsigned long)((10)*(10000000/4000.0)));
  2659                           
  2660                           ; BSR set to: 0
  2661  000FB6  0E21               	movlw	33
  2662  000FB8  0100               	movlb	0	; () banked
  2663  000FBA  6FA5               	movwf	??_main& (0+255),b
  2664  000FBC  0E76               	movlw	118
  2665  000FBE                     u7467:
  2666  000FBE  2EE8               	decfsz	wreg,f,c
  2667  000FC0  D7FE               	bra	u7467
  2668  000FC2  2FA5               	decfsz	??_main& (0+255),f,b
  2669  000FC4  D7FC               	bra	u7467
  2670  000FC6  F000               	nop	
  2671  000FC8  D6D9               	goto	l6684
  2672  000FCA                     __end_of_main:
  2673                           	opt callstack 0
  2674                           
  2675 ;; *************** function _storeLog *****************
  2676 ;; Defined at:
  2677 ;;		line 563 in file "helpers.c"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;  time            1    wreg     unsigned char 
  2680 ;;  numPoles        1    2[COMRAM] unsigned char 
  2681 ;;  tiresDep        1    3[COMRAM] unsigned char 
  2682 ;;  infoArr         2    4[COMRAM] PTR struct poleInfo
  2683 ;;		 -> poleInfoArr(75), 
  2684 ;;  pLastLog        2    6[COMRAM] PTR unsigned char 
  2685 ;;		 -> lastStored(1), 
  2686 ;; Auto vars:     Size  Location     Type
  2687 ;;  time            1   12[COMRAM] unsigned char 
  2688 ;;  currAdr         1   15[COMRAM] unsigned char 
  2689 ;;  i               1   14[COMRAM] unsigned char 
  2690 ;;  currLog         1   13[COMRAM] unsigned char 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2700 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2701 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;Total ram usage:       14 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    2
  2707 ;; This function calls:
  2708 ;;		_write_EEPROM
  2709 ;; This function is called by:
  2710 ;;		_main
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text1
  2715  002294                     __ptext1:
  2716                           	opt callstack 0
  2717  002294                     _storeLog:
  2718                           	opt callstack 28
  2719                           
  2720                           ;incstack = 0
  2721                           ;storeLog@time stored from wreg
  2722  002294  6E0D               	movwf	storeLog@time,c
  2723                           
  2724                           ;helpers.c: 567:     unsigned char i=0;
  2725  002296  0E00               	movlw	0
  2726  002298  6E0F               	movwf	storeLog@i,c
  2727                           
  2728                           ;helpers.c: 568:     unsigned char currLog = (*pLastLog+1)%4;
  2729  00229A  C007  FFD9         	movff	storeLog@pLastLog,fsr2l
  2730  00229E  C008  FFDA         	movff	storeLog@pLastLog+1,fsr2h
  2731  0022A2  50DF               	movf	indf2,w,c
  2732  0022A4  6E09               	movwf	??_storeLog& (0+255),c
  2733  0022A6  2809               	incf	??_storeLog,w,c
  2734  0022A8  0B03               	andlw	3
  2735  0022AA  6E0E               	movwf	storeLog@currLog,c
  2736                           
  2737                           ;helpers.c: 569:     *pLastLog = currLog;
  2738  0022AC  C007  FFD9         	movff	storeLog@pLastLog,fsr2l
  2739  0022B0  C008  FFDA         	movff	storeLog@pLastLog+1,fsr2h
  2740  0022B4  C00E  FFDF         	movff	storeLog@currLog,indf2
  2741                           
  2742                           ;helpers.c: 570:     write_EEPROM(63,*pLastLog);
  2743  0022B8  C007  FFD9         	movff	storeLog@pLastLog,fsr2l
  2744  0022BC  C008  FFDA         	movff	storeLog@pLastLog+1,fsr2h
  2745  0022C0  50DF               	movf	indf2,w,c
  2746  0022C2  6E01               	movwf	write_EEPROM@data,c
  2747  0022C4  0E3F               	movlw	63
  2748  0022C6  EC45  F01A         	call	_write_EEPROM
  2749                           
  2750                           ;helpers.c: 571:     currAdr = currLog*64;
  2751  0022CA  500E               	movf	storeLog@currLog,w,c
  2752  0022CC  0D40               	mullw	64
  2753  0022CE  CFF3 F010          	movff	prodl,storeLog@currAdr
  2754                           
  2755                           ;helpers.c: 585:     write_EEPROM(currAdr,time); currAdr++;
  2756  0022D2  C00D  F001         	movff	storeLog@time,write_EEPROM@data
  2757  0022D6  5010               	movf	storeLog@currAdr,w,c
  2758  0022D8  EC45  F01A         	call	_write_EEPROM
  2759  0022DC  2A10               	incf	storeLog@currAdr,f,c
  2760                           
  2761                           ;helpers.c: 586:     write_EEPROM(currAdr,numPoles); currAdr++;
  2762  0022DE  C003  F001         	movff	storeLog@numPoles,write_EEPROM@data
  2763  0022E2  5010               	movf	storeLog@currAdr,w,c
  2764  0022E4  EC45  F01A         	call	_write_EEPROM
  2765  0022E8  2A10               	incf	storeLog@currAdr,f,c
  2766                           
  2767                           ;helpers.c: 587:     write_EEPROM(currAdr,tiresDep); currAdr++;
  2768  0022EA  C004  F001         	movff	storeLog@tiresDep,write_EEPROM@data
  2769  0022EE  5010               	movf	storeLog@currAdr,w,c
  2770  0022F0  EC45  F01A         	call	_write_EEPROM
  2771  0022F4  2A10               	incf	storeLog@currAdr,f,c
  2772  0022F6                     l6310:
  2773                           
  2774                           ;helpers.c: 589:         if ((i >= numPoles)&& (i < 15)) { break; }
  2775  0022F6  5003               	movf	storeLog@numPoles,w,c
  2776  0022F8  5C0F               	subwf	storeLog@i,w,c
  2777  0022FA  A0D8               	btfss	status,0,c
  2778  0022FC  D004               	goto	l6316
  2779  0022FE  0E0F               	movlw	15
  2780  002300  600F               	cpfslt	storeLog@i,c
  2781  002302  D001               	goto	l6316
  2782  002304  0012               	return	
  2783  002306                     l6316:
  2784                           
  2785                           ;helpers.c: 590:         write_EEPROM(currAdr,((infoArr[i]).pos)>>8); currAdr++;
  2786  002306  500F               	movf	storeLog@i,w,c
  2787  002308  0D05               	mullw	5
  2788  00230A  C005  F009         	movff	storeLog@infoArr,??_storeLog
  2789  00230E  C006  F00A         	movff	storeLog@infoArr+1,??_storeLog+1
  2790  002312  50F3               	movf	prodl,w,c
  2791  002314  2609               	addwf	??_storeLog,f,c
  2792  002316  50F4               	movf	prodh,w,c
  2793  002318  220A               	addwfc	??_storeLog+1,f,c
  2794  00231A  0E01               	movlw	1
  2795  00231C  2409               	addwf	??_storeLog,w,c
  2796  00231E  6ED9               	movwf	fsr2l,c
  2797  002320  0E00               	movlw	0
  2798  002322  200A               	addwfc	??_storeLog+1,w,c
  2799  002324  6EDA               	movwf	fsr2h,c
  2800  002326  CFDE F00B          	movff	postinc2,??_storeLog+2
  2801  00232A  CFDD F00C          	movff	postdec2,??_storeLog+3
  2802  00232E  C00C  F00B         	movff	??_storeLog+3,??_storeLog+2
  2803  002332  6A0C               	clrf	??_storeLog+3,c
  2804  002334  BE0B               	btfsc	??_storeLog+2,7,c
  2805  002336  680C               	setf	??_storeLog+3,c
  2806  002338  500B               	movf	??_storeLog+2,w,c
  2807  00233A  6E01               	movwf	write_EEPROM@data,c
  2808  00233C  5010               	movf	storeLog@currAdr,w,c
  2809  00233E  EC45  F01A         	call	_write_EEPROM
  2810  002342  2A10               	incf	storeLog@currAdr,f,c
  2811                           
  2812                           ;helpers.c: 591:         write_EEPROM(currAdr,((infoArr[i]).pos)&0xff); currAdr++;
  2813  002344  500F               	movf	storeLog@i,w,c
  2814  002346  0D05               	mullw	5
  2815  002348  C005  F009         	movff	storeLog@infoArr,??_storeLog
  2816  00234C  C006  F00A         	movff	storeLog@infoArr+1,??_storeLog+1
  2817  002350  50F3               	movf	prodl,w,c
  2818  002352  2609               	addwf	??_storeLog,f,c
  2819  002354  50F4               	movf	prodh,w,c
  2820  002356  220A               	addwfc	??_storeLog+1,f,c
  2821  002358  0E01               	movlw	1
  2822  00235A  2409               	addwf	??_storeLog,w,c
  2823  00235C  6ED9               	movwf	fsr2l,c
  2824  00235E  0E00               	movlw	0
  2825  002360  200A               	addwfc	??_storeLog+1,w,c
  2826  002362  6EDA               	movwf	fsr2h,c
  2827  002364  50DF               	movf	indf2,w,c
  2828  002366  6E01               	movwf	write_EEPROM@data,c
  2829  002368  5010               	movf	storeLog@currAdr,w,c
  2830  00236A  EC45  F01A         	call	_write_EEPROM
  2831  00236E  2A10               	incf	storeLog@currAdr,f,c
  2832                           
  2833                           ;helpers.c: 592:         write_EEPROM(currAdr,(infoArr[i]).tiresSupp); currAdr++;
  2834  002370  500F               	movf	storeLog@i,w,c
  2835  002372  0D05               	mullw	5
  2836  002374  C005  F009         	movff	storeLog@infoArr,??_storeLog
  2837  002378  C006  F00A         	movff	storeLog@infoArr+1,??_storeLog+1
  2838  00237C  50F3               	movf	prodl,w,c
  2839  00237E  2609               	addwf	??_storeLog,f,c
  2840  002380  50F4               	movf	prodh,w,c
  2841  002382  220A               	addwfc	??_storeLog+1,f,c
  2842  002384  0E03               	movlw	3
  2843  002386  2409               	addwf	??_storeLog,w,c
  2844  002388  6ED9               	movwf	fsr2l,c
  2845  00238A  0E00               	movlw	0
  2846  00238C  200A               	addwfc	??_storeLog+1,w,c
  2847  00238E  6EDA               	movwf	fsr2h,c
  2848  002390  50DF               	movf	indf2,w,c
  2849  002392  6E01               	movwf	write_EEPROM@data,c
  2850  002394  5010               	movf	storeLog@currAdr,w,c
  2851  002396  EC45  F01A         	call	_write_EEPROM
  2852  00239A  2A10               	incf	storeLog@currAdr,f,c
  2853                           
  2854                           ;helpers.c: 593:         write_EEPROM(currAdr,(infoArr[i]).tiresPresent);currAdr++;
  2855  00239C  500F               	movf	storeLog@i,w,c
  2856  00239E  0D05               	mullw	5
  2857  0023A0  C005  F009         	movff	storeLog@infoArr,??_storeLog
  2858  0023A4  C006  F00A         	movff	storeLog@infoArr+1,??_storeLog+1
  2859  0023A8  50F3               	movf	prodl,w,c
  2860  0023AA  2609               	addwf	??_storeLog,f,c
  2861  0023AC  50F4               	movf	prodh,w,c
  2862  0023AE  220A               	addwfc	??_storeLog+1,f,c
  2863  0023B0  0E04               	movlw	4
  2864  0023B2  2409               	addwf	??_storeLog,w,c
  2865  0023B4  6ED9               	movwf	fsr2l,c
  2866  0023B6  0E00               	movlw	0
  2867  0023B8  200A               	addwfc	??_storeLog+1,w,c
  2868  0023BA  6EDA               	movwf	fsr2h,c
  2869  0023BC  50DF               	movf	indf2,w,c
  2870  0023BE  6E01               	movwf	write_EEPROM@data,c
  2871  0023C0  5010               	movf	storeLog@currAdr,w,c
  2872  0023C2  EC45  F01A         	call	_write_EEPROM
  2873  0023C6  2A10               	incf	storeLog@currAdr,f,c
  2874                           
  2875                           ;helpers.c: 594:         i++;
  2876  0023C8  2A0F               	incf	storeLog@i,f,c
  2877  0023CA  D795               	goto	l6310
  2878  0023CC                     __end_of_storeLog:
  2879                           	opt callstack 0
  2880                           
  2881 ;; *************** function _write_EEPROM *****************
  2882 ;; Defined at:
  2883 ;;		line 531 in file "helpers.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;  address         1    wreg     unsigned char 
  2886 ;;  data            1    0[COMRAM] unsigned char 
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;  address         1    1[COMRAM] unsigned char 
  2889 ;; Return value:  Size  Location     Type
  2890 ;;                  1    wreg      void 
  2891 ;; Registers used:
  2892 ;;		wreg, status,2
  2893 ;; Tracked objects:
  2894 ;;		On entry : 0/0
  2895 ;;		On exit  : 0/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2898 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2902 ;;Total ram usage:        2 bytes
  2903 ;; Hardware stack levels used:    1
  2904 ;; Hardware stack levels required when called:    1
  2905 ;; This function calls:
  2906 ;;		Nothing
  2907 ;; This function is called by:
  2908 ;;		_storeLog
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           	psect	text2
  2913  00348A                     __ptext2:
  2914                           	opt callstack 0
  2915  00348A                     _write_EEPROM:
  2916                           	opt callstack 28
  2917                           
  2918                           ;incstack = 0
  2919                           ;write_EEPROM@address stored from wreg
  2920  00348A  6E02               	movwf	write_EEPROM@address,c
  2921  00348C                     
  2922                           ;helpers.c: 533:     while( EECON1bits.WR ){continue;}
  2923  00348C  B2A6               	btfsc	4006,1,c	;volsfr
  2924  00348E  D7FE               	goto	l5452
  2925                           
  2926                           ;helpers.c: 535:     EECON1bits.WREN=1;
  2927  003490  84A6               	bsf	4006,2,c	;volsfr
  2928                           
  2929                           ;helpers.c: 536:     EEADR=address;
  2930  003492  C002  FFA9         	movff	write_EEPROM@address,4009	;volatile
  2931                           
  2932                           ;helpers.c: 537:     EEDATA=data;
  2933  003496  C001  FFA8         	movff	write_EEPROM@data,4008	;volatile
  2934                           
  2935                           ;helpers.c: 538:     EECON1bits.EEPGD=0;
  2936  00349A  9EA6               	bcf	4006,7,c	;volsfr
  2937                           
  2938                           ;helpers.c: 539:     EECON1bits.CFGS=0;
  2939  00349C  9CA6               	bcf	4006,6,c	;volsfr
  2940                           
  2941                           ;helpers.c: 540:     INTCONbits.GIE=0;
  2942  00349E  9EF2               	bcf	4082,7,c	;volatile
  2943                           
  2944                           ;helpers.c: 543:     EECON2 = 0x55;
  2945  0034A0  0E55               	movlw	85
  2946  0034A2  6EA7               	movwf	4007,c	;volsfr
  2947                           
  2948                           ;helpers.c: 544:     EECON2 = 0xAA;
  2949  0034A4  0EAA               	movlw	170
  2950  0034A6  6EA7               	movwf	4007,c	;volsfr
  2951                           
  2952                           ;helpers.c: 545:     EECON1bits.WR = 1;
  2953  0034A8  82A6               	bsf	4006,1,c	;volsfr
  2954                           
  2955                           ;helpers.c: 547:     INTCONbits.GIE = 1;
  2956  0034AA  8EF2               	bsf	4082,7,c	;volatile
  2957  0034AC                     l641:
  2958  0034AC  B2A6               	btfsc	4006,1,c	;volsfr
  2959  0034AE  D7FE               	goto	l641
  2960                           
  2961                           ;helpers.c: 550:     EECON1bits.WREN=0;
  2962  0034B0  94A6               	bcf	4006,2,c	;volsfr
  2963  0034B2  0012               	return		;funcret
  2964  0034B4                     __end_of_write_EEPROM:
  2965                           	opt callstack 0
  2966                           
  2967 ;; *************** function _showTime *****************
  2968 ;; Defined at:
  2969 ;;		line 3 in file "lcdCode.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;  pTime           2  123[COMRAM] PTR unsigned char 
  2972 ;;		 -> main@time(7), 
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;  i               1  125[COMRAM] unsigned char 
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  1    wreg      void 
  2977 ;; Registers used:
  2978 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2979 ;; Tracked objects:
  2980 ;;		On entry : 0/0
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2984 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;Total ram usage:        6 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:   12
  2991 ;; This function calls:
  2992 ;;		_I2C_Master_Read
  2993 ;;		_I2C_Master_Start
  2994 ;;		_I2C_Master_Stop
  2995 ;;		_I2C_Master_Write
  2996 ;;		_lcdInst
  2997 ;;		_printf
  2998 ;; This function is called by:
  2999 ;;		_main
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           	psect	text3
  3004  001ECA                     __ptext3:
  3005                           	opt callstack 0
  3006  001ECA                     _showTime:
  3007                           	opt callstack 18
  3008                           
  3009                           ;lcdCode.c: 5:     I2C_Master_Start();
  3010                           
  3011                           ;incstack = 0
  3012  001ECA  EC18  F01B         	call	_I2C_Master_Start	;wreg free
  3013                           
  3014                           ;lcdCode.c: 6:     I2C_Master_Write(0b11010000);
  3015  001ECE  0E00               	movlw	0
  3016  001ED0  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  3017  001ED2  0ED0               	movlw	208
  3018  001ED4  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  3019  001ED6  EC03  F01B         	call	_I2C_Master_Write	;wreg free
  3020                           
  3021                           ;lcdCode.c: 7:     I2C_Master_Write(0x00);
  3022  001EDA  0E00               	movlw	0
  3023  001EDC  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  3024  001EDE  0E00               	movlw	0
  3025  001EE0  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  3026  001EE2  EC03  F01B         	call	_I2C_Master_Write	;wreg free
  3027                           
  3028                           ;lcdCode.c: 8:     I2C_Master_Stop();
  3029  001EE6  EC14  F01B         	call	_I2C_Master_Stop	;wreg free
  3030                           
  3031                           ;lcdCode.c: 11:     I2C_Master_Start();
  3032  001EEA  EC18  F01B         	call	_I2C_Master_Start	;wreg free
  3033                           
  3034                           ;lcdCode.c: 12:     I2C_Master_Write(0b11010001);
  3035  001EEE  0E00               	movlw	0
  3036  001EF0  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  3037  001EF2  0ED1               	movlw	209
  3038  001EF4  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  3039  001EF6  EC03  F01B         	call	_I2C_Master_Write	;wreg free
  3040                           
  3041                           ;lcdCode.c: 13:     for(unsigned char i = 0; i < 6; i++){
  3042  001EFA  0E00               	movlw	0
  3043  001EFC  6E7E               	movwf	showTime@i,c
  3044  001EFE                     l5888:
  3045                           
  3046                           ;lcdCode.c: 14:         pTime[i] = I2C_Master_Read(0);
  3047  001EFE  507E               	movf	showTime@i,w,c
  3048  001F00  247C               	addwf	showTime@pTime,w,c
  3049  001F02  6ED9               	movwf	fsr2l,c
  3050  001F04  0E00               	movlw	0
  3051  001F06  207D               	addwfc	showTime@pTime+1,w,c
  3052  001F08  6EDA               	movwf	fsr2h,c
  3053  001F0A  0E00               	movlw	0
  3054  001F0C  ECA8  F01A         	call	_I2C_Master_Read
  3055  001F10  6EDF               	movwf	indf2,c
  3056                           
  3057                           ;lcdCode.c: 15:     }
  3058  001F12  2A7E               	incf	showTime@i,f,c
  3059  001F14  0E05               	movlw	5
  3060  001F16  647E               	cpfsgt	showTime@i,c
  3061  001F18  D7F2               	goto	l5888
  3062                           
  3063                           ;lcdCode.c: 16:     pTime[6] = I2C_Master_Read(1);
  3064  001F1A  EE20 F006          	lfsr	2,6
  3065  001F1E  507C               	movf	showTime@pTime,w,c
  3066  001F20  26D9               	addwf	fsr2l,f,c
  3067  001F22  507D               	movf	showTime@pTime+1,w,c
  3068  001F24  22DA               	addwfc	fsr2h,f,c
  3069  001F26  0E01               	movlw	1
  3070  001F28  ECA8  F01A         	call	_I2C_Master_Read
  3071  001F2C  6EDF               	movwf	indf2,c
  3072                           
  3073                           ;lcdCode.c: 17:     I2C_Master_Stop();
  3074  001F2E  EC14  F01B         	call	_I2C_Master_Stop	;wreg free
  3075                           
  3076                           ;lcdCode.c: 20:     { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.0)));};
  3077  001F32  0E80               	movlw	128
  3078  001F34  ECFD  F01A         	call	_lcdInst
  3079  001F38  0E07               	movlw	7
  3080  001F3A  0100               	movlb	0	; () banked
  3081  001F3C  6F80               	movwf	??_showTime& (0+255),b
  3082  001F3E  0E7D               	movlw	125
  3083  001F40                     u7477:
  3084  001F40  2EE8               	decfsz	wreg,f,c
  3085  001F42  D7FE               	bra	u7477
  3086  001F44  2F80               	decfsz	??_showTime& (0+255),f,b
  3087  001F46  D7FC               	bra	u7477
  3088                           
  3089                           ;lcdCode.c: 21:     printf("TEAM 31     TIRE");
  3090  001F48  0E4B               	movlw	low STR_1
  3091  001F4A  6E70               	movwf	printf@fmt,c
  3092  001F4C  0EFF               	movlw	high STR_1
  3093  001F4E  6E71               	movwf	printf@fmt+1,c
  3094  001F50  EC82  F01A         	call	_printf	;wreg free
  3095  001F54  0EC0               	movlw	192
  3096  001F56  ECFD  F01A         	call	_lcdInst
  3097                           
  3098                           ;lcdCode.c: 24:     printf("    %02x/%02x/%02x    ", pTime[6],pTime[5],pTime[4]);
  3099  001F5A  0E55               	movlw	low STR_2
  3100  001F5C  6E70               	movwf	printf@fmt,c
  3101  001F5E  0EFC               	movlw	high STR_2
  3102  001F60  6E71               	movwf	printf@fmt+1,c
  3103  001F62  EE20 F006          	lfsr	2,6
  3104  001F66  507C               	movf	showTime@pTime,w,c
  3105  001F68  26D9               	addwf	fsr2l,f,c
  3106  001F6A  507D               	movf	showTime@pTime+1,w,c
  3107  001F6C  22DA               	addwfc	fsr2h,f,c
  3108  001F6E  50DF               	movf	indf2,w,c
  3109  001F70  0100               	movlb	0	; () banked
  3110  001F72  6F80               	movwf	??_showTime& (0+255),b
  3111  001F74  5180               	movf	??_showTime& (0+255),w,b
  3112  001F76  6E72               	movwf	?_printf+2,c
  3113  001F78  6A73               	clrf	?_printf+3,c
  3114  001F7A  EE20 F005          	lfsr	2,5
  3115  001F7E  507C               	movf	showTime@pTime,w,c
  3116  001F80  26D9               	addwf	fsr2l,f,c
  3117  001F82  507D               	movf	showTime@pTime+1,w,c
  3118  001F84  22DA               	addwfc	fsr2h,f,c
  3119  001F86  50DF               	movf	indf2,w,c
  3120  001F88  6F81               	movwf	(??_showTime+1)& (0+255),b
  3121  001F8A  5181               	movf	(??_showTime+1)& (0+255),w,b
  3122  001F8C  6E74               	movwf	?_printf+4,c
  3123  001F8E  6A75               	clrf	?_printf+5,c
  3124  001F90  EE20 F004          	lfsr	2,4
  3125  001F94  507C               	movf	showTime@pTime,w,c
  3126  001F96  26D9               	addwf	fsr2l,f,c
  3127  001F98  507D               	movf	showTime@pTime+1,w,c
  3128  001F9A  22DA               	addwfc	fsr2h,f,c
  3129  001F9C  50DF               	movf	indf2,w,c
  3130  001F9E  6F82               	movwf	(??_showTime+2)& (0+255),b
  3131  001FA0  5182               	movf	(??_showTime+2)& (0+255),w,b
  3132  001FA2  6E76               	movwf	?_printf+6,c
  3133  001FA4  6A77               	clrf	?_printf+7,c
  3134  001FA6  EC82  F01A         	call	_printf	;wreg free
  3135  001FAA  0E90               	movlw	144
  3136  001FAC  ECFD  F01A         	call	_lcdInst
  3137                           
  3138                           ;lcdCode.c: 27:     printf("    %02x:%02x:%02x    ", pTime[2],pTime[1],pTime[0]);
  3139  001FB0  0E6C               	movlw	low STR_3
  3140  001FB2  6E70               	movwf	printf@fmt,c
  3141  001FB4  0EFC               	movlw	high STR_3
  3142  001FB6  6E71               	movwf	printf@fmt+1,c
  3143  001FB8  EE20 F002          	lfsr	2,2
  3144  001FBC  507C               	movf	showTime@pTime,w,c
  3145  001FBE  26D9               	addwf	fsr2l,f,c
  3146  001FC0  507D               	movf	showTime@pTime+1,w,c
  3147  001FC2  22DA               	addwfc	fsr2h,f,c
  3148  001FC4  50DF               	movf	indf2,w,c
  3149  001FC6  0100               	movlb	0	; () banked
  3150  001FC8  6F80               	movwf	??_showTime& (0+255),b
  3151  001FCA  5180               	movf	??_showTime& (0+255),w,b
  3152  001FCC  6E72               	movwf	?_printf+2,c
  3153  001FCE  6A73               	clrf	?_printf+3,c
  3154  001FD0  EE20 F001          	lfsr	2,1
  3155  001FD4  507C               	movf	showTime@pTime,w,c
  3156  001FD6  26D9               	addwf	fsr2l,f,c
  3157  001FD8  507D               	movf	showTime@pTime+1,w,c
  3158  001FDA  22DA               	addwfc	fsr2h,f,c
  3159  001FDC  50DF               	movf	indf2,w,c
  3160  001FDE  6F81               	movwf	(??_showTime+1)& (0+255),b
  3161  001FE0  5181               	movf	(??_showTime+1)& (0+255),w,b
  3162  001FE2  6E74               	movwf	?_printf+4,c
  3163  001FE4  6A75               	clrf	?_printf+5,c
  3164  001FE6  C07C  FFD9         	movff	showTime@pTime,fsr2l
  3165  001FEA  C07D  FFDA         	movff	showTime@pTime+1,fsr2h
  3166  001FEE  50DF               	movf	indf2,w,c
  3167  001FF0  6F82               	movwf	(??_showTime+2)& (0+255),b
  3168  001FF2  5182               	movf	(??_showTime+2)& (0+255),w,b
  3169  001FF4  6E76               	movwf	?_printf+6,c
  3170  001FF6  6A77               	clrf	?_printf+7,c
  3171  001FF8  EC82  F01A         	call	_printf	;wreg free
  3172  001FFC  0ED0               	movlw	208
  3173  001FFE  ECFD  F01A         	call	_lcdInst
  3174                           
  3175                           ;lcdCode.c: 29:     printf("0:START   8:LOGS");
  3176  002002  0E8F               	movlw	low STR_4
  3177  002004  6E70               	movwf	printf@fmt,c
  3178  002006  0EFF               	movlw	high STR_4
  3179  002008  6E71               	movwf	printf@fmt+1,c
  3180  00200A  EC82  F01A         	call	_printf	;wreg free
  3181  00200E  0012               	return		;funcret
  3182  002010                     __end_of_showTime:
  3183                           	opt callstack 0
  3184                           
  3185 ;; *************** function _scrDonePoleDet *****************
  3186 ;; Defined at:
  3187 ;;		line 56 in file "lcdCode.c"
  3188 ;; Parameters:    Size  Location     Type
  3189 ;;  poleData        2    0[BANK0 ] PTR struct poleInfo
  3190 ;;		 -> poleInfoArr(75), 
  3191 ;;  currPole        2    2[BANK0 ] int 
  3192 ;; Auto vars:     Size  Location     Type
  3193 ;;		None
  3194 ;; Return value:  Size  Location     Type
  3195 ;;                  1    wreg      void 
  3196 ;; Registers used:
  3197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3198 ;; Tracked objects:
  3199 ;;		On entry : 0/0
  3200 ;;		On exit  : 0/0
  3201 ;;		Unchanged: 0/0
  3202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3203 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3207 ;;Total ram usage:       13 bytes
  3208 ;; Hardware stack levels used:    1
  3209 ;; Hardware stack levels required when called:   12
  3210 ;; This function calls:
  3211 ;;		___awdiv
  3212 ;;		___awmod
  3213 ;;		___wmul
  3214 ;;		_lcdInst
  3215 ;;		_printf
  3216 ;; This function is called by:
  3217 ;;		_main
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           	psect	text4
  3222  00189C                     __ptext4:
  3223                           	opt callstack 0
  3224  00189C                     _scrDonePoleDet:
  3225                           	opt callstack 18
  3226                           
  3227                           ;lcdCode.c: 58:     { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.0)));};
  3228                           
  3229                           ;incstack = 0
  3230  00189C  0E80               	movlw	128
  3231  00189E  ECFD  F01A         	call	_lcdInst
  3232  0018A2  0E07               	movlw	7
  3233  0018A4  6E7C               	movwf	??_scrDonePoleDet& (0+255),c
  3234  0018A6  0E7D               	movlw	125
  3235  0018A8                     u7487:
  3236  0018A8  2EE8               	decfsz	wreg,f,c
  3237  0018AA  D7FE               	bra	u7487
  3238  0018AC  2E7C               	decfsz	??_scrDonePoleDet& (0+255),f,c
  3239  0018AE  D7FC               	bra	u7487
  3240  0018B0  F000               	nop	
  3241                           
  3242                           ;lcdCode.c: 59:     printf("POLE%1x POS: %1d.%02dm",
  3243  0018B2  C082  F001         	movff	scrDonePoleDet@currPole,___wmul@multiplier
  3244  0018B6  C083  F002         	movff	scrDonePoleDet@currPole+1,___wmul@multiplier+1
  3245  0018BA  0E00               	movlw	0
  3246  0018BC  6E04               	movwf	___wmul@multiplicand+1,c
  3247  0018BE  0E05               	movlw	5
  3248  0018C0  6E03               	movwf	___wmul@multiplicand,c
  3249  0018C2  EC95  F01A         	call	___wmul	;wreg free
  3250  0018C6  5001               	movf	?___wmul,w,c
  3251  0018C8  0100               	movlb	0	; () banked
  3252  0018CA  2580               	addwf	scrDonePoleDet@poleData& (0+255),w,b
  3253  0018CC  6ED9               	movwf	fsr2l,c
  3254  0018CE  5002               	movf	?___wmul+1,w,c
  3255  0018D0  2181               	addwfc	(scrDonePoleDet@poleData+1)& (0+255),w,b
  3256  0018D2  6EDA               	movwf	fsr2h,c
  3257  0018D4  50DF               	movf	indf2,w,c
  3258  0018D6  6E7C               	movwf	??_scrDonePoleDet& (0+255),c
  3259  0018D8  507C               	movf	??_scrDonePoleDet,w,c
  3260  0018DA  6F88               	movwf	_scrDonePoleDet$2355& (0+255),b
  3261  0018DC  6B89               	clrf	(_scrDonePoleDet$2355+1)& (0+255),b
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;lcdCode.c: 59:     printf("POLE%1x POS: %1d.%02dm",
  3265  0018DE  C082  F001         	movff	scrDonePoleDet@currPole,___wmul@multiplier
  3266  0018E2  C083  F002         	movff	scrDonePoleDet@currPole+1,___wmul@multiplier+1
  3267  0018E6  0E00               	movlw	0
  3268  0018E8  6E04               	movwf	___wmul@multiplicand+1,c
  3269  0018EA  0E05               	movlw	5
  3270  0018EC  6E03               	movwf	___wmul@multiplicand,c
  3271  0018EE  EC95  F01A         	call	___wmul	;wreg free
  3272  0018F2  C080  F07C         	movff	scrDonePoleDet@poleData,??_scrDonePoleDet
  3273  0018F6  C081  F07D         	movff	scrDonePoleDet@poleData+1,??_scrDonePoleDet+1
  3274  0018FA  5001               	movf	?___wmul,w,c
  3275  0018FC  267C               	addwf	??_scrDonePoleDet,f,c
  3276  0018FE  5002               	movf	?___wmul+1,w,c
  3277  001900  227D               	addwfc	??_scrDonePoleDet+1,f,c
  3278  001902  0E01               	movlw	1
  3279  001904  247C               	addwf	??_scrDonePoleDet,w,c
  3280  001906  6ED9               	movwf	fsr2l,c
  3281  001908  0E00               	movlw	0
  3282  00190A  207D               	addwfc	??_scrDonePoleDet+1,w,c
  3283  00190C  6EDA               	movwf	fsr2h,c
  3284  00190E  CFDE F00D          	movff	postinc2,___awdiv@dividend
  3285  001912  CFDD F00E          	movff	postdec2,___awdiv@dividend+1
  3286  001916  0E03               	movlw	3
  3287  001918  6E10               	movwf	___awdiv@divisor+1,c
  3288  00191A  0EE8               	movlw	232
  3289  00191C  6E0F               	movwf	___awdiv@divisor,c
  3290  00191E  ECE0  F016         	call	___awdiv	;wreg free
  3291  001922  C00D  F084         	movff	?___awdiv,_scrDonePoleDet$2356
  3292  001926  C00E  F085         	movff	?___awdiv+1,_scrDonePoleDet$2356+1
  3293                           
  3294                           ;lcdCode.c: 59:     printf("POLE%1x POS: %1d.%02dm",
  3295  00192A  0E03               	movlw	3
  3296  00192C  6E0A               	movwf	___awmod@divisor+1,c
  3297  00192E  0EE8               	movlw	232
  3298  001930  6E09               	movwf	___awmod@divisor,c
  3299  001932  C082  F001         	movff	scrDonePoleDet@currPole,___wmul@multiplier
  3300  001936  C083  F002         	movff	scrDonePoleDet@currPole+1,___wmul@multiplier+1
  3301  00193A  0E00               	movlw	0
  3302  00193C  6E04               	movwf	___wmul@multiplicand+1,c
  3303  00193E  0E05               	movlw	5
  3304  001940  6E03               	movwf	___wmul@multiplicand,c
  3305  001942  EC95  F01A         	call	___wmul	;wreg free
  3306  001946  C080  F07C         	movff	scrDonePoleDet@poleData,??_scrDonePoleDet
  3307  00194A  C081  F07D         	movff	scrDonePoleDet@poleData+1,??_scrDonePoleDet+1
  3308  00194E  5001               	movf	?___wmul,w,c
  3309  001950  267C               	addwf	??_scrDonePoleDet,f,c
  3310  001952  5002               	movf	?___wmul+1,w,c
  3311  001954  227D               	addwfc	??_scrDonePoleDet+1,f,c
  3312  001956  0E01               	movlw	1
  3313  001958  247C               	addwf	??_scrDonePoleDet,w,c
  3314  00195A  6ED9               	movwf	fsr2l,c
  3315  00195C  0E00               	movlw	0
  3316  00195E  207D               	addwfc	??_scrDonePoleDet+1,w,c
  3317  001960  6EDA               	movwf	fsr2h,c
  3318  001962  CFDE F007          	movff	postinc2,___awmod@dividend
  3319  001966  CFDD F008          	movff	postdec2,___awmod@dividend+1
  3320  00196A  EC63  F017         	call	___awmod	;wreg free
  3321  00196E  C007  F00D         	movff	?___awmod,___awdiv@dividend
  3322  001972  C008  F00E         	movff	?___awmod+1,___awdiv@dividend+1
  3323  001976  0E00               	movlw	0
  3324  001978  6E10               	movwf	___awdiv@divisor+1,c
  3325  00197A  0E0A               	movlw	10
  3326  00197C  6E0F               	movwf	___awdiv@divisor,c
  3327  00197E  ECE0  F016         	call	___awdiv	;wreg free
  3328  001982  C00D  F086         	movff	?___awdiv,_scrDonePoleDet$2357
  3329  001986  C00E  F087         	movff	?___awdiv+1,_scrDonePoleDet$2357+1
  3330                           
  3331                           ;lcdCode.c: 59:     printf("POLE%1x POS: %1d.%02dm",
  3332  00198A  0E83               	movlw	low STR_13
  3333  00198C  6E70               	movwf	printf@fmt,c
  3334  00198E  0EFC               	movlw	high STR_13
  3335  001990  6E71               	movwf	printf@fmt+1,c
  3336  001992  C088  F072         	movff	_scrDonePoleDet$2355,?_printf+2
  3337  001996  C089  F073         	movff	_scrDonePoleDet$2355+1,?_printf+3
  3338  00199A  C084  F074         	movff	_scrDonePoleDet$2356,?_printf+4
  3339  00199E  C085  F075         	movff	_scrDonePoleDet$2356+1,?_printf+5
  3340  0019A2  C086  F076         	movff	_scrDonePoleDet$2357,?_printf+6
  3341  0019A6  C087  F077         	movff	_scrDonePoleDet$2357+1,?_printf+7
  3342  0019AA  EC82  F01A         	call	_printf	;wreg free
  3343  0019AE  0EC0               	movlw	192
  3344  0019B0  ECFD  F01A         	call	_lcdInst
  3345                           
  3346                           ;lcdCode.c: 63:     printf("TIRES SUPP:   %1d ",poleData[currPole].tiresSupp);
  3347  0019B4  C082  F001         	movff	scrDonePoleDet@currPole,___wmul@multiplier
  3348  0019B8  C083  F002         	movff	scrDonePoleDet@currPole+1,___wmul@multiplier+1
  3349  0019BC  0E00               	movlw	0
  3350  0019BE  6E04               	movwf	___wmul@multiplicand+1,c
  3351  0019C0  0E05               	movlw	5
  3352  0019C2  6E03               	movwf	___wmul@multiplicand,c
  3353  0019C4  EC95  F01A         	call	___wmul	;wreg free
  3354  0019C8  C080  F07C         	movff	scrDonePoleDet@poleData,??_scrDonePoleDet
  3355  0019CC  C081  F07D         	movff	scrDonePoleDet@poleData+1,??_scrDonePoleDet+1
  3356  0019D0  5001               	movf	?___wmul,w,c
  3357  0019D2  267C               	addwf	??_scrDonePoleDet,f,c
  3358  0019D4  5002               	movf	?___wmul+1,w,c
  3359  0019D6  227D               	addwfc	??_scrDonePoleDet+1,f,c
  3360  0019D8  0E03               	movlw	3
  3361  0019DA  247C               	addwf	??_scrDonePoleDet,w,c
  3362  0019DC  6ED9               	movwf	fsr2l,c
  3363  0019DE  0E00               	movlw	0
  3364  0019E0  207D               	addwfc	??_scrDonePoleDet+1,w,c
  3365  0019E2  6EDA               	movwf	fsr2h,c
  3366  0019E4  50DF               	movf	indf2,w,c
  3367  0019E6  6E7E               	movwf	(??_scrDonePoleDet+2)& (0+255),c
  3368  0019E8  507E               	movf	??_scrDonePoleDet+2,w,c
  3369  0019EA  0100               	movlb	0	; () banked
  3370  0019EC  6F88               	movwf	_scrDonePoleDet$2355& (0+255),b
  3371  0019EE  6B89               	clrf	(_scrDonePoleDet$2355+1)& (0+255),b
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;lcdCode.c: 63:     printf("TIRES SUPP:   %1d ",poleData[currPole].tiresSupp);
  3375  0019F0  0E9A               	movlw	low STR_14
  3376  0019F2  6E70               	movwf	printf@fmt,c
  3377  0019F4  0EFC               	movlw	high STR_14
  3378  0019F6  6E71               	movwf	printf@fmt+1,c
  3379  0019F8  C088  F072         	movff	_scrDonePoleDet$2355,?_printf+2
  3380  0019FC  C089  F073         	movff	_scrDonePoleDet$2355+1,?_printf+3
  3381  001A00  EC82  F01A         	call	_printf	;wreg free
  3382  001A04  0E90               	movlw	144
  3383  001A06  ECFD  F01A         	call	_lcdInst
  3384                           
  3385                           ;lcdCode.c: 65:     printf("TIRES ON POLE:%1d ",poleData[currPole].tiresPresent);
  3386  001A0A  C082  F001         	movff	scrDonePoleDet@currPole,___wmul@multiplier
  3387  001A0E  C083  F002         	movff	scrDonePoleDet@currPole+1,___wmul@multiplier+1
  3388  001A12  0E00               	movlw	0
  3389  001A14  6E04               	movwf	___wmul@multiplicand+1,c
  3390  001A16  0E05               	movlw	5
  3391  001A18  6E03               	movwf	___wmul@multiplicand,c
  3392  001A1A  EC95  F01A         	call	___wmul	;wreg free
  3393  001A1E  C080  F07C         	movff	scrDonePoleDet@poleData,??_scrDonePoleDet
  3394  001A22  C081  F07D         	movff	scrDonePoleDet@poleData+1,??_scrDonePoleDet+1
  3395  001A26  5001               	movf	?___wmul,w,c
  3396  001A28  267C               	addwf	??_scrDonePoleDet,f,c
  3397  001A2A  5002               	movf	?___wmul+1,w,c
  3398  001A2C  227D               	addwfc	??_scrDonePoleDet+1,f,c
  3399  001A2E  0E04               	movlw	4
  3400  001A30  247C               	addwf	??_scrDonePoleDet,w,c
  3401  001A32  6ED9               	movwf	fsr2l,c
  3402  001A34  0E00               	movlw	0
  3403  001A36  207D               	addwfc	??_scrDonePoleDet+1,w,c
  3404  001A38  6EDA               	movwf	fsr2h,c
  3405  001A3A  50DF               	movf	indf2,w,c
  3406  001A3C  6E7E               	movwf	(??_scrDonePoleDet+2)& (0+255),c
  3407  001A3E  507E               	movf	??_scrDonePoleDet+2,w,c
  3408  001A40  0100               	movlb	0	; () banked
  3409  001A42  6F88               	movwf	_scrDonePoleDet$2355& (0+255),b
  3410  001A44  6B89               	clrf	(_scrDonePoleDet$2355+1)& (0+255),b
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;lcdCode.c: 65:     printf("TIRES ON POLE:%1d ",poleData[currPole].tiresPresent);
  3414  001A46  0EAD               	movlw	low STR_15
  3415  001A48  6E70               	movwf	printf@fmt,c
  3416  001A4A  0EFC               	movlw	high STR_15
  3417  001A4C  6E71               	movwf	printf@fmt+1,c
  3418  001A4E  C088  F072         	movff	_scrDonePoleDet$2355,?_printf+2
  3419  001A52  C089  F073         	movff	_scrDonePoleDet$2355+1,?_printf+3
  3420  001A56  EC82  F01A         	call	_printf	;wreg free
  3421  001A5A  0ED0               	movlw	208
  3422  001A5C  ECFD  F01A         	call	_lcdInst
  3423                           
  3424                           ;lcdCode.c: 67:     printf("<*   0:MENU   #>");
  3425  001A60  0E07               	movlw	low STR_16
  3426  001A62  6E70               	movwf	printf@fmt,c
  3427  001A64  0EFF               	movlw	high STR_16
  3428  001A66  6E71               	movwf	printf@fmt+1,c
  3429  001A68  EC82  F01A         	call	_printf	;wreg free
  3430  001A6C  0012               	return		;funcret
  3431  001A6E                     __end_of_scrDonePoleDet:
  3432                           	opt callstack 0
  3433                           
  3434 ;; *************** function _scrDoneMain *****************
  3435 ;; Defined at:
  3436 ;;		line 32 in file "lcdCode.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;		None
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;		None
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  1    wreg      void 
  3443 ;; Registers used:
  3444 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3452 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3453 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3454 ;;Total ram usage:        1 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:   12
  3457 ;; This function calls:
  3458 ;;		_lcdInst
  3459 ;;		_printf
  3460 ;; This function is called by:
  3461 ;;		_main
  3462 ;; This function uses a non-reentrant model
  3463 ;;
  3464                           
  3465                           	psect	text5
  3466  003140                     __ptext5:
  3467                           	opt callstack 0
  3468  003140                     _scrDoneMain:
  3469                           	opt callstack 18
  3470                           
  3471                           ;lcdCode.c: 33:     { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.0)));};
  3472                           
  3473                           ;incstack = 0
  3474  003140  0E80               	movlw	128
  3475  003142  ECFD  F01A         	call	_lcdInst
  3476  003146  0E07               	movlw	7
  3477  003148  6E7C               	movwf	??_scrDoneMain& (0+255),c
  3478  00314A  0E7D               	movlw	125
  3479  00314C                     u7497:
  3480  00314C  2EE8               	decfsz	wreg,f,c
  3481  00314E  D7FE               	bra	u7497
  3482  003150  2E7C               	decfsz	??_scrDoneMain& (0+255),f,c
  3483  003152  D7FC               	bra	u7497
  3484  003154  F000               	nop	
  3485                           
  3486                           ;lcdCode.c: 34:     printf("--RUN COMPLETE--");
  3487  003156  0EE5               	movlw	low STR_5
  3488  003158  6E70               	movwf	printf@fmt,c
  3489  00315A  0EFE               	movlw	high STR_5
  3490  00315C  6E71               	movwf	printf@fmt+1,c
  3491  00315E  EC82  F01A         	call	_printf	;wreg free
  3492  003162  0EC0               	movlw	192
  3493  003164  ECFD  F01A         	call	_lcdInst
  3494                           
  3495                           ;lcdCode.c: 36:     printf("7: GENERAL INFO ");
  3496  003168  0EF7               	movlw	low STR_6
  3497  00316A  6E70               	movwf	printf@fmt,c
  3498  00316C  0EFD               	movlw	high STR_6
  3499  00316E  6E71               	movwf	printf@fmt+1,c
  3500  003170  EC82  F01A         	call	_printf	;wreg free
  3501  003174  0E90               	movlw	144
  3502  003176  ECFD  F01A         	call	_lcdInst
  3503                           
  3504                           ;lcdCode.c: 38:     printf("9: POLE DETAILS ");
  3505  00317A  0E08               	movlw	low STR_7
  3506  00317C  6E70               	movwf	printf@fmt,c
  3507  00317E  0EFE               	movlw	high STR_7
  3508  003180  6E71               	movwf	printf@fmt+1,c
  3509  003182  EC82  F01A         	call	_printf	;wreg free
  3510  003186  0ED0               	movlw	208
  3511  003188  ECFD  F01A         	call	_lcdInst
  3512                           
  3513                           ;lcdCode.c: 40:     printf("-----0:DONE-----");
  3514  00318C  0EC3               	movlw	low STR_8
  3515  00318E  6E70               	movwf	printf@fmt,c
  3516  003190  0EFE               	movlw	high STR_8
  3517  003192  6E71               	movwf	printf@fmt+1,c
  3518  003194  EC82  F01A         	call	_printf	;wreg free
  3519  003198  0012               	return		;funcret
  3520  00319A                     __end_of_scrDoneMain:
  3521                           	opt callstack 0
  3522                           
  3523 ;; *************** function _scrDoneGen *****************
  3524 ;; Defined at:
  3525 ;;		line 43 in file "lcdCode.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;  time            2    0[BANK0 ] unsigned int 
  3528 ;;  tireCount       1    2[BANK0 ] unsigned char 
  3529 ;;  poles           1    3[BANK0 ] unsigned char 
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;		None
  3532 ;; Return value:  Size  Location     Type
  3533 ;;                  1    wreg      void 
  3534 ;; Registers used:
  3535 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3541 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;Total ram usage:        5 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:   12
  3548 ;; This function calls:
  3549 ;;		_lcdInst
  3550 ;;		_printf
  3551 ;; This function is called by:
  3552 ;;		_main
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           	psect	text6
  3557  002F36                     __ptext6:
  3558                           	opt callstack 0
  3559  002F36                     _scrDoneGen:
  3560                           	opt callstack 18
  3561                           
  3562                           ;lcdCode.c: 43: void scrDoneGen(unsigned int time, unsigned char tireCount,;lcdCode.c: 4
      +                          4:         unsigned char poles){;lcdCode.c: 46:     { lcdInst(0x80); _delay((unsigned lo
      +                          ng)((2)*(10000000/4000.0)));};
  3563                           
  3564                           ;incstack = 0
  3565  002F36  0E80               	movlw	128
  3566  002F38  ECFD  F01A         	call	_lcdInst
  3567  002F3C  0E07               	movlw	7
  3568  002F3E  6E7C               	movwf	??_scrDoneGen& (0+255),c
  3569  002F40  0E7D               	movlw	125
  3570  002F42                     u7507:
  3571  002F42  2EE8               	decfsz	wreg,f,c
  3572  002F44  D7FE               	bra	u7507
  3573  002F46  2E7C               	decfsz	??_scrDoneGen& (0+255),f,c
  3574  002F48  D7FC               	bra	u7507
  3575  002F4A  F000               	nop	
  3576                           
  3577                           ;lcdCode.c: 47:     printf("TOTAL TIME: %3ds",time);
  3578  002F4C  0EA0               	movlw	low STR_9
  3579  002F4E  6E70               	movwf	printf@fmt,c
  3580  002F50  0EFF               	movlw	high STR_9
  3581  002F52  6E71               	movwf	printf@fmt+1,c
  3582  002F54  C080  F072         	movff	scrDoneGen@time,?_printf+2
  3583  002F58  C081  F073         	movff	scrDoneGen@time+1,?_printf+3
  3584  002F5C  EC82  F01A         	call	_printf	;wreg free
  3585  002F60  0EC0               	movlw	192
  3586  002F62  ECFD  F01A         	call	_lcdInst
  3587                           
  3588                           ;lcdCode.c: 49:     printf("TIRES SUPP:  %2d ",tireCount);
  3589  002F66  0EF6               	movlw	low STR_10
  3590  002F68  6E70               	movwf	printf@fmt,c
  3591  002F6A  0EFC               	movlw	high STR_10
  3592  002F6C  6E71               	movwf	printf@fmt+1,c
  3593  002F6E  C082  F072         	movff	scrDoneGen@tireCount,?_printf+2
  3594  002F72  6A73               	clrf	?_printf+3,c
  3595  002F74  EC82  F01A         	call	_printf	;wreg free
  3596  002F78  0E90               	movlw	144
  3597  002F7A  ECFD  F01A         	call	_lcdInst
  3598                           
  3599                           ;lcdCode.c: 51:     printf("POLE COUNT:  %2d ",poles);
  3600  002F7E  0E08               	movlw	low STR_11
  3601  002F80  6E70               	movwf	printf@fmt,c
  3602  002F82  0EFD               	movlw	high STR_11
  3603  002F84  6E71               	movwf	printf@fmt+1,c
  3604  002F86  C083  F072         	movff	scrDoneGen@poles,?_printf+2
  3605  002F8A  6A73               	clrf	?_printf+3,c
  3606  002F8C  EC82  F01A         	call	_printf	;wreg free
  3607  002F90  0ED0               	movlw	208
  3608  002F92  ECFD  F01A         	call	_lcdInst
  3609                           
  3610                           ;lcdCode.c: 53:     printf("-----0:MENU-----");
  3611  002F96  0ED4               	movlw	low STR_12
  3612  002F98  6E70               	movwf	printf@fmt,c
  3613  002F9A  0EFE               	movlw	high STR_12
  3614  002F9C  6E71               	movwf	printf@fmt+1,c
  3615  002F9E  EC82  F01A         	call	_printf	;wreg free
  3616  002FA2  0012               	return		;funcret
  3617  002FA4                     __end_of_scrDoneGen:
  3618                           	opt callstack 0
  3619                           
  3620 ;; *************** function _runSM *****************
  3621 ;; Defined at:
  3622 ;;		line 186 in file "helpers.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;  direction       1    wreg     unsigned char 
  3625 ;;  pSMposition     2    0[COMRAM] PTR unsigned int 
  3626 ;;		 -> main@SMposition(2), 
  3627 ;;  int1Pressed     2    2[COMRAM] PTR volatile _Bool 
  3628 ;;		 -> int1Pressed(1), 
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;  direction       1    4[COMRAM] unsigned char 
  3631 ;;  ticksA          1    6[COMRAM] unsigned char 
  3632 ;;  hundreds        1    5[COMRAM] unsigned char 
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  1    wreg      void 
  3635 ;; Registers used:
  3636 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3642 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3643 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3645 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;Total ram usage:        7 bytes
  3647 ;; Hardware stack levels used:    1
  3648 ;; Hardware stack levels required when called:    1
  3649 ;; This function calls:
  3650 ;;		Nothing
  3651 ;; This function is called by:
  3652 ;;		_main
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           	psect	text7
  3657  002712                     __ptext7:
  3658                           	opt callstack 0
  3659  002712                     _runSM:
  3660                           	opt callstack 29
  3661                           
  3662                           ;incstack = 0
  3663                           ;runSM@direction stored from wreg
  3664  002712  6E05               	movwf	runSM@direction,c
  3665                           
  3666                           ;helpers.c: 186: void runSM(unsigned char direction, unsigned int *pSMposition,;helpers.
      +                          c: 187:         volatile _Bool *int1Pressed){;helpers.c: 189:     unsigned char ticksA =
      +                           0;
  3667  002714  0E00               	movlw	0
  3668  002716  6E07               	movwf	runSM@ticksA,c
  3669                           
  3670                           ;helpers.c: 190:     unsigned char hundreds = 1;
  3671  002718  0E01               	movlw	1
  3672  00271A  6E06               	movwf	runSM@hundreds,c
  3673  00271C                     l6420:
  3674                           
  3675                           ;helpers.c: 193:         if (direction == 0){
  3676  00271C  5005               	movf	runSM@direction,w,c
  3677  00271E  A4D8               	btfss	status,2,c
  3678  002720  D010               	goto	l6432
  3679                           
  3680                           ;helpers.c: 194:             ticksA = (ticksA+1)%8;
  3681  002722  2807               	incf	runSM@ticksA,w,c
  3682  002724  0B07               	andlw	7
  3683  002726  6E07               	movwf	runSM@ticksA,c
  3684                           
  3685                           ;helpers.c: 195:             hundreds++;
  3686  002728  2A06               	incf	runSM@hundreds,f,c
  3687                           
  3688                           ;helpers.c: 196:             if (hundreds >= 100){
  3689  00272A  0E63               	movlw	99
  3690  00272C  6406               	cpfsgt	runSM@hundreds,c
  3691  00272E  D019               	goto	l6442
  3692                           
  3693                           ;helpers.c: 197:                 (*pSMposition)++;
  3694  002730  C001  FFD9         	movff	runSM@pSMposition,fsr2l
  3695  002734  C002  FFDA         	movff	runSM@pSMposition+1,fsr2h
  3696  002738  2ADE               	incf	postinc2,f,c
  3697  00273A  0E00               	movlw	0
  3698  00273C  22DD               	addwfc	postdec2,f,c
  3699                           
  3700                           ;helpers.c: 198:                 hundreds = 0;
  3701  00273E  0E00               	movlw	0
  3702  002740  D00F               	goto	L1
  3703  002742                     l6432:
  3704                           
  3705                           ;helpers.c: 201:             ticksA = (ticksA-1)%8;
  3706  002742  0407               	decf	runSM@ticksA,w,c
  3707  002744  0B07               	andlw	7
  3708  002746  6E07               	movwf	runSM@ticksA,c
  3709                           
  3710                           ;helpers.c: 202:             hundreds--;
  3711  002748  0606               	decf	runSM@hundreds,f,c
  3712                           
  3713                           ;helpers.c: 203:             if (hundreds <= 0){
  3714  00274A  5006               	movf	runSM@hundreds,w,c
  3715  00274C  A4D8               	btfss	status,2,c
  3716  00274E  D009               	goto	l6442
  3717                           
  3718                           ;helpers.c: 204:                 (*pSMposition)--;
  3719  002750  C001  FFD9         	movff	runSM@pSMposition,fsr2l
  3720  002754  C002  FFDA         	movff	runSM@pSMposition+1,fsr2h
  3721  002758  06DE               	decf	postinc2,f,c
  3722  00275A  0E00               	movlw	0
  3723  00275C  5ADD               	subwfb	postdec2,f,c
  3724                           
  3725                           ;helpers.c: 205:                 hundreds = 100;
  3726  00275E  0E64               	movlw	100
  3727  002760                     L1:
  3728  002760  6E06               	movwf	runSM@hundreds,c
  3729  002762                     l6442:
  3730                           
  3731                           ;helpers.c: 208:         _delay((unsigned long)((0.7)*(10000000/4000.0)));
  3732  002762  0EFA               	movlw	250
  3733  002764                     u7517:
  3734  002764  D000               	nop2	
  3735  002766  D000               	nop2	
  3736  002768  2EE8               	decfsz	wreg,f,c
  3737  00276A  D7FC               	bra	u7517
  3738                           
  3739                           ;helpers.c: 209:         if (ticksA == 0){
  3740  00276C  5007               	movf	runSM@ticksA,w,c
  3741  00276E  A4D8               	btfss	status,2,c
  3742  002770  D006               	goto	l6450
  3743                           
  3744                           ;helpers.c: 210:             LATA = (LATA & 0xEA) | 0x01;
  3745  002772  5089               	movf	3977,w,c	;volatile
  3746  002774  0BEA               	andlw	234
  3747  002776  0901               	iorlw	1
  3748  002778  D020               	goto	L6
  3749  00277A                     l6448:
  3750                           
  3751                           ;helpers.c: 211:             LATEbits.LATE0 = 0;
  3752  00277A  908D               	bcf	3981,0,c	;volatile
  3753                           
  3754                           ;helpers.c: 212:         } else if (ticksA == 1){
  3755  00277C  D038               	goto	l471
  3756  00277E                     l6450:
  3757  00277E  0407               	decf	runSM@ticksA,w,c
  3758  002780  A4D8               	btfss	status,2,c
  3759  002782  D004               	goto	l6456
  3760                           
  3761                           ;helpers.c: 213:             LATA = (LATA & 0xEA) | 0x05;
  3762  002784  5089               	movf	3977,w,c	;volatile
  3763  002786  0BEA               	andlw	234
  3764  002788  0905               	iorlw	5
  3765  00278A  D017               	goto	L6
  3766  00278C                     l6456:
  3767  00278C  0E02               	movlw	2
  3768  00278E  1807               	xorwf	runSM@ticksA,w,c
  3769  002790  A4D8               	btfss	status,2,c
  3770  002792  D004               	goto	l6462
  3771                           
  3772                           ;helpers.c: 216:             LATA = (LATA & 0xEA) | 0x04;
  3773  002794  5089               	movf	3977,w,c	;volatile
  3774  002796  0BEA               	andlw	234
  3775  002798  0904               	iorlw	4
  3776  00279A  D00F               	goto	L6
  3777  00279C                     l6462:
  3778  00279C  0E03               	movlw	3
  3779  00279E  1807               	xorwf	runSM@ticksA,w,c
  3780  0027A0  A4D8               	btfss	status,2,c
  3781  0027A2  D004               	goto	l6468
  3782                           
  3783                           ;helpers.c: 219:             LATA = (LATA & 0xEA) | 0x14;
  3784  0027A4  5089               	movf	3977,w,c	;volatile
  3785  0027A6  0BEA               	andlw	234
  3786  0027A8  0914               	iorlw	20
  3787  0027AA  D007               	goto	L6
  3788  0027AC                     l6468:
  3789  0027AC  0E04               	movlw	4
  3790  0027AE  1807               	xorwf	runSM@ticksA,w,c
  3791  0027B0  A4D8               	btfss	status,2,c
  3792  0027B2  D005               	goto	l6474
  3793                           
  3794                           ;helpers.c: 222:             LATA = (LATA & 0xEA) | 0x10;
  3795  0027B4  5089               	movf	3977,w,c	;volatile
  3796  0027B6  0BEA               	andlw	234
  3797  0027B8  0910               	iorlw	16
  3798  0027BA                     L6:
  3799  0027BA  6E89               	movwf	3977,c	;volatile
  3800  0027BC  D7DE               	goto	l6448
  3801  0027BE                     l6474:
  3802  0027BE  0E05               	movlw	5
  3803  0027C0  1807               	xorwf	runSM@ticksA,w,c
  3804  0027C2  A4D8               	btfss	status,2,c
  3805  0027C4  D004               	goto	l6480
  3806                           
  3807                           ;helpers.c: 225:             LATA = (LATA & 0xEA) | 0x10;
  3808  0027C6  5089               	movf	3977,w,c	;volatile
  3809  0027C8  0BEA               	andlw	234
  3810  0027CA  0910               	iorlw	16
  3811  0027CC  D00E               	goto	L40
  3812  0027CE                     l6480:
  3813  0027CE  0E06               	movlw	6
  3814  0027D0  1807               	xorwf	runSM@ticksA,w,c
  3815  0027D2  A4D8               	btfss	status,2,c
  3816  0027D4  D003               	goto	l6486
  3817                           
  3818                           ;helpers.c: 228:             LATA = (LATA & 0xEA) | 0x00;
  3819  0027D6  5089               	movf	3977,w,c	;volatile
  3820  0027D8  0BEA               	andlw	234
  3821  0027DA  D007               	goto	L40
  3822  0027DC                     l6486:
  3823  0027DC  0E07               	movlw	7
  3824  0027DE  1807               	xorwf	runSM@ticksA,w,c
  3825  0027E0  A4D8               	btfss	status,2,c
  3826  0027E2  D005               	goto	l471
  3827                           
  3828                           ;helpers.c: 231:             LATA = (LATA & 0xEA) | 0x01;
  3829  0027E4  5089               	movf	3977,w,c	;volatile
  3830  0027E6  0BEA               	andlw	234
  3831  0027E8  0901               	iorlw	1
  3832  0027EA                     L40:
  3833  0027EA  6E89               	movwf	3977,c	;volatile
  3834                           
  3835                           ;helpers.c: 232:             LATEbits.LATE0 = 1;
  3836  0027EC  808D               	bsf	3981,0,c	;volatile
  3837  0027EE                     l471:
  3838                           
  3839                           ;helpers.c: 234:         if (*int1Pressed){
  3840  0027EE  C003  FFD9         	movff	runSM@int1Pressed,fsr2l
  3841  0027F2  C004  FFDA         	movff	runSM@int1Pressed+1,fsr2h
  3842  0027F6  50DF               	movf	indf2,w,c
  3843  0027F8  B4D8               	btfsc	status,2,c
  3844  0027FA  D790               	goto	l6420
  3845                           
  3846                           ;helpers.c: 235:             if ((PORTB & 0xF1) != 0x31){
  3847  0027FC  5081               	movf	3969,w,c	;volatile
  3848  0027FE  0BF1               	andlw	241
  3849  002800  0A31               	xorlw	49
  3850  002802  B4D8               	btfsc	status,2,c
  3851  002804  D78B               	goto	l6420
  3852  002806                     u7130:
  3853                           
  3854                           ;helpers.c: 240:     while((PORTB & 0xF1) == 0x31){
  3855  002806  5081               	movf	3969,w,c	;volatile
  3856  002808  0BF1               	andlw	241
  3857  00280A  0A31               	xorlw	49
  3858  00280C  A4D8               	btfss	status,2,c
  3859  00280E  0012               	return	
  3860  002810  D7FA               	goto	u7130
  3861  002812                     __end_of_runSM:
  3862                           	opt callstack 0
  3863                           
  3864 ;; *************** function _runOp *****************
  3865 ;; Defined at:
  3866 ;;		line 3 in file "operationCode.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;  time            2    0[BANK0 ] PTR unsigned char 
  3869 ;;		 -> main@startTimeInt(3), 
  3870 ;;  pTotalSuppli    2    2[BANK0 ] PTR unsigned char 
  3871 ;;		 -> tiresSupp(1), 
  3872 ;;  pNumPoles       2    4[BANK0 ] PTR unsigned char 
  3873 ;;		 -> poleCount(1), 
  3874 ;;  infoArr         2    6[BANK0 ] PTR struct poleInfo
  3875 ;;		 -> poleInfoArr(75), 
  3876 ;;  pInt0P          2    8[BANK0 ] PTR volatile _Bool 
  3877 ;;		 -> int0Pressed(1), 
  3878 ;;  opTime          2   10[BANK0 ] PTR unsigned char 
  3879 ;;		 -> totalTime(1), 
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;  oldPosSig       1   30[BANK0 ] unsigned char 
  3882 ;;  distPoleDet     1   21[BANK0 ] unsigned char 
  3883 ;;  endTime         3   25[BANK0 ] unsigned char [3]
  3884 ;;  oldPosSig       1   32[BANK0 ] unsigned char 
  3885 ;;  oldPosSig       1   31[BANK0 ] unsigned char 
  3886 ;;  distSinceBas    1   22[BANK0 ] unsigned char 
  3887 ;;  tireVar         1   33[BANK0 ] unsigned char 
  3888 ;;  i               2   19[BANK0 ] unsigned int 
  3889 ;;  oldPosSig       1   29[BANK0 ] unsigned char 
  3890 ;;  found           1   24[BANK0 ] unsigned char 
  3891 ;;  temp            1   23[BANK0 ] unsigned char 
  3892 ;;  origDetLoc      1   18[BANK0 ] unsigned char 
  3893 ;;  oldPosSig       1   28[BANK0 ] unsigned char 
  3894 ;;  procMode        1   36[BANK0 ] unsigned char 
  3895 ;;  posTurns        1   35[BANK0 ] unsigned char 
  3896 ;;  pos             1   34[BANK0 ] unsigned char 
  3897 ;;  distBaseDet     1    0        unsigned char 
  3898 ;; Return value:  Size  Location     Type
  3899 ;;                  1    wreg      void 
  3900 ;; Registers used:
  3901 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3902 ;; Tracked objects:
  3903 ;;		On entry : 0/0
  3904 ;;		On exit  : 0/0
  3905 ;;		Unchanged: 0/0
  3906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3907 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3910 ;;      Totals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3911 ;;Total ram usage:       37 bytes
  3912 ;; Hardware stack levels used:    1
  3913 ;; Hardware stack levels required when called:   13
  3914 ;; This function calls:
  3915 ;;		___awdiv
  3916 ;;		_dispProcMode
  3917 ;;		_fixTime
  3918 ;;		_getTime
  3919 ;;		_lcdInst
  3920 ;;		_printf
  3921 ;;		_tireDeploy
  3922 ;; This function is called by:
  3923 ;;		_main
  3924 ;; This function uses a non-reentrant model
  3925 ;;
  3926                           
  3927                           	psect	text8
  3928  000012                     __ptext8:
  3929                           	opt callstack 0
  3930  000012                     _runOp:
  3931                           	opt callstack 17
  3932                           
  3933                           ;operationCode.c: 3: void runOp(unsigned char time[3], unsigned char *pTotalSupplied,;op
      +                          erationCode.c: 4:         unsigned char *pNumPoles, poleInfo *infoArr,;operationCode.c: 
      +                          5:         volatile _Bool *pInt0P, unsigned char *opTime){;operationCode.c: 7:     INT0I
      +                          E = 0;
  3934                           
  3935                           ;incstack = 0
  3936  000012  98F2               	bcf	4082,4,c	;volatile
  3937                           
  3938                           ;operationCode.c: 9:     LATCbits.LATC5 = 1;
  3939  000014  8A8B               	bsf	3979,5,c	;volatile
  3940                           
  3941                           ;operationCode.c: 11:     TRISB = 0b10101011;
  3942  000016  0EAB               	movlw	171
  3943  000018  6E93               	movwf	3987,c	;volatile
  3944                           
  3945                           ;operationCode.c: 13:     *pTotalSupplied = 0;
  3946  00001A  C082  FFD9         	movff	runOp@pTotalSupplied,fsr2l
  3947  00001E  C083  FFDA         	movff	runOp@pTotalSupplied+1,fsr2h
  3948  000022  0E00               	movlw	0
  3949  000024  6EDF               	movwf	indf2,c
  3950                           
  3951                           ;operationCode.c: 15:     *pNumPoles = 0;
  3952  000026  C084  FFD9         	movff	runOp@pNumPoles,fsr2l
  3953  00002A  C085  FFDA         	movff	runOp@pNumPoles+1,fsr2h
  3954  00002E  0E00               	movlw	0
  3955  000030  6EDF               	movwf	indf2,c
  3956                           
  3957                           ;operationCode.c: 17:     unsigned char pos = 0;
  3958  000032  0E00               	movlw	0
  3959  000034  0100               	movlb	0	; () banked
  3960  000036  6FA2               	movwf	runOp@pos& (0+255),b
  3961                           
  3962                           ;operationCode.c: 19:     unsigned char posTurns = -5;
  3963  000038  0EFB               	movlw	251
  3964  00003A  6FA3               	movwf	runOp@posTurns& (0+255),b
  3965                           
  3966                           ;operationCode.c: 27:     unsigned char procMode = 0;
  3967  00003C  0E00               	movlw	0
  3968  00003E  6FA4               	movwf	runOp@procMode& (0+255),b
  3969                           
  3970                           ; BSR set to: 0
  3971                           ;operationCode.c: 37:     dispProcMode(procMode);
  3972  000040  0E00               	movlw	0
  3973  000042  EC01  F013         	call	_dispProcMode
  3974                           
  3975                           ;operationCode.c: 39:     INT0IE = 1; *pInt0P = 0;
  3976  000046  88F2               	bsf	4082,4,c	;volatile
  3977  000048  C088  FFD9         	movff	runOp@pInt0P,fsr2l
  3978  00004C  C089  FFDA         	movff	runOp@pInt0P+1,fsr2h
  3979  000050  0E00               	movlw	0
  3980  000052  6EDF               	movwf	indf2,c
  3981  000054                     l5930:
  3982                           
  3983                           ;operationCode.c: 43:         if (procMode == 0 || procMode == 3){
  3984  000054  0100               	movlb	0	; () banked
  3985  000056  51A4               	movf	runOp@procMode& (0+255),w,b
  3986  000058  B4D8               	btfsc	status,2,c
  3987  00005A  D004               	goto	u6180
  3988                           
  3989                           ; BSR set to: 0
  3990  00005C  0E03               	movlw	3
  3991  00005E  19A4               	xorwf	runOp@procMode& (0+255),w,b
  3992  000060  A4D8               	btfss	status,2,c
  3993  000062  D013               	goto	l5946
  3994  000064                     u6180:
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;operationCode.c: 47:             if (*pInt0P){
  3998  000064  C088  FFD9         	movff	runOp@pInt0P,fsr2l
  3999  000068  C089  FFDA         	movff	runOp@pInt0P+1,fsr2h
  4000  00006C  50DF               	movf	indf2,w,c
  4001  00006E  B4D8               	btfsc	status,2,c
  4002  000070  D00C               	goto	l5946
  4003                           
  4004                           ; BSR set to: 0
  4005                           ;operationCode.c: 49:                 (*pInt0P) = 0;
  4006  000072  C088  FFD9         	movff	runOp@pInt0P,fsr2l
  4007  000076  C089  FFDA         	movff	runOp@pInt0P+1,fsr2h
  4008  00007A  0E00               	movlw	0
  4009  00007C  6EDF               	movwf	indf2,c
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;operationCode.c: 51:                 INT0IE = 0;
  4013  00007E  98F2               	bcf	4082,4,c	;volatile
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;operationCode.c: 53:                 procMode = 1;
  4017  000080  0E01               	movlw	1
  4018  000082  6FA4               	movwf	runOp@procMode& (0+255),b
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;operationCode.c: 65:                 dispProcMode(procMode);
  4022                           
  4023                           ; BSR set to: 0
  4024  000084  0E01               	movlw	1
  4025  000086  EC01  F013         	call	_dispProcMode
  4026  00008A                     l5946:
  4027                           
  4028                           ;operationCode.c: 68:         if (procMode == 0){
  4029  00008A  0100               	movlb	0	; () banked
  4030  00008C  51A4               	movf	runOp@procMode& (0+255),w,b
  4031  00008E  A4D8               	btfss	status,2,c
  4032  000090  D05B               	goto	l5984
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;operationCode.c: 71:             LATAbits.LATA5 = 0; LATDbits.LATD1 = 1;
  4036  000092  9A89               	bcf	3977,5,c	;volatile
  4037  000094  828C               	bsf	3980,1,c	;volatile
  4038                           
  4039                           ;operationCode.c: 73:             LATCbits.LATC2 = 0;
  4040  000096  948B               	bcf	3979,2,c	;volatile
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;operationCode.c: 76:             unsigned char oldPosSig = PORTEbits.RE1;
  4044  000098  0E00               	movlw	0
  4045  00009A  B284               	btfsc	3972,1,c	;volatile
  4046  00009C  0E01               	movlw	1
  4047  00009E  6F9C               	movwf	runOp@oldPosSig& (0+255),b
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;operationCode.c: 78:             INT0IE = 1;
  4051  0000A0  88F2               	bsf	4082,4,c	;volatile
  4052                           
  4053                           ;operationCode.c: 80:             while (*pInt0P == 0){
  4054  0000A2  D04A               	goto	l5982
  4055  0000A4                     l5954:
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;operationCode.c: 82:                 if (oldPosSig != PORTEbits.RE1){
  4059  0000A4  A284               	btfss	3972,1,c	;volatile
  4060  0000A6  D002               	goto	u6210
  4061  0000A8  0E01               	movlw	1
  4062  0000AA  D001               	goto	u6216
  4063  0000AC                     u6210:
  4064  0000AC  0E00               	movlw	0
  4065  0000AE                     u6216:
  4066  0000AE  199C               	xorwf	runOp@oldPosSig& (0+255),w,b
  4067  0000B0  B4D8               	btfsc	status,2,c
  4068  0000B2  D042               	goto	l5982
  4069                           
  4070                           ; BSR set to: 0
  4071                           ;operationCode.c: 84:                     _delay((unsigned long)((1000)*(10000000/400000
      +                          0.0)));
  4072  0000B4  0E04               	movlw	4
  4073  0000B6  0100               	movlb	0	; () banked
  4074  0000B8  6F8C               	movwf	??_runOp& (0+255),b
  4075  0000BA  0E3D               	movlw	61
  4076  0000BC                     u7527:
  4077  0000BC  2EE8               	decfsz	wreg,f,c
  4078  0000BE  D7FE               	bra	u7527
  4079  0000C0  2F8C               	decfsz	??_runOp& (0+255),f,b
  4080  0000C2  D7FC               	bra	u7527
  4081  0000C4  D000               	nop2	
  4082                           
  4083                           ;operationCode.c: 87:                     if (oldPosSig != PORTEbits.RE1){
  4084  0000C6  A284               	btfss	3972,1,c	;volatile
  4085  0000C8  D002               	goto	u6230
  4086  0000CA  0E01               	movlw	1
  4087  0000CC  D001               	goto	u6236
  4088  0000CE                     u6230:
  4089  0000CE  0E00               	movlw	0
  4090  0000D0                     u6236:
  4091  0000D0  0100               	movlb	0	; () banked
  4092  0000D2  199C               	xorwf	runOp@oldPosSig& (0+255),w,b
  4093  0000D4  B4D8               	btfsc	status,2,c
  4094  0000D6  D030               	goto	l5982
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;operationCode.c: 89:                         if (pos >= 5){
  4098  0000D8  0E04               	movlw	4
  4099  0000DA  65A2               	cpfsgt	runOp@pos& (0+255),b
  4100  0000DC  D00D               	goto	l5972
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;operationCode.c: 90:                             pos = 0;
  4104  0000DE  0E00               	movlw	0
  4105  0000E0  6FA2               	movwf	runOp@pos& (0+255),b
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;operationCode.c: 91:                             posTurns += 1;
  4109  0000E2  2BA3               	incf	runOp@posTurns& (0+255),f,b
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;operationCode.c: 104:                             if (posTurns == 90){
  4113  0000E4  0E5A               	movlw	90
  4114  0000E6  19A3               	xorwf	runOp@posTurns& (0+255),w,b
  4115  0000E8  A4D8               	btfss	status,2,c
  4116  0000EA  D006               	goto	l5972
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;operationCode.c: 105:                                 procMode = 4;
  4120  0000EC  0E04               	movlw	4
  4121  0000EE  6FA4               	movwf	runOp@procMode& (0+255),b
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;operationCode.c: 107:                                 dispProcMode(procMode);
  4125  0000F0  0E04               	movlw	4
  4126  0000F2  EC01  F013         	call	_dispProcMode
  4127                           
  4128                           ;operationCode.c: 109:                                 break;
  4129  0000F6  D7AE               	goto	l5930
  4130  0000F8                     l5972:
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;operationCode.c: 113:                                                                  
      +                                         { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.0)));};
  4134  0000F8  0E80               	movlw	128
  4135  0000FA  ECFD  F01A         	call	_lcdInst
  4136  0000FE  0E07               	movlw	7
  4137  000100  0100               	movlb	0	; () banked
  4138  000102  6F8C               	movwf	??_runOp& (0+255),b
  4139  000104  0E7D               	movlw	125
  4140  000106                     u7537:
  4141  000106  2EE8               	decfsz	wreg,f,c
  4142  000108  D7FE               	bra	u7537
  4143  00010A  2F8C               	decfsz	??_runOp& (0+255),f,b
  4144  00010C  D7FC               	bra	u7537
  4145                           
  4146                           ;operationCode.c: 114:                                                                  
      +                                         printf("%05u      %05u",posTurns,pos);
  4147  00010E  0EE1               	movlw	low STR_91
  4148  000110  6E70               	movwf	printf@fmt,c
  4149  000112  0EFF               	movlw	high STR_91
  4150  000114  6E71               	movwf	printf@fmt+1,c
  4151  000116  C0A3  F072         	movff	runOp@posTurns,?_printf+2
  4152  00011A  6A73               	clrf	?_printf+3,c
  4153  00011C  C0A2  F074         	movff	runOp@pos,?_printf+4
  4154  000120  6A75               	clrf	?_printf+5,c
  4155  000122  EC82  F01A         	call	_printf	;wreg free
  4156                           
  4157                           ;operationCode.c: 116:                         pos += 1;
  4158  000126  0100               	movlb	0	; () banked
  4159  000128  2BA2               	incf	runOp@pos& (0+255),f,b
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;operationCode.c: 118:                         oldPosSig = oldPosSig ? 0 : 1 ;
  4163  00012A  519C               	movf	runOp@oldPosSig& (0+255),w,b
  4164  00012C  A4D8               	btfss	status,2,c
  4165  00012E  D002               	goto	u6270
  4166  000130  0E01               	movlw	1
  4167  000132  D001               	goto	u6280
  4168  000134                     u6270:
  4169  000134  0E00               	movlw	0
  4170  000136                     u6280:
  4171  000136  6F9C               	movwf	runOp@oldPosSig& (0+255),b
  4172  000138                     l5982:
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;operationCode.c: 80:             while (*pInt0P == 0){
  4176  000138  C088  FFD9         	movff	runOp@pInt0P,fsr2l
  4177  00013C  C089  FFDA         	movff	runOp@pInt0P+1,fsr2h
  4178  000140  50DF               	movf	indf2,w,c
  4179  000142  A4D8               	btfss	status,2,c
  4180  000144  D787               	goto	l5930
  4181  000146  D7AE               	goto	l5954
  4182  000148                     l5984:
  4183                           
  4184                           ; BSR set to: 0
  4185  000148  05A4               	decf	runOp@procMode& (0+255),w,b
  4186  00014A  A4D8               	btfss	status,2,c
  4187  00014C  D1CF               	goto	l6152
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;operationCode.c: 126:             LATAbits.LATA5 = 0; LATDbits.LATD1 = 0;
  4191  00014E  9A89               	bcf	3977,5,c	;volatile
  4192  000150  928C               	bcf	3980,1,c	;volatile
  4193                           
  4194                           ;operationCode.c: 127:             LATCbits.LATC2 = 1;
  4195  000152  848B               	bsf	3979,2,c	;volatile
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;operationCode.c: 129:             dispProcMode(procMode);
  4199  000154  51A4               	movf	runOp@procMode& (0+255),w,b
  4200  000156  EC01  F013         	call	_dispProcMode
  4201                           
  4202                           ;operationCode.c: 131:             if (PORTCbits.RC0 == 0){
  4203  00015A  B082               	btfsc	3970,0,c	;volatile
  4204  00015C  D002               	goto	l708
  4205                           
  4206                           ;operationCode.c: 132:                 LATAbits.LATA1 = 1; LATAbits.LATA3 = 0;
  4207  00015E  8289               	bsf	3977,1,c	;volatile
  4208  000160  9689               	bcf	3977,3,c	;volatile
  4209  000162                     l708:
  4210                           
  4211                           ;operationCode.c: 134:             while (PORTCbits.RC0 == 0){
  4212  000162  A082               	btfss	3970,0,c	;volatile
  4213  000164  D7FE               	goto	l708
  4214                           
  4215                           ;operationCode.c: 137:             LATAbits.LATA1 = 0; LATAbits.LATA3 = 0;
  4216  000166  9289               	bcf	3977,1,c	;volatile
  4217  000168  9689               	bcf	3977,3,c	;volatile
  4218                           
  4219                           ;operationCode.c: 139:             _delay((unsigned long)((10)*(10000000/4000.0)));
  4220  00016A  0E21               	movlw	33
  4221  00016C  0100               	movlb	0	; () banked
  4222  00016E  6F8C               	movwf	??_runOp& (0+255),b
  4223  000170  0E76               	movlw	118
  4224  000172                     u7547:
  4225  000172  2EE8               	decfsz	wreg,f,c
  4226  000174  D7FE               	bra	u7547
  4227  000176  2F8C               	decfsz	??_runOp& (0+255),f,b
  4228  000178  D7FC               	bra	u7547
  4229  00017A  F000               	nop	
  4230                           
  4231                           ;operationCode.c: 141:             LATAbits.LATA5 = 1; LATDbits.LATD1 = 1;
  4232  00017C  8A89               	bsf	3977,5,c	;volatile
  4233  00017E  828C               	bsf	3980,1,c	;volatile
  4234                           
  4235                           ;operationCode.c: 144:             unsigned char oldPosSig = PORTEbits.RE1;
  4236  000180  0E00               	movlw	0
  4237  000182  B284               	btfsc	3972,1,c	;volatile
  4238  000184  0E01               	movlw	1
  4239  000186  0100               	movlb	0	; () banked
  4240  000188  6F9D               	movwf	runOp@oldPosSig_1381& (0+255),b
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;operationCode.c: 151:             unsigned char origDetLoc = posTurns;
  4244  00018A  C0A3  F092         	movff	runOp@posTurns,runOp@origDetLoc
  4245  00018E                     l6002:
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;operationCode.c: 155:                 if (PORTBbits.RB5 == 0){
  4249  00018E  BA81               	btfsc	3969,5,c	;volatile
  4250  000190  D00A               	goto	l6010
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;operationCode.c: 157:                     _delay((unsigned long)((50)*(10000000/4000.0)
      +                          ));
  4254  000192  0EA3               	movlw	163
  4255  000194  0100               	movlb	0	; () banked
  4256  000196  6F8C               	movwf	??_runOp& (0+255),b
  4257  000198  0E55               	movlw	85
  4258  00019A                     u7557:
  4259  00019A  2EE8               	decfsz	wreg,f,c
  4260  00019C  D7FE               	bra	u7557
  4261  00019E  2F8C               	decfsz	??_runOp& (0+255),f,b
  4262  0001A0  D7FC               	bra	u7557
  4263                           
  4264                           ;operationCode.c: 159:                     if (PORTBbits.RB5 == 0){
  4265  0001A2  AA81               	btfss	3969,5,c	;volatile
  4266  0001A4  D046               	goto	l714
  4267  0001A6                     l6010:
  4268                           
  4269                           ;operationCode.c: 165:                 if (oldPosSig != PORTEbits.RE1){
  4270  0001A6  A284               	btfss	3972,1,c	;volatile
  4271  0001A8  D002               	goto	u6350
  4272  0001AA  0E01               	movlw	1
  4273  0001AC  D001               	goto	u6356
  4274  0001AE                     u6350:
  4275  0001AE  0E00               	movlw	0
  4276  0001B0                     u6356:
  4277  0001B0  0100               	movlb	0	; () banked
  4278  0001B2  199D               	xorwf	runOp@oldPosSig_1381& (0+255),w,b
  4279  0001B4  B4D8               	btfsc	status,2,c
  4280  0001B6  D7EB               	goto	l6002
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;operationCode.c: 166:                     _delay((unsigned long)((1000)*(10000000/40000
      +                          00.0)));
  4284  0001B8  0E04               	movlw	4
  4285  0001BA  0100               	movlb	0	; () banked
  4286  0001BC  6F8C               	movwf	??_runOp& (0+255),b
  4287  0001BE  0E3D               	movlw	61
  4288  0001C0                     u7567:
  4289  0001C0  2EE8               	decfsz	wreg,f,c
  4290  0001C2  D7FE               	bra	u7567
  4291  0001C4  2F8C               	decfsz	??_runOp& (0+255),f,b
  4292  0001C6  D7FC               	bra	u7567
  4293  0001C8  D000               	nop2	
  4294                           
  4295                           ;operationCode.c: 167:                     if (oldPosSig != PORTEbits.RE1){
  4296  0001CA  A284               	btfss	3972,1,c	;volatile
  4297  0001CC  D002               	goto	u6370
  4298  0001CE  0E01               	movlw	1
  4299  0001D0  D001               	goto	u6376
  4300  0001D2                     u6370:
  4301  0001D2  0E00               	movlw	0
  4302  0001D4                     u6376:
  4303  0001D4  0100               	movlb	0	; () banked
  4304  0001D6  199D               	xorwf	runOp@oldPosSig_1381& (0+255),w,b
  4305  0001D8  B4D8               	btfsc	status,2,c
  4306  0001DA  D7D9               	goto	l6002
  4307                           
  4308                           ; BSR set to: 0
  4309                           ;operationCode.c: 168:                         if (pos >= 5){
  4310  0001DC  0E04               	movlw	4
  4311  0001DE  65A2               	cpfsgt	runOp@pos& (0+255),b
  4312  0001E0  D01F               	goto	l6032
  4313                           
  4314                           ; BSR set to: 0
  4315                           ;operationCode.c: 169:                             pos = 0;
  4316  0001E2  0E00               	movlw	0
  4317  0001E4  6FA2               	movwf	runOp@pos& (0+255),b
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;operationCode.c: 170:                             posTurns += 1;
  4321  0001E6  2BA3               	incf	runOp@posTurns& (0+255),f,b
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;operationCode.c: 171:                             if (posTurns >= (origDetLoc + 3)) { b
      +                          reak; }
  4325  0001E8  5192               	movf	runOp@origDetLoc& (0+255),w,b
  4326  0001EA  6F8C               	movwf	??_runOp& (0+255),b
  4327  0001EC  6B8D               	clrf	(??_runOp+1)& (0+255),b
  4328  0001EE  0E03               	movlw	3
  4329  0001F0  278C               	addwf	??_runOp& (0+255),f,b
  4330  0001F2  0E00               	movlw	0
  4331  0001F4  238D               	addwfc	(??_runOp+1)& (0+255),f,b
  4332  0001F6  51A3               	movf	runOp@posTurns& (0+255),w,b
  4333  0001F8  6F8E               	movwf	(??_runOp+2)& (0+255),b
  4334  0001FA  6B8F               	clrf	(??_runOp+3)& (0+255),b
  4335  0001FC  518C               	movf	??_runOp& (0+255),w,b
  4336  0001FE  5D8E               	subwf	(??_runOp+2)& (0+255),w,b
  4337  000200  518F               	movf	(??_runOp+3)& (0+255),w,b
  4338  000202  0A80               	xorlw	128
  4339  000204  6F90               	movwf	(??_runOp+4)& (0+255),b
  4340  000206  518D               	movf	(??_runOp+1)& (0+255),w,b
  4341  000208  0A80               	xorlw	128
  4342  00020A  5990               	subwfb	(??_runOp+4)& (0+255),w,b
  4343  00020C  B0D8               	btfsc	status,0,c
  4344  00020E  D011               	goto	l714
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;operationCode.c: 172:                             if (posTurns == 90){
  4348  000210  0E5A               	movlw	90
  4349  000212  19A3               	xorwf	runOp@posTurns& (0+255),w,b
  4350  000214  A4D8               	btfss	status,2,c
  4351  000216  D004               	goto	l6032
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;operationCode.c: 174:                                 dispProcMode(procMode);
  4355                           
  4356                           ; BSR set to: 0
  4357  000218  0E04               	movlw	4
  4358  00021A  EC01  F013         	call	_dispProcMode
  4359                           
  4360                           ;operationCode.c: 175:                                 break;
  4361  00021E  D009               	goto	l714
  4362  000220                     l6032:
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;operationCode.c: 178:                         pos += 1;
  4366  000220  2BA2               	incf	runOp@pos& (0+255),f,b
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;operationCode.c: 179:                         oldPosSig = oldPosSig ? 0 : 1 ;
  4370  000222  519D               	movf	runOp@oldPosSig_1381& (0+255),w,b
  4371  000224  A4D8               	btfss	status,2,c
  4372  000226  D002               	goto	u6420
  4373  000228  0E01               	movlw	1
  4374  00022A  D001               	goto	u6430
  4375  00022C                     u6420:
  4376  00022C  0E00               	movlw	0
  4377  00022E                     u6430:
  4378  00022E  6F9D               	movwf	runOp@oldPosSig_1381& (0+255),b
  4379  000230  D7AE               	goto	l6002
  4380  000232                     l714:
  4381                           
  4382                           ;operationCode.c: 184:             LATAbits.LATA5 = 0; LATDbits.LATD1 = 0;
  4383  000232  9A89               	bcf	3977,5,c	;volatile
  4384  000234  928C               	bcf	3980,1,c	;volatile
  4385                           
  4386                           ;operationCode.c: 186:             if (PORTBbits.RB5 == 0){
  4387  000236  BA81               	btfsc	3969,5,c	;volatile
  4388  000238  D074               	goto	l721
  4389                           
  4390                           ;operationCode.c: 188:                 _delay((unsigned long)((200)*(10000000/4000.0)));
  4391  00023A  0E03               	movlw	3
  4392  00023C  0100               	movlb	0	; () banked
  4393  00023E  6F8D               	movwf	(??_runOp+1)& (0+255),b
  4394  000240  0E8A               	movlw	138
  4395  000242  6F8C               	movwf	??_runOp& (0+255),b
  4396  000244  0E55               	movlw	85
  4397  000246                     u7577:
  4398  000246  2EE8               	decfsz	wreg,f,c
  4399  000248  D7FE               	bra	u7577
  4400  00024A  2F8C               	decfsz	??_runOp& (0+255),f,b
  4401  00024C  D7FC               	bra	u7577
  4402  00024E  2F8D               	decfsz	(??_runOp+1)& (0+255),f,b
  4403  000250  D7FA               	bra	u7577
  4404  000252  D000               	nop2	
  4405                           
  4406                           ;operationCode.c: 190:                 if (PORTBbits.RB5 == 0){
  4407  000254  BA81               	btfsc	3969,5,c	;volatile
  4408  000256  D065               	goto	l721
  4409                           
  4410                           ;operationCode.c: 193:                     LATAbits.LATA5 = 1; LATDbits.LATD1 = 1;
  4411  000258  8A89               	bsf	3977,5,c	;volatile
  4412  00025A  828C               	bsf	3980,1,c	;volatile
  4413  00025C                     l723:
  4414                           
  4415                           ;operationCode.c: 197:                                 if (PORTBbits.RB3 == 0){
  4416  00025C  B681               	btfsc	3969,3,c	;volatile
  4417  00025E  D00B               	goto	l724
  4418                           
  4419                           ;operationCode.c: 198:                                     _delay((unsigned long)((10)*(
      +                          10000000/4000.0)));
  4420  000260  0E21               	movlw	33
  4421  000262  0100               	movlb	0	; () banked
  4422  000264  6F8C               	movwf	??_runOp& (0+255),b
  4423  000266  0E76               	movlw	118
  4424  000268                     u7587:
  4425  000268  2EE8               	decfsz	wreg,f,c
  4426  00026A  D7FE               	bra	u7587
  4427  00026C  2F8C               	decfsz	??_runOp& (0+255),f,b
  4428  00026E  D7FC               	bra	u7587
  4429  000270  F000               	nop	
  4430                           
  4431                           ;operationCode.c: 199:                                     if (PORTBbits.RB3 == 0){
  4432  000272  A681               	btfss	3969,3,c	;volatile
  4433  000274  D054               	goto	u6590
  4434  000276                     l724:
  4435                           
  4436                           ;operationCode.c: 203:                                 if (PORTBbits.RB5 == 0){
  4437  000276  BA81               	btfsc	3969,5,c	;volatile
  4438  000278  D00F               	goto	l6054
  4439                           
  4440                           ;operationCode.c: 204:                                     _delay((unsigned long)((100)*
      +                          (10000000/4000.0)));
  4441  00027A  0E02               	movlw	2
  4442  00027C  0100               	movlb	0	; () banked
  4443  00027E  6F8D               	movwf	(??_runOp+1)& (0+255),b
  4444  000280  0E45               	movlw	69
  4445  000282  6F8C               	movwf	??_runOp& (0+255),b
  4446  000284  0EA9               	movlw	169
  4447  000286                     u7597:
  4448  000286  2EE8               	decfsz	wreg,f,c
  4449  000288  D7FE               	bra	u7597
  4450  00028A  2F8C               	decfsz	??_runOp& (0+255),f,b
  4451  00028C  D7FC               	bra	u7597
  4452  00028E  2F8D               	decfsz	(??_runOp+1)& (0+255),f,b
  4453  000290  D7FA               	bra	u7597
  4454  000292  D000               	nop2	
  4455                           
  4456                           ;operationCode.c: 205:                                     if (PORTBbits.RB5 == 0){
  4457  000294  AA81               	btfss	3969,5,c	;volatile
  4458  000296  D7E2               	goto	l723
  4459  000298                     l6054:
  4460                           
  4461                           ;operationCode.c: 210:                         unsigned char oldPosSig = PORTEbits.RE1;
  4462  000298  0E00               	movlw	0
  4463  00029A  B284               	btfsc	3972,1,c	;volatile
  4464  00029C  0E01               	movlw	1
  4465  00029E  0100               	movlb	0	; () banked
  4466  0002A0  6F9E               	movwf	runOp@oldPosSig_1391& (0+255),b
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;operationCode.c: 211:                         unsigned char distPoleDet = 0;
  4470  0002A2  0E00               	movlw	0
  4471  0002A4  6F95               	movwf	runOp@distPoleDet& (0+255),b
  4472                           
  4473                           ;operationCode.c: 213:                         while (distPoleDet <= 1){
  4474  0002A6  D038               	goto	l6082
  4475  0002A8                     l731:
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;operationCode.c: 214:                             if (PORTBbits.RB3 == 0){
  4479  0002A8  B681               	btfsc	3969,3,c	;volatile
  4480  0002AA  D00B               	goto	l6064
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;operationCode.c: 215:                                 _delay((unsigned long)((10)*(1000
      +                          0000/4000.0)));
  4484  0002AC  0E21               	movlw	33
  4485  0002AE  0100               	movlb	0	; () banked
  4486  0002B0  6F8C               	movwf	??_runOp& (0+255),b
  4487  0002B2  0E76               	movlw	118
  4488  0002B4                     u7607:
  4489  0002B4  2EE8               	decfsz	wreg,f,c
  4490  0002B6  D7FE               	bra	u7607
  4491  0002B8  2F8C               	decfsz	??_runOp& (0+255),f,b
  4492  0002BA  D7FC               	bra	u7607
  4493  0002BC  F000               	nop	
  4494                           
  4495                           ;operationCode.c: 216:                                 if (PORTBbits.RB3 == 0){
  4496  0002BE  A681               	btfss	3969,3,c	;volatile
  4497  0002C0  D02E               	goto	u6590
  4498  0002C2                     l6064:
  4499                           
  4500                           ;operationCode.c: 220:                             if (oldPosSig != PORTEbits.RE1){
  4501  0002C2  A284               	btfss	3972,1,c	;volatile
  4502  0002C4  D002               	goto	u6520
  4503  0002C6  0E01               	movlw	1
  4504  0002C8  D001               	goto	u6526
  4505  0002CA                     u6520:
  4506  0002CA  0E00               	movlw	0
  4507  0002CC                     u6526:
  4508  0002CC  0100               	movlb	0	; () banked
  4509  0002CE  199E               	xorwf	runOp@oldPosSig_1391& (0+255),w,b
  4510  0002D0  B4D8               	btfsc	status,2,c
  4511  0002D2  D022               	goto	l6082
  4512                           
  4513                           ; BSR set to: 0
  4514                           ;operationCode.c: 221:                                 _delay((unsigned long)((1000)*(10
      +                          000000/4000000.0)));
  4515  0002D4  0E04               	movlw	4
  4516  0002D6  0100               	movlb	0	; () banked
  4517  0002D8  6F8C               	movwf	??_runOp& (0+255),b
  4518  0002DA  0E3D               	movlw	61
  4519  0002DC                     u7617:
  4520  0002DC  2EE8               	decfsz	wreg,f,c
  4521  0002DE  D7FE               	bra	u7617
  4522  0002E0  2F8C               	decfsz	??_runOp& (0+255),f,b
  4523  0002E2  D7FC               	bra	u7617
  4524  0002E4  D000               	nop2	
  4525                           
  4526                           ;operationCode.c: 222:                                 if (oldPosSig != PORTEbits.RE1){
  4527  0002E6  A284               	btfss	3972,1,c	;volatile
  4528  0002E8  D002               	goto	u6540
  4529  0002EA  0E01               	movlw	1
  4530  0002EC  D001               	goto	u6546
  4531  0002EE                     u6540:
  4532  0002EE  0E00               	movlw	0
  4533  0002F0                     u6546:
  4534  0002F0  0100               	movlb	0	; () banked
  4535  0002F2  199E               	xorwf	runOp@oldPosSig_1391& (0+255),w,b
  4536  0002F4  B4D8               	btfsc	status,2,c
  4537  0002F6  D010               	goto	l6082
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;operationCode.c: 223:                                     if (pos == 5){
  4541  0002F8  0E05               	movlw	5
  4542  0002FA  19A2               	xorwf	runOp@pos& (0+255),w,b
  4543  0002FC  A4D8               	btfss	status,2,c
  4544  0002FE  D003               	goto	l6076
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;operationCode.c: 224:                                         pos = 0;
  4548  000300  0E00               	movlw	0
  4549  000302  6FA2               	movwf	runOp@pos& (0+255),b
  4550                           
  4551                           ; BSR set to: 0
  4552                           ;operationCode.c: 225:                                         posTurns+=1;
  4553  000304  2BA3               	incf	runOp@posTurns& (0+255),f,b
  4554  000306                     l6076:
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;operationCode.c: 227:                                     pos += 1;
  4558  000306  2BA2               	incf	runOp@pos& (0+255),f,b
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;operationCode.c: 228:                                     distPoleDet += 1;
  4562  000308  2B95               	incf	runOp@distPoleDet& (0+255),f,b
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;operationCode.c: 229:                                     oldPosSig = oldPosSig ? 0 : 1
      +                           ;
  4566  00030A  519E               	movf	runOp@oldPosSig_1391& (0+255),w,b
  4567  00030C  A4D8               	btfss	status,2,c
  4568  00030E  D002               	goto	u6570
  4569  000310  0E01               	movlw	1
  4570  000312  D001               	goto	u6580
  4571  000314                     u6570:
  4572  000314  0E00               	movlw	0
  4573  000316                     u6580:
  4574  000316  6F9E               	movwf	runOp@oldPosSig_1391& (0+255),b
  4575  000318                     l6082:
  4576                           
  4577                           ; BSR set to: 0
  4578                           ;operationCode.c: 213:                         while (distPoleDet <= 1){
  4579  000318  0E01               	movlw	1
  4580  00031A  6595               	cpfsgt	runOp@distPoleDet& (0+255),b
  4581  00031C  D7C5               	goto	l731
  4582  00031E                     u6590:
  4583                           
  4584                           ;operationCode.c: 239:                     LATAbits.LATA5 = 0; LATDbits.LATD1 = 0;
  4585  00031E  9A89               	bcf	3977,5,c	;volatile
  4586  000320  928C               	bcf	3980,1,c	;volatile
  4587  000322                     l721:
  4588                           
  4589                           ;operationCode.c: 243:             LATAbits.LATA1 = 0; LATAbits.LATA3 = 1;
  4590  000322  9289               	bcf	3977,1,c	;volatile
  4591  000324  8689               	bsf	3977,3,c	;volatile
  4592                           
  4593                           ;operationCode.c: 247:             unsigned char temp = 0;
  4594  000326  0E00               	movlw	0
  4595  000328  0100               	movlb	0	; () banked
  4596  00032A  6F97               	movwf	runOp@temp& (0+255),b
  4597                           
  4598                           ;operationCode.c: 248:             unsigned int i = 0;
  4599  00032C  0E00               	movlw	0
  4600  00032E  6F94               	movwf	(runOp@i+1)& (0+255),b
  4601  000330  0E00               	movlw	0
  4602  000332  6F93               	movwf	runOp@i& (0+255),b
  4603                           
  4604                           ;operationCode.c: 249:             unsigned char found = 0;
  4605  000334  0E00               	movlw	0
  4606  000336  D02E               	goto	L9
  4607  000338                     l6086:
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;operationCode.c: 257:                 found += 1;
  4611  000338  2B98               	incf	runOp@found& (0+255),f,b
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;operationCode.c: 260:                 temp = 0;
  4615  00033A  0E00               	movlw	0
  4616  00033C  6F97               	movwf	runOp@temp& (0+255),b
  4617                           
  4618                           ; BSR set to: 0
  4619                           ;operationCode.c: 261:                 i = 0;
  4620  00033E  0E00               	movlw	0
  4621  000340  6F94               	movwf	(runOp@i+1)& (0+255),b
  4622  000342  0E00               	movlw	0
  4623  000344  6F93               	movwf	runOp@i& (0+255),b
  4624                           
  4625                           ; BSR set to: 0
  4626                           ;operationCode.c: 263:                 LATAbits.LATA1 = 1; LATAbits.LATA3 = 0;
  4627  000346  8289               	bsf	3977,1,c	;volatile
  4628                           
  4629                           ; BSR set to: 0
  4630  000348  9689               	bcf	3977,3,c	;volatile
  4631  00034A                     l740:
  4632                           
  4633                           ;operationCode.c: 265:                 while (PORTCbits.RC0 == 0){
  4634  00034A  A082               	btfss	3970,0,c	;volatile
  4635  00034C  D7FE               	goto	l740
  4636                           
  4637                           ;operationCode.c: 268:                 LATAbits.LATA5 = 1; LATDbits.LATD1 = 1;
  4638  00034E  8A89               	bsf	3977,5,c	;volatile
  4639  000350  828C               	bsf	3980,1,c	;volatile
  4640                           
  4641                           ;operationCode.c: 271:                 _delay((unsigned long)((400)*(10000000/4000.0)));
  4642  000352  0E06               	movlw	6
  4643  000354  0100               	movlb	0	; () banked
  4644  000356  6F8D               	movwf	(??_runOp+1)& (0+255),b
  4645  000358  0E13               	movlw	19
  4646  00035A  6F8C               	movwf	??_runOp& (0+255),b
  4647  00035C  0EAD               	movlw	173
  4648  00035E                     u7627:
  4649  00035E  2EE8               	decfsz	wreg,f,c
  4650  000360  D7FE               	bra	u7627
  4651  000362  2F8C               	decfsz	??_runOp& (0+255),f,b
  4652  000364  D7FC               	bra	u7627
  4653  000366  2F8D               	decfsz	(??_runOp+1)& (0+255),f,b
  4654  000368  D7FA               	bra	u7627
  4655  00036A  D000               	nop2	
  4656                           
  4657                           ;operationCode.c: 274:                 posTurns++;
  4658  00036C  0100               	movlb	0	; () banked
  4659  00036E  2BA3               	incf	runOp@posTurns& (0+255),f,b
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;operationCode.c: 276:                 LATAbits.LATA5 = 0; LATDbits.LATD1 = 0;
  4663  000370  9A89               	bcf	3977,5,c	;volatile
  4664                           
  4665                           ; BSR set to: 0
  4666  000372  928C               	bcf	3980,1,c	;volatile
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;operationCode.c: 279:                 LATAbits.LATA1 = 0; LATAbits.LATA3 = 1;
  4670  000374  9289               	bcf	3977,1,c	;volatile
  4671                           
  4672                           ; BSR set to: 0
  4673  000376  8689               	bsf	3977,3,c	;volatile
  4674  000378                     l6108:
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;operationCode.c: 284:                     if (PORTBbits.RB3 == 0){
  4678  000378  B681               	btfsc	3969,3,c	;volatile
  4679  00037A  D00E               	goto	l6116
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;operationCode.c: 285:                         _delay((unsigned long)((50)*(10000000/400
      +                          0.0)));
  4683  00037C  0EA3               	movlw	163
  4684  00037E  0100               	movlb	0	; () banked
  4685  000380  6F8C               	movwf	??_runOp& (0+255),b
  4686  000382  0E55               	movlw	85
  4687  000384                     u7637:
  4688  000384  2EE8               	decfsz	wreg,f,c
  4689  000386  D7FE               	bra	u7637
  4690  000388  2F8C               	decfsz	??_runOp& (0+255),f,b
  4691  00038A  D7FC               	bra	u7637
  4692                           
  4693                           ;operationCode.c: 286:                         if (PORTBbits.RB3 == 0){
  4694  00038C  B681               	btfsc	3969,3,c	;volatile
  4695  00038E  D004               	goto	l6116
  4696                           
  4697                           ;operationCode.c: 287:                             found = 100;
  4698  000390  0E64               	movlw	100
  4699  000392  0100               	movlb	0	; () banked
  4700  000394                     L9:
  4701  000394  6F98               	movwf	runOp@found& (0+255),b
  4702                           
  4703                           ;operationCode.c: 288:                             break;
  4704  000396  D00F               	goto	u6640
  4705  000398                     l6116:
  4706                           
  4707                           ;operationCode.c: 291:                     temp++;
  4708  000398  0100               	movlb	0	; () banked
  4709  00039A  2B97               	incf	runOp@temp& (0+255),f,b
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;operationCode.c: 292:                     if (temp >= 0xff){
  4713  00039C  2997               	incf	runOp@temp& (0+255),w,b
  4714  00039E  A4D8               	btfss	status,2,c
  4715  0003A0  D7EB               	goto	l6108
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;operationCode.c: 293:                         temp = 0;
  4719  0003A2  0E00               	movlw	0
  4720  0003A4  6F97               	movwf	runOp@temp& (0+255),b
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;operationCode.c: 294:                         i++;
  4724  0003A6  4B93               	infsnz	runOp@i& (0+255),f,b
  4725  0003A8  2B94               	incf	(runOp@i+1)& (0+255),f,b
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;operationCode.c: 295:                         if ((i >= 0x360) && (temp >= 0x00)){
  4729  0003AA  0E60               	movlw	96
  4730  0003AC  5D93               	subwf	runOp@i& (0+255),w,b
  4731  0003AE  0E03               	movlw	3
  4732  0003B0  5994               	subwfb	(runOp@i+1)& (0+255),w,b
  4733  0003B2  A0D8               	btfss	status,0,c
  4734  0003B4  D7E1               	goto	l6108
  4735  0003B6                     u6640:
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;operationCode.c: 255:             while (found < 4){
  4739  0003B6  0E03               	movlw	3
  4740  0003B8  6598               	cpfsgt	runOp@found& (0+255),b
  4741  0003BA  D7BE               	goto	l6086
  4742                           
  4743                           ; BSR set to: 0
  4744                           ;operationCode.c: 302:             LATAbits.LATA1 = 0; LATAbits.LATA3 = 0;
  4745  0003BC  9289               	bcf	3977,1,c	;volatile
  4746  0003BE  9689               	bcf	3977,3,c	;volatile
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;operationCode.c: 304:             infoArr[*pNumPoles].id = *pNumPoles + 1;
  4750  0003C0  C084  FFD9         	movff	runOp@pNumPoles,fsr2l
  4751  0003C4  C085  FFDA         	movff	runOp@pNumPoles+1,fsr2h
  4752  0003C8  50DF               	movf	indf2,w,c
  4753  0003CA  6F8C               	movwf	??_runOp& (0+255),b
  4754  0003CC  518C               	movf	??_runOp& (0+255),w,b
  4755  0003CE  0D05               	mullw	5
  4756  0003D0  CFF3 F08D          	movff	prodl,??_runOp+1
  4757  0003D4  CFF4 F08E          	movff	prodh,??_runOp+2
  4758  0003D8  518D               	movf	(??_runOp+1)& (0+255),w,b
  4759  0003DA  2586               	addwf	runOp@infoArr& (0+255),w,b
  4760  0003DC  6ED9               	movwf	fsr2l,c
  4761  0003DE  518E               	movf	(??_runOp+2)& (0+255),w,b
  4762  0003E0  2187               	addwfc	(runOp@infoArr+1)& (0+255),w,b
  4763  0003E2  6EDA               	movwf	fsr2h,c
  4764  0003E4  C084  FFE1         	movff	runOp@pNumPoles,fsr1l
  4765  0003E8  C085  FFE2         	movff	runOp@pNumPoles+1,fsr1h
  4766  0003EC  50E7               	movf	indf1,w,c
  4767  0003EE  6F8F               	movwf	(??_runOp+3)& (0+255),b
  4768  0003F0  298F               	incf	(??_runOp+3)& (0+255),w,b
  4769  0003F2  6EDF               	movwf	indf2,c
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;operationCode.c: 306:             infoArr[*pNumPoles].pos = posTurns*44 + pos*9;
  4773  0003F4  51A3               	movf	runOp@posTurns& (0+255),w,b
  4774  0003F6  0D2C               	mullw	44
  4775  0003F8  CFF3 F08C          	movff	prodl,??_runOp
  4776  0003FC  CFF4 F08D          	movff	prodh,??_runOp+1
  4777  000400  51A2               	movf	runOp@pos& (0+255),w,b
  4778  000402  0D09               	mullw	9
  4779  000404  50F3               	movf	prodl,w,c
  4780  000406  278C               	addwf	??_runOp& (0+255),f,b
  4781  000408  50F4               	movf	prodh,w,c
  4782  00040A  238D               	addwfc	(??_runOp+1)& (0+255),f,b
  4783  00040C  C084  FFD9         	movff	runOp@pNumPoles,fsr2l
  4784  000410  C085  FFDA         	movff	runOp@pNumPoles+1,fsr2h
  4785  000414  50DF               	movf	indf2,w,c
  4786  000416  6F8E               	movwf	(??_runOp+2)& (0+255),b
  4787  000418  518E               	movf	(??_runOp+2)& (0+255),w,b
  4788  00041A  0D05               	mullw	5
  4789  00041C  C086  F08F         	movff	runOp@infoArr,??_runOp+3
  4790  000420  C087  F090         	movff	runOp@infoArr+1,??_runOp+4
  4791  000424  50F3               	movf	prodl,w,c
  4792  000426  278F               	addwf	(??_runOp+3)& (0+255),f,b
  4793  000428  50F4               	movf	prodh,w,c
  4794  00042A  2390               	addwfc	(??_runOp+4)& (0+255),f,b
  4795  00042C  0E01               	movlw	1
  4796  00042E  258F               	addwf	(??_runOp+3)& (0+255),w,b
  4797  000430  6ED9               	movwf	fsr2l,c
  4798  000432  0E00               	movlw	0
  4799  000434  2190               	addwfc	(??_runOp+4)& (0+255),w,b
  4800  000436  6EDA               	movwf	fsr2h,c
  4801  000438  C08C  FFDE         	movff	??_runOp,postinc2
  4802  00043C  C08D  FFDD         	movff	??_runOp+1,postdec2
  4803                           
  4804                           ; BSR set to: 0
  4805                           ;operationCode.c: 308:             if (found < 80){
  4806  000440  0E50               	movlw	80
  4807  000442  6198               	cpfslt	runOp@found& (0+255),b
  4808  000444  D03F               	goto	l756
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;operationCode.c: 312:                 LATAbits.LATA1 = 1; LATAbits.LATA3 = 0;
  4812  000446  8289               	bsf	3977,1,c	;volatile
  4813  000448  9689               	bcf	3977,3,c	;volatile
  4814  00044A                     l752:
  4815                           
  4816                           ;operationCode.c: 315:                 while (PORTCbits.RC0 == 0){
  4817  00044A  A082               	btfss	3970,0,c	;volatile
  4818  00044C  D7FE               	goto	l752
  4819                           
  4820                           ;operationCode.c: 318:                 LATAbits.LATA1 = 0; LATAbits.LATA3 = 0;
  4821  00044E  9289               	bcf	3977,1,c	;volatile
  4822  000450  9689               	bcf	3977,3,c	;volatile
  4823                           
  4824                           ;operationCode.c: 320:                 infoArr[*pNumPoles].tiresPresent = 1;
  4825  000452  C084  FFD9         	movff	runOp@pNumPoles,fsr2l
  4826  000456  C085  FFDA         	movff	runOp@pNumPoles+1,fsr2h
  4827  00045A  50DF               	movf	indf2,w,c
  4828  00045C  0100               	movlb	0	; () banked
  4829  00045E  6F8C               	movwf	??_runOp& (0+255),b
  4830  000460  518C               	movf	??_runOp& (0+255),w,b
  4831  000462  0D05               	mullw	5
  4832  000464  C086  F08D         	movff	runOp@infoArr,??_runOp+1
  4833  000468  C087  F08E         	movff	runOp@infoArr+1,??_runOp+2
  4834  00046C  50F3               	movf	prodl,w,c
  4835  00046E  278D               	addwf	(??_runOp+1)& (0+255),f,b
  4836  000470  50F4               	movf	prodh,w,c
  4837  000472  238E               	addwfc	(??_runOp+2)& (0+255),f,b
  4838  000474  0E04               	movlw	4
  4839  000476  258D               	addwf	(??_runOp+1)& (0+255),w,b
  4840  000478  6ED9               	movwf	fsr2l,c
  4841  00047A  0E00               	movlw	0
  4842  00047C  218E               	addwfc	(??_runOp+2)& (0+255),w,b
  4843  00047E  6EDA               	movwf	fsr2h,c
  4844  000480  0E01               	movlw	1
  4845  000482  6EDF               	movwf	indf2,c
  4846                           
  4847                           ;operationCode.c: 322:                 infoArr[*pNumPoles].tiresSupp = 0;
  4848  000484  C084  FFD9         	movff	runOp@pNumPoles,fsr2l
  4849  000488  C085  FFDA         	movff	runOp@pNumPoles+1,fsr2h
  4850  00048C  50DF               	movf	indf2,w,c
  4851  00048E  6F8C               	movwf	??_runOp& (0+255),b
  4852  000490  518C               	movf	??_runOp& (0+255),w,b
  4853  000492  0D05               	mullw	5
  4854  000494  C086  F08D         	movff	runOp@infoArr,??_runOp+1
  4855  000498  C087  F08E         	movff	runOp@infoArr+1,??_runOp+2
  4856  00049C  50F3               	movf	prodl,w,c
  4857  00049E  278D               	addwf	(??_runOp+1)& (0+255),f,b
  4858  0004A0  50F4               	movf	prodh,w,c
  4859  0004A2  238E               	addwfc	(??_runOp+2)& (0+255),f,b
  4860  0004A4  0E03               	movlw	3
  4861  0004A6  258D               	addwf	(??_runOp+1)& (0+255),w,b
  4862  0004A8  6ED9               	movwf	fsr2l,c
  4863  0004AA  0E00               	movlw	0
  4864  0004AC  218E               	addwfc	(??_runOp+2)& (0+255),w,b
  4865  0004AE  6EDA               	movwf	fsr2h,c
  4866  0004B0  0E00               	movlw	0
  4867  0004B2  6EDF               	movwf	indf2,c
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;operationCode.c: 323:                 *pNumPoles += 1;
  4871  0004B4  C084  FFD9         	movff	runOp@pNumPoles,fsr2l
  4872  0004B8  C085  FFDA         	movff	runOp@pNumPoles+1,fsr2h
  4873  0004BC  2ADF               	incf	indf2,f,c
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;operationCode.c: 324:                 procMode = 3;
  4877  0004BE  0E03               	movlw	3
  4878  0004C0  6FA4               	movwf	runOp@procMode& (0+255),b
  4879                           
  4880                           ;operationCode.c: 327:                 continue;
  4881  0004C2  D5C8               	goto	l5930
  4882  0004C4                     l756:
  4883                           
  4884                           ;operationCode.c: 332:                 if (PORTBbits.RB3 == 0){
  4885  0004C4  B681               	btfsc	3969,3,c	;volatile
  4886  0004C6  D7FE               	goto	l756
  4887                           
  4888                           ;operationCode.c: 333:                     _delay((unsigned long)((10)*(10000000/4000.0)
      +                          ));
  4889  0004C8  0E21               	movlw	33
  4890  0004CA  0100               	movlb	0	; () banked
  4891  0004CC  6F8C               	movwf	??_runOp& (0+255),b
  4892  0004CE  0E76               	movlw	118
  4893  0004D0                     u7647:
  4894  0004D0  2EE8               	decfsz	wreg,f,c
  4895  0004D2  D7FE               	bra	u7647
  4896  0004D4  2F8C               	decfsz	??_runOp& (0+255),f,b
  4897  0004D6  D7FC               	bra	u7647
  4898  0004D8  F000               	nop	
  4899                           
  4900                           ;operationCode.c: 334:                     if (PORTBbits.RB3 == 0){
  4901  0004DA  B681               	btfsc	3969,3,c	;volatile
  4902  0004DC  D7F3               	goto	l756
  4903                           
  4904                           ;operationCode.c: 336:                         procMode = 2;
  4905  0004DE  0E02               	movlw	2
  4906  0004E0  0100               	movlb	0	; () banked
  4907  0004E2  6FA4               	movwf	runOp@procMode& (0+255),b
  4908                           
  4909                           ; BSR set to: 0
  4910                           ;operationCode.c: 338:                         dispProcMode(procMode);
  4911  0004E4  0E02               	movlw	2
  4912  0004E6  EC01  F013         	call	_dispProcMode
  4913                           
  4914                           ;operationCode.c: 339:                         break;
  4915  0004EA  D5B4               	goto	l5930
  4916  0004EC                     l6152:
  4917                           
  4918                           ; BSR set to: 0
  4919  0004EC  0E02               	movlw	2
  4920  0004EE  19A4               	xorwf	runOp@procMode& (0+255),w,b
  4921  0004F0  A4D8               	btfss	status,2,c
  4922  0004F2  D0E4               	goto	l6206
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;operationCode.c: 344:             LATAbits.LATA5 = 0; LATDbits.LATD1 = 0;
  4926  0004F4  9A89               	bcf	3977,5,c	;volatile
  4927  0004F6  928C               	bcf	3980,1,c	;volatile
  4928                           
  4929                           ;operationCode.c: 345:             LATCbits.LATC2 = 1;
  4930  0004F8  848B               	bsf	3979,2,c	;volatile
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;operationCode.c: 346:             unsigned char tireVar = 0;
  4934  0004FA  0E00               	movlw	0
  4935  0004FC  6FA1               	movwf	runOp@tireVar& (0+255),b
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;operationCode.c: 349:             if (PORTCbits.RC6 == 0){
  4939  0004FE  BC82               	btfsc	3970,6,c	;volatile
  4940  000500  D011               	goto	l763
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;operationCode.c: 350:                 _delay((unsigned long)((500)*(10000000/4000.0)));
  4944  000502  0E07               	movlw	7
  4945  000504  0100               	movlb	0	; () banked
  4946  000506  6F8D               	movwf	(??_runOp+1)& (0+255),b
  4947  000508  0E58               	movlw	88
  4948  00050A  6F8C               	movwf	??_runOp& (0+255),b
  4949  00050C  0E59               	movlw	89
  4950  00050E                     u7657:
  4951  00050E  2EE8               	decfsz	wreg,f,c
  4952  000510  D7FE               	bra	u7657
  4953  000512  2F8C               	decfsz	??_runOp& (0+255),f,b
  4954  000514  D7FC               	bra	u7657
  4955  000516  2F8D               	decfsz	(??_runOp+1)& (0+255),f,b
  4956  000518  D7FA               	bra	u7657
  4957  00051A  D000               	nop2	
  4958                           
  4959                           ;operationCode.c: 351:                 if (PORTCbits.RC6 == 0){
  4960  00051C  BC82               	btfsc	3970,6,c	;volatile
  4961  00051E  D016               	goto	l6172
  4962                           
  4963                           ;operationCode.c: 352:                     tireVar = 2;
  4964  000520  0E02               	movlw	2
  4965  000522  D012               	goto	L7
  4966  000524                     l763:
  4967                           
  4968                           ; BSR set to: 0
  4969  000524  A281               	btfss	3969,1,c	;volatile
  4970  000526  D012               	goto	l6172
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;operationCode.c: 355:                 _delay((unsigned long)((500)*(10000000/4000.0)));
  4974  000528  0E07               	movlw	7
  4975  00052A  0100               	movlb	0	; () banked
  4976  00052C  6F8D               	movwf	(??_runOp+1)& (0+255),b
  4977  00052E  0E58               	movlw	88
  4978  000530  6F8C               	movwf	??_runOp& (0+255),b
  4979  000532  0E59               	movlw	89
  4980  000534                     u7667:
  4981  000534  2EE8               	decfsz	wreg,f,c
  4982  000536  D7FE               	bra	u7667
  4983  000538  2F8C               	decfsz	??_runOp& (0+255),f,b
  4984  00053A  D7FC               	bra	u7667
  4985  00053C  2F8D               	decfsz	(??_runOp+1)& (0+255),f,b
  4986  00053E  D7FA               	bra	u7667
  4987  000540  D000               	nop2	
  4988                           
  4989                           ;operationCode.c: 356:                 if (PORTBbits.RB1 == 1){
  4990  000542  A281               	btfss	3969,1,c	;volatile
  4991  000544  D003               	goto	l6172
  4992                           
  4993                           ;operationCode.c: 357:                     tireVar = 1;
  4994  000546  0E01               	movlw	1
  4995  000548                     L7:
  4996  000548  0100               	movlb	0	; () banked
  4997  00054A  6FA1               	movwf	runOp@tireVar& (0+255),b
  4998  00054C                     l6172:
  4999                           
  5000                           ;operationCode.c: 364:             if (*pNumPoles == 0){
  5001  00054C  C084  FFD9         	movff	runOp@pNumPoles,fsr2l
  5002  000550  C085  FFDA         	movff	runOp@pNumPoles+1,fsr2h
  5003  000554  50DF               	movf	indf2,w,c
  5004  000556  A4D8               	btfss	status,2,c
  5005  000558  D01C               	goto	l6178
  5006  00055A                     u6750:
  5007  00055A                     l6174:
  5008                           
  5009                           ;operationCode.c: 365:                 tireVar = 2-tireVar;
  5010  00055A  0100               	movlb	0	; () banked
  5011  00055C  51A1               	movf	runOp@tireVar& (0+255),w,b
  5012  00055E  0802               	sublw	2
  5013  000560  6FA1               	movwf	runOp@tireVar& (0+255),b
  5014                           
  5015                           ; BSR set to: 0
  5016                           ;operationCode.c: 367:                 infoArr[*pNumPoles].tiresPresent = 2;
  5017  000562  C084  FFD9         	movff	runOp@pNumPoles,fsr2l
  5018  000566  C085  FFDA         	movff	runOp@pNumPoles+1,fsr2h
  5019  00056A  50DF               	movf	indf2,w,c
  5020  00056C  6F8C               	movwf	??_runOp& (0+255),b
  5021  00056E  518C               	movf	??_runOp& (0+255),w,b
  5022  000570  0D05               	mullw	5
  5023  000572  C086  F08D         	movff	runOp@infoArr,??_runOp+1
  5024  000576  C087  F08E         	movff	runOp@infoArr+1,??_runOp+2
  5025  00057A  50F3               	movf	prodl,w,c
  5026  00057C  278D               	addwf	(??_runOp+1)& (0+255),f,b
  5027  00057E  50F4               	movf	prodh,w,c
  5028  000580  238E               	addwfc	(??_runOp+2)& (0+255),f,b
  5029  000582  0E04               	movlw	4
  5030  000584  258D               	addwf	(??_runOp+1)& (0+255),w,b
  5031  000586  6ED9               	movwf	fsr2l,c
  5032  000588  0E00               	movlw	0
  5033  00058A  218E               	addwfc	(??_runOp+2)& (0+255),w,b
  5034  00058C  6EDA               	movwf	fsr2h,c
  5035  00058E  0E02               	movlw	2
  5036  000590  D04B               	goto	L8
  5037  000592                     l6178:
  5038  000592  C084  FFD9         	movff	runOp@pNumPoles,fsr2l
  5039  000596  C085  FFDA         	movff	runOp@pNumPoles+1,fsr2h
  5040  00059A  50DF               	movf	indf2,w,c
  5041  00059C  0100               	movlb	0	; () banked
  5042  00059E  6F8C               	movwf	??_runOp& (0+255),b
  5043  0005A0  518C               	movf	??_runOp& (0+255),w,b
  5044  0005A2  0D05               	mullw	5
  5045  0005A4  C086  F08D         	movff	runOp@infoArr,??_runOp+1
  5046  0005A8  C087  F08E         	movff	runOp@infoArr+1,??_runOp+2
  5047  0005AC  50F3               	movf	prodl,w,c
  5048  0005AE  278D               	addwf	(??_runOp+1)& (0+255),f,b
  5049  0005B0  50F4               	movf	prodh,w,c
  5050  0005B2  238E               	addwfc	(??_runOp+2)& (0+255),f,b
  5051  0005B4  0EFC               	movlw	252
  5052  0005B6  258D               	addwf	(??_runOp+1)& (0+255),w,b
  5053  0005B8  6ED9               	movwf	fsr2l,c
  5054  0005BA  0EFF               	movlw	255
  5055  0005BC  218E               	addwfc	(??_runOp+2)& (0+255),w,b
  5056  0005BE  6EDA               	movwf	fsr2h,c
  5057  0005C0  CFDE F00D          	movff	postinc2,___awdiv@dividend
  5058  0005C4  CFDD F00E          	movff	postdec2,___awdiv@dividend+1
  5059  0005C8  0E00               	movlw	0
  5060  0005CA  6E10               	movwf	___awdiv@divisor+1,c
  5061  0005CC  0E2C               	movlw	44
  5062  0005CE  6E0F               	movwf	___awdiv@divisor,c
  5063  0005D0  ECE0  F016         	call	___awdiv	;wreg free
  5064  0005D4  0100               	movlb	0	; () banked
  5065  0005D6  51A3               	movf	runOp@posTurns& (0+255),w,b
  5066  0005D8  6F8F               	movwf	(??_runOp+3)& (0+255),b
  5067  0005DA  6B90               	clrf	(??_runOp+4)& (0+255),b
  5068  0005DC  500D               	movf	?___awdiv,w,c
  5069  0005DE  5F8F               	subwf	(??_runOp+3)& (0+255),f,b
  5070  0005E0  500E               	movf	?___awdiv+1,w,c
  5071  0005E2  5B90               	subwfb	(??_runOp+4)& (0+255),f,b
  5072  0005E4  BF90               	btfsc	(??_runOp+4)& (0+255),7,b
  5073  0005E6  D006               	goto	u6760
  5074  0005E8  5190               	movf	(??_runOp+4)& (0+255),w,b
  5075  0005EA  E1B7               	bnz	l6174
  5076  0005EC  0E08               	movlw	8
  5077  0005EE  5D8F               	subwf	(??_runOp+3)& (0+255),w,b
  5078  0005F0  B0D8               	btfsc	status,0,c
  5079  0005F2  D7B3               	goto	u6750
  5080  0005F4                     u6760:
  5081                           
  5082                           ; BSR set to: 0
  5083                           ;operationCode.c: 375:                 tireVar = 1-tireVar;
  5084  0005F4  51A1               	movf	runOp@tireVar& (0+255),w,b
  5085  0005F6  0801               	sublw	1
  5086  0005F8  6FA1               	movwf	runOp@tireVar& (0+255),b
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;operationCode.c: 377:                 infoArr[*pNumPoles].tiresPresent = 1;
  5090  0005FA  C084  FFD9         	movff	runOp@pNumPoles,fsr2l
  5091  0005FE  C085  FFDA         	movff	runOp@pNumPoles+1,fsr2h
  5092  000602  50DF               	movf	indf2,w,c
  5093  000604  6F8C               	movwf	??_runOp& (0+255),b
  5094  000606  518C               	movf	??_runOp& (0+255),w,b
  5095  000608  0D05               	mullw	5
  5096  00060A  C086  F08D         	movff	runOp@infoArr,??_runOp+1
  5097  00060E  C087  F08E         	movff	runOp@infoArr+1,??_runOp+2
  5098  000612  50F3               	movf	prodl,w,c
  5099  000614  278D               	addwf	(??_runOp+1)& (0+255),f,b
  5100  000616  50F4               	movf	prodh,w,c
  5101  000618  238E               	addwfc	(??_runOp+2)& (0+255),f,b
  5102  00061A  0E04               	movlw	4
  5103  00061C  258D               	addwf	(??_runOp+1)& (0+255),w,b
  5104  00061E  6ED9               	movwf	fsr2l,c
  5105  000620  0E00               	movlw	0
  5106  000622  218E               	addwfc	(??_runOp+2)& (0+255),w,b
  5107  000624  6EDA               	movwf	fsr2h,c
  5108  000626  0E01               	movlw	1
  5109  000628                     L8:
  5110  000628  6EDF               	movwf	indf2,c
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;operationCode.c: 389:             tireDeploy(tireVar,(*pTotalSupplied)%2);
  5114                           
  5115                           ;operationCode.c: 379:             } else {
  5116  00062A  C082  FFD9         	movff	runOp@pTotalSupplied,fsr2l
  5117  00062E  C083  FFDA         	movff	runOp@pTotalSupplied+1,fsr2h
  5118  000632  50DF               	movf	indf2,w,c
  5119  000634  0B01               	andlw	1
  5120  000636  6E08               	movwf	tireDeploy@firstTank,c
  5121  000638  51A1               	movf	runOp@tireVar& (0+255),w,b
  5122  00063A  EC6F  F01A         	call	_tireDeploy
  5123                           
  5124                           ;operationCode.c: 392:             infoArr[*pNumPoles].tiresSupp = tireVar;
  5125  00063E  C084  FFD9         	movff	runOp@pNumPoles,fsr2l
  5126  000642  C085  FFDA         	movff	runOp@pNumPoles+1,fsr2h
  5127  000646  50DF               	movf	indf2,w,c
  5128  000648  0100               	movlb	0	; () banked
  5129  00064A  6F8C               	movwf	??_runOp& (0+255),b
  5130  00064C  518C               	movf	??_runOp& (0+255),w,b
  5131  00064E  0D05               	mullw	5
  5132  000650  C086  F08D         	movff	runOp@infoArr,??_runOp+1
  5133  000654  C087  F08E         	movff	runOp@infoArr+1,??_runOp+2
  5134  000658  50F3               	movf	prodl,w,c
  5135  00065A  278D               	addwf	(??_runOp+1)& (0+255),f,b
  5136  00065C  50F4               	movf	prodh,w,c
  5137  00065E  238E               	addwfc	(??_runOp+2)& (0+255),f,b
  5138  000660  0E03               	movlw	3
  5139  000662  258D               	addwf	(??_runOp+1)& (0+255),w,b
  5140  000664  6ED9               	movwf	fsr2l,c
  5141  000666  0E00               	movlw	0
  5142  000668  218E               	addwfc	(??_runOp+2)& (0+255),w,b
  5143  00066A  6EDA               	movwf	fsr2h,c
  5144  00066C  C0A1  FFDF         	movff	runOp@tireVar,indf2
  5145                           
  5146                           ; BSR set to: 0
  5147                           ;operationCode.c: 395:             *pTotalSupplied += tireVar;
  5148  000670  C082  FFD9         	movff	runOp@pTotalSupplied,fsr2l
  5149  000674  C083  FFDA         	movff	runOp@pTotalSupplied+1,fsr2h
  5150  000678  51A1               	movf	runOp@tireVar& (0+255),w,b
  5151  00067A  26DF               	addwf	indf2,f,c
  5152                           
  5153                           ; BSR set to: 0
  5154                           ;operationCode.c: 397:             dispProcMode(procMode);
  5155  00067C  51A4               	movf	runOp@procMode& (0+255),w,b
  5156  00067E  EC01  F013         	call	_dispProcMode
  5157                           
  5158                           ;operationCode.c: 399:             if (tireVar != 0){
  5159  000682  0100               	movlb	0	; () banked
  5160  000684  51A1               	movf	runOp@tireVar& (0+255),w,b
  5161  000686  B4D8               	btfsc	status,2,c
  5162  000688  D00D               	goto	l6200
  5163                           
  5164                           ; BSR set to: 0
  5165                           ;operationCode.c: 400:                 _delay((unsigned long)((3000)*(10000000/4000.0)))
      +                          ;
  5166  00068A  0E27               	movlw	39
  5167  00068C  0100               	movlb	0	; () banked
  5168  00068E  6F8D               	movwf	(??_runOp+1)& (0+255),b
  5169  000690  0E0D               	movlw	13
  5170  000692  6F8C               	movwf	??_runOp& (0+255),b
  5171  000694  0E26               	movlw	38
  5172  000696                     u7677:
  5173  000696  2EE8               	decfsz	wreg,f,c
  5174  000698  D7FE               	bra	u7677
  5175  00069A  2F8C               	decfsz	??_runOp& (0+255),f,b
  5176  00069C  D7FC               	bra	u7677
  5177  00069E  2F8D               	decfsz	(??_runOp+1)& (0+255),f,b
  5178  0006A0  D7FA               	bra	u7677
  5179  0006A2  F000               	nop	
  5180  0006A4                     l6200:
  5181                           
  5182                           ;operationCode.c: 403:             *pNumPoles += 1;
  5183  0006A4  C084  FFD9         	movff	runOp@pNumPoles,fsr2l
  5184  0006A8  C085  FFDA         	movff	runOp@pNumPoles+1,fsr2h
  5185  0006AC  2ADF               	incf	indf2,f,c
  5186                           
  5187                           ;operationCode.c: 405:             procMode = 3;
  5188  0006AE  0E03               	movlw	3
  5189  0006B0  0100               	movlb	0	; () banked
  5190  0006B2  6FA4               	movwf	runOp@procMode& (0+255),b
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;operationCode.c: 406:             dispProcMode(procMode);
  5194  0006B4  0E03               	movlw	3
  5195  0006B6  EC01  F013         	call	_dispProcMode
  5196                           
  5197                           ;operationCode.c: 408:         } else if (procMode == 3){
  5198  0006BA  D4CC               	goto	l5930
  5199  0006BC                     l6206:
  5200                           
  5201                           ; BSR set to: 0
  5202  0006BC  0E03               	movlw	3
  5203  0006BE  19A4               	xorwf	runOp@procMode& (0+255),w,b
  5204  0006C0  A4D8               	btfss	status,2,c
  5205  0006C2  D050               	goto	l6252
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;operationCode.c: 415:             unsigned char distSinceBase = 0;
  5209  0006C4  0E00               	movlw	0
  5210  0006C6  6F96               	movwf	runOp@distSinceBase& (0+255),b
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;operationCode.c: 422:             LATCbits.LATC2 = 0;
  5214  0006C8  948B               	bcf	3979,2,c	;volatile
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;operationCode.c: 424:             LATAbits.LATA1 = 1; LATAbits.LATA3 = 0;
  5218  0006CA  8289               	bsf	3977,1,c	;volatile
  5219                           
  5220                           ; BSR set to: 0
  5221  0006CC  9689               	bcf	3977,3,c	;volatile
  5222  0006CE                     l775:
  5223                           
  5224                           ;operationCode.c: 426:             while(PORTCbits.RC0 == 0){
  5225  0006CE  A082               	btfss	3970,0,c	;volatile
  5226  0006D0  D7FE               	goto	l775
  5227                           
  5228                           ;operationCode.c: 430:             LATAbits.LATA1 = 0; LATAbits.LATA3 = 0;
  5229  0006D2  9289               	bcf	3977,1,c	;volatile
  5230  0006D4  9689               	bcf	3977,3,c	;volatile
  5231                           
  5232                           ;operationCode.c: 432:             LATAbits.LATA5 = 0; LATDbits.LATD1 = 1;
  5233  0006D6  9A89               	bcf	3977,5,c	;volatile
  5234  0006D8  828C               	bsf	3980,1,c	;volatile
  5235                           
  5236                           ;operationCode.c: 435:             unsigned char oldPosSig = PORTEbits.RE1;
  5237  0006DA  0E00               	movlw	0
  5238  0006DC  B284               	btfsc	3972,1,c	;volatile
  5239  0006DE  0E01               	movlw	1
  5240  0006E0  0100               	movlb	0	; () banked
  5241  0006E2  6F9F               	movwf	runOp@oldPosSig_1403& (0+255),b
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;operationCode.c: 438:             INT0IE = 0;
  5245  0006E4  98F2               	bcf	4082,4,c	;volatile
  5246  0006E6                     l6220:
  5247                           
  5248                           ; BSR set to: 0
  5249                           ;operationCode.c: 444:                 if (oldPosSig != PORTEbits.RE1){
  5250  0006E6  A284               	btfss	3972,1,c	;volatile
  5251  0006E8  D002               	goto	u6800
  5252  0006EA  0E01               	movlw	1
  5253  0006EC  D001               	goto	u6806
  5254  0006EE                     u6800:
  5255  0006EE  0E00               	movlw	0
  5256  0006F0                     u6806:
  5257  0006F0  199F               	xorwf	runOp@oldPosSig_1403& (0+255),w,b
  5258  0006F2  B4D8               	btfsc	status,2,c
  5259  0006F4  D7F8               	goto	l6220
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;operationCode.c: 445:                     _delay((unsigned long)((1000)*(10000000/40000
      +                          00.0)));
  5263  0006F6  0E04               	movlw	4
  5264  0006F8  0100               	movlb	0	; () banked
  5265  0006FA  6F8C               	movwf	??_runOp& (0+255),b
  5266  0006FC  0E3D               	movlw	61
  5267  0006FE                     u7687:
  5268  0006FE  2EE8               	decfsz	wreg,f,c
  5269  000700  D7FE               	bra	u7687
  5270  000702  2F8C               	decfsz	??_runOp& (0+255),f,b
  5271  000704  D7FC               	bra	u7687
  5272  000706  D000               	nop2	
  5273                           
  5274                           ;operationCode.c: 446:                     if (oldPosSig != PORTEbits.RE1){
  5275  000708  A284               	btfss	3972,1,c	;volatile
  5276  00070A  D002               	goto	u6820
  5277  00070C  0E01               	movlw	1
  5278  00070E  D001               	goto	u6826
  5279  000710                     u6820:
  5280  000710  0E00               	movlw	0
  5281  000712                     u6826:
  5282  000712  0100               	movlb	0	; () banked
  5283  000714  199F               	xorwf	runOp@oldPosSig_1403& (0+255),w,b
  5284  000716  B4D8               	btfsc	status,2,c
  5285  000718  D7E6               	goto	l6220
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;operationCode.c: 447:                         if (pos == 5){
  5289  00071A  0E05               	movlw	5
  5290  00071C  19A2               	xorwf	runOp@pos& (0+255),w,b
  5291  00071E  A4D8               	btfss	status,2,c
  5292  000720  D018               	goto	l6248
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;operationCode.c: 448:                             pos = 0;
  5296  000722  0E00               	movlw	0
  5297  000724  6FA2               	movwf	runOp@pos& (0+255),b
  5298                           
  5299                           ; BSR set to: 0
  5300                           ;operationCode.c: 449:                             posTurns += 1;
  5301  000726  2BA3               	incf	runOp@posTurns& (0+255),f,b
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;operationCode.c: 450:                             distSinceBase += 1;
  5305  000728  2B96               	incf	runOp@distSinceBase& (0+255),f,b
  5306                           
  5307                           ; BSR set to: 0
  5308                           ;operationCode.c: 453:                             if (distSinceBase == 2){
  5309  00072A  0E02               	movlw	2
  5310  00072C  1996               	xorwf	runOp@distSinceBase& (0+255),w,b
  5311  00072E  A4D8               	btfss	status,2,c
  5312  000730  D010               	goto	l6248
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;operationCode.c: 455:                                 INT0IE = 1;
  5316  000732  88F2               	bsf	4082,4,c	;volatile
  5317                           
  5318                           ;operationCode.c: 456:                                 INT1IF = 0;
  5319  000734  90F0               	bcf	4080,0,c	;volatile
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;operationCode.c: 457:                                 *pInt0P = 0;
  5323  000736  C088  FFD9         	movff	runOp@pInt0P,fsr2l
  5324  00073A  C089  FFDA         	movff	runOp@pInt0P+1,fsr2h
  5325  00073E  0E00               	movlw	0
  5326  000740  6EDF               	movwf	indf2,c
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;operationCode.c: 460:                                 LATAbits.LATA5 = 0; LATDbits.LATD
      +                          1 = 0;
  5330  000742  9A89               	bcf	3977,5,c	;volatile
  5331                           
  5332                           ; BSR set to: 0
  5333  000744  928C               	bcf	3980,1,c	;volatile
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;operationCode.c: 462:                                 procMode = 0;
  5337  000746  0E00               	movlw	0
  5338  000748  6FA4               	movwf	runOp@procMode& (0+255),b
  5339                           
  5340                           ; BSR set to: 0
  5341                           ;operationCode.c: 465:                                 dispProcMode(procMode);
  5342  00074A  0E00               	movlw	0
  5343  00074C  EC01  F013         	call	_dispProcMode
  5344                           
  5345                           ;operationCode.c: 467:                                 break;
  5346  000750  D481               	goto	l5930
  5347  000752                     l6248:
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;operationCode.c: 471:                         pos += 1;
  5351  000752  2BA2               	incf	runOp@pos& (0+255),f,b
  5352                           
  5353                           ; BSR set to: 0
  5354                           ;operationCode.c: 472:                         oldPosSig = oldPosSig ? 0 : 1 ;
  5355  000754  519F               	movf	runOp@oldPosSig_1403& (0+255),w,b
  5356  000756  A4D8               	btfss	status,2,c
  5357  000758  D002               	goto	u6860
  5358  00075A  0E01               	movlw	1
  5359  00075C  D001               	goto	u6870
  5360  00075E                     u6860:
  5361  00075E  0E00               	movlw	0
  5362  000760                     u6870:
  5363  000760  6F9F               	movwf	runOp@oldPosSig_1403& (0+255),b
  5364  000762  D7C1               	goto	l6220
  5365  000764                     l6252:
  5366                           
  5367                           ; BSR set to: 0
  5368  000764  0E04               	movlw	4
  5369  000766  19A4               	xorwf	runOp@procMode& (0+255),w,b
  5370  000768  A4D8               	btfss	status,2,c
  5371  00076A  D474               	goto	l5930
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;operationCode.c: 478:             LATAbits.LATA5 = 1; LATDbits.LATD1 = 0;
  5375  00076C  8A89               	bsf	3977,5,c	;volatile
  5376  00076E  928C               	bcf	3980,1,c	;volatile
  5377                           
  5378                           ;operationCode.c: 481:             LATCbits.LATC2 = 0;
  5379  000770  948B               	bcf	3979,2,c	;volatile
  5380                           
  5381                           ; BSR set to: 0
  5382                           ;operationCode.c: 484:             posTurns += 55;
  5383  000772  0E37               	movlw	55
  5384  000774  27A3               	addwf	runOp@posTurns& (0+255),f,b
  5385                           
  5386                           ; BSR set to: 0
  5387                           ;operationCode.c: 488:             unsigned char oldPosSig = PORTEbits.RE1;
  5388  000776  0E00               	movlw	0
  5389  000778  B284               	btfsc	3972,1,c	;volatile
  5390  00077A  0E01               	movlw	1
  5391  00077C  D027               	goto	u6950
  5392  00077E                     l6260:
  5393                           
  5394                           ; BSR set to: 0
  5395                           ;operationCode.c: 491:                 if (oldPosSig != PORTEbits.RE1){
  5396  00077E  A284               	btfss	3972,1,c	;volatile
  5397  000780  D002               	goto	u6890
  5398  000782  0E01               	movlw	1
  5399  000784  D001               	goto	u6896
  5400  000786                     u6890:
  5401  000786  0E00               	movlw	0
  5402  000788                     u6896:
  5403  000788  19A0               	xorwf	runOp@oldPosSig_1404& (0+255),w,b
  5404  00078A  B4D8               	btfsc	status,2,c
  5405  00078C  D020               	goto	l787
  5406                           
  5407                           ; BSR set to: 0
  5408                           ;operationCode.c: 492:                     _delay((unsigned long)((1000)*(10000000/40000
      +                          00.0)));
  5409  00078E  0E04               	movlw	4
  5410  000790  0100               	movlb	0	; () banked
  5411  000792  6F8C               	movwf	??_runOp& (0+255),b
  5412  000794  0E3D               	movlw	61
  5413  000796                     u7697:
  5414  000796  2EE8               	decfsz	wreg,f,c
  5415  000798  D7FE               	bra	u7697
  5416  00079A  2F8C               	decfsz	??_runOp& (0+255),f,b
  5417  00079C  D7FC               	bra	u7697
  5418  00079E  D000               	nop2	
  5419                           
  5420                           ;operationCode.c: 493:                     if (oldPosSig != PORTEbits.RE1){
  5421  0007A0  A284               	btfss	3972,1,c	;volatile
  5422  0007A2  D002               	goto	u6910
  5423  0007A4  0E01               	movlw	1
  5424  0007A6  D001               	goto	u6916
  5425  0007A8                     u6910:
  5426  0007A8  0E00               	movlw	0
  5427  0007AA                     u6916:
  5428  0007AA  0100               	movlb	0	; () banked
  5429  0007AC  19A0               	xorwf	runOp@oldPosSig_1404& (0+255),w,b
  5430  0007AE  B4D8               	btfsc	status,2,c
  5431  0007B0  D00E               	goto	l787
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;operationCode.c: 494:                         if (pos <= 00){
  5435  0007B2  51A2               	movf	runOp@pos& (0+255),w,b
  5436  0007B4  A4D8               	btfss	status,2,c
  5437  0007B6  D003               	goto	l6272
  5438                           
  5439                           ; BSR set to: 0
  5440                           ;operationCode.c: 495:                             posTurns-=1;
  5441  0007B8  07A3               	decf	runOp@posTurns& (0+255),f,b
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;operationCode.c: 496:                             pos = 5;
  5445  0007BA  0E05               	movlw	5
  5446  0007BC  6FA2               	movwf	runOp@pos& (0+255),b
  5447  0007BE                     l6272:
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;operationCode.c: 498:                         pos -= 1;
  5451  0007BE  07A2               	decf	runOp@pos& (0+255),f,b
  5452                           
  5453                           ;operationCode.c: 499:                         oldPosSig = oldPosSig ? 0 : 1 ;
  5454  0007C0  51A0               	movf	runOp@oldPosSig_1404& (0+255),w,b
  5455  0007C2  A4D8               	btfss	status,2,c
  5456  0007C4  D002               	goto	u6940
  5457  0007C6  0E01               	movlw	1
  5458  0007C8  D001               	goto	u6950
  5459  0007CA                     u6940:
  5460  0007CA  0E00               	movlw	0
  5461  0007CC                     u6950:
  5462  0007CC  6FA0               	movwf	runOp@oldPosSig_1404& (0+255),b
  5463  0007CE                     l787:
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;operationCode.c: 490:             while (posTurns > 0){
  5467  0007CE  51A3               	movf	runOp@posTurns& (0+255),w,b
  5468  0007D0  A4D8               	btfss	status,2,c
  5469  0007D2  D7D5               	goto	l6260
  5470                           
  5471                           ; BSR set to: 0
  5472                           ;operationCode.c: 503:             LATAbits.LATA5 = 0; LATDbits.LATD1 = 0;
  5473  0007D4  9A89               	bcf	3977,5,c	;volatile
  5474  0007D6  928C               	bcf	3980,1,c	;volatile
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;operationCode.c: 506:             unsigned char endTime[3];;operationCode.c: 508:      
      +                                 getTime(endTime);
  5478  0007D8  0E99               	movlw	low runOp@endTime
  5479  0007DA  6E04               	movwf	getTime@pTime,c
  5480  0007DC  0E00               	movlw	high runOp@endTime
  5481  0007DE  6E05               	movwf	getTime@pTime+1,c
  5482  0007E0  EC3D  F018         	call	_getTime	;wreg free
  5483                           
  5484                           ;operationCode.c: 510:             fixTime(endTime);
  5485  0007E4  0E99               	movlw	low runOp@endTime
  5486  0007E6  6E01               	movwf	fixTime@Time,c
  5487  0007E8  0E00               	movlw	high runOp@endTime
  5488  0007EA  6E02               	movwf	fixTime@Time+1,c
  5489  0007EC  ECFB  F015         	call	_fixTime	;wreg free
  5490                           
  5491                           ;operationCode.c: 514:             if (endTime[2] > time[2]){
  5492  0007F0  0100               	movlb	0	; () banked
  5493  0007F2  EE20 F002          	lfsr	2,2
  5494  0007F6  5180               	movf	runOp@time& (0+255),w,b
  5495  0007F8  26D9               	addwf	fsr2l,f,c
  5496  0007FA  5181               	movf	(runOp@time+1)& (0+255),w,b
  5497  0007FC  22DA               	addwfc	fsr2h,f,c
  5498  0007FE  519B               	movf	(runOp@endTime+2)& (0+255),w,b
  5499  000800  5CDE               	subwf	postinc2,w,c
  5500  000802  B0D8               	btfsc	status,0,c
  5501  000804  D009               	goto	l6284
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;operationCode.c: 521:                 endTime[2] -= 1;
  5505  000806  079B               	decf	(runOp@endTime+2)& (0+255),f,b
  5506                           
  5507                           ; BSR set to: 0
  5508                           ;operationCode.c: 522:                 time[2] += 60;
  5509  000808  EE20 F002          	lfsr	2,2
  5510  00080C  5180               	movf	runOp@time& (0+255),w,b
  5511  00080E  26D9               	addwf	fsr2l,f,c
  5512  000810  5181               	movf	(runOp@time+1)& (0+255),w,b
  5513  000812  22DA               	addwfc	fsr2h,f,c
  5514  000814  0E3C               	movlw	60
  5515  000816  26DF               	addwf	indf2,f,c
  5516  000818                     l6284:
  5517                           
  5518                           ; BSR set to: 0
  5519                           ;operationCode.c: 525:             *opTime = 60*endTime[1]+endTime[0] - 60*time[1] - tim
      +                          e[0];
  5520  000818  C080  FFD9         	movff	runOp@time,fsr2l
  5521  00081C  C081  FFDA         	movff	runOp@time+1,fsr2h
  5522  000820  50DF               	movf	indf2,w,c
  5523  000822  6F8C               	movwf	??_runOp& (0+255),b
  5524  000824  519A               	movf	(runOp@endTime+1)& (0+255),w,b
  5525  000826  0D3C               	mullw	60
  5526  000828  CFF3 F08D          	movff	prodl,??_runOp+1
  5527  00082C  EE20 F001          	lfsr	2,1
  5528  000830  5180               	movf	runOp@time& (0+255),w,b
  5529  000832  26D9               	addwf	fsr2l,f,c
  5530  000834  5181               	movf	(runOp@time+1)& (0+255),w,b
  5531  000836  22DA               	addwfc	fsr2h,f,c
  5532  000838  50DF               	movf	indf2,w,c
  5533  00083A  0DC4               	mullw	196
  5534  00083C  50F3               	movf	prodl,w,c
  5535  00083E  258D               	addwf	(??_runOp+1)& (0+255),w,b
  5536  000840  6F8E               	movwf	(??_runOp+2)& (0+255),b
  5537  000842  518C               	movf	??_runOp& (0+255),w,b
  5538  000844  5D8E               	subwf	(??_runOp+2)& (0+255),w,b
  5539  000846  2599               	addwf	runOp@endTime& (0+255),w,b
  5540  000848  C08A  FFD9         	movff	runOp@opTime,fsr2l
  5541  00084C  C08B  FFDA         	movff	runOp@opTime+1,fsr2h
  5542  000850  6EDF               	movwf	indf2,c
  5543  000852  0012               	return	
  5544  000854                     __end_of_runOp:
  5545                           	opt callstack 0
  5546                           
  5547 ;; *************** function _tireDeploy *****************
  5548 ;; Defined at:
  5549 ;;		line 513 in file "helpers.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;  amount          1    wreg     unsigned char 
  5552 ;;  firstTank       1    7[COMRAM] unsigned char 
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;  amount          1    8[COMRAM] unsigned char 
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  1    wreg      void 
  5557 ;; Registers used:
  5558 ;;		wreg, status,2, status,0, cstack
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5564 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5565 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5568 ;;Total ram usage:        2 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:    3
  5571 ;; This function calls:
  5572 ;;		_deployBoth
  5573 ;;		_deployLeft
  5574 ;;		_deployRight
  5575 ;; This function is called by:
  5576 ;;		_runOp
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           	psect	text9
  5581  0034DE                     __ptext9:
  5582                           	opt callstack 0
  5583  0034DE                     _tireDeploy:
  5584                           	opt callstack 26
  5585                           
  5586                           ; BSR set to: 0
  5587                           ;incstack = 0
  5588                           ;tireDeploy@amount stored from wreg
  5589  0034DE  6E09               	movwf	tireDeploy@amount,c
  5590                           
  5591                           ;helpers.c: 514:     if (amount == 0){
  5592  0034E0  5009               	movf	tireDeploy@amount,w,c
  5593  0034E2  B4D8               	btfsc	status,2,c
  5594  0034E4  0012               	return	
  5595  0034E6  0409               	decf	tireDeploy@amount,w,c
  5596  0034E8  A4D8               	btfss	status,2,c
  5597  0034EA  D009               	goto	l5450
  5598                           
  5599                           ;helpers.c: 521:         if (firstTank == 0){
  5600  0034EC  5008               	movf	tireDeploy@firstTank,w,c
  5601  0034EE  A4D8               	btfss	status,2,c
  5602  0034F0  D003               	goto	l5448
  5603                           
  5604                           ;helpers.c: 522:             deployLeft();
  5605  0034F2  EC10  F01B         	call	_deployLeft	;wreg free
  5606                           
  5607                           ;helpers.c: 523:         } else {
  5608  0034F6  0012               	return	
  5609  0034F8                     l5448:
  5610                           
  5611                           ;helpers.c: 524:             deployRight();
  5612  0034F8  EC0C  F01B         	call	_deployRight	;wreg free
  5613  0034FC  0012               	return	
  5614  0034FE                     l5450:
  5615                           
  5616                           ;helpers.c: 527:         deployBoth();
  5617  0034FE  ECF1  F01A         	call	_deployBoth	;wreg free
  5618  003502  0012               	return		;funcret
  5619  003504                     __end_of_tireDeploy:
  5620                           	opt callstack 0
  5621                           
  5622 ;; *************** function _deployRight *****************
  5623 ;; Defined at:
  5624 ;;		line 505 in file "helpers.c"
  5625 ;; Parameters:    Size  Location     Type
  5626 ;;		None
  5627 ;; Auto vars:     Size  Location     Type
  5628 ;;		None
  5629 ;; Return value:  Size  Location     Type
  5630 ;;                  1    wreg      void 
  5631 ;; Registers used:
  5632 ;;		wreg, status,2, status,0, cstack
  5633 ;; Tracked objects:
  5634 ;;		On entry : 0/0
  5635 ;;		On exit  : 0/0
  5636 ;;		Unchanged: 0/0
  5637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;Total ram usage:        0 bytes
  5643 ;; Hardware stack levels used:    1
  5644 ;; Hardware stack levels required when called:    2
  5645 ;; This function calls:
  5646 ;;		_runSMB
  5647 ;; This function is called by:
  5648 ;;		_tireDeploy
  5649 ;; This function uses a non-reentrant model
  5650 ;;
  5651                           
  5652                           	psect	text10
  5653  003618                     __ptext10:
  5654                           	opt callstack 0
  5655  003618                     _deployRight:
  5656                           	opt callstack 26
  5657                           
  5658                           ;helpers.c: 506:     runSMB(0);
  5659                           
  5660                           ;incstack = 0
  5661  003618  0E00               	movlw	0
  5662  00361A  EC76  F014         	call	_runSMB
  5663  00361E  0012               	return		;funcret
  5664  003620                     __end_of_deployRight:
  5665                           	opt callstack 0
  5666                           
  5667 ;; *************** function _deployLeft *****************
  5668 ;; Defined at:
  5669 ;;		line 501 in file "helpers.c"
  5670 ;; Parameters:    Size  Location     Type
  5671 ;;		None
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;		None
  5674 ;; Return value:  Size  Location     Type
  5675 ;;                  1    wreg      void 
  5676 ;; Registers used:
  5677 ;;		wreg, status,2, status,0, cstack
  5678 ;; Tracked objects:
  5679 ;;		On entry : 0/0
  5680 ;;		On exit  : 0/0
  5681 ;;		Unchanged: 0/0
  5682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5687 ;;Total ram usage:        0 bytes
  5688 ;; Hardware stack levels used:    1
  5689 ;; Hardware stack levels required when called:    2
  5690 ;; This function calls:
  5691 ;;		_runSMA
  5692 ;; This function is called by:
  5693 ;;		_tireDeploy
  5694 ;; This function uses a non-reentrant model
  5695 ;;
  5696                           
  5697                           	psect	text11
  5698  003620                     __ptext11:
  5699                           	opt callstack 0
  5700  003620                     _deployLeft:
  5701                           	opt callstack 26
  5702                           
  5703                           ;helpers.c: 502:     runSMA(1);
  5704                           
  5705                           ;incstack = 0
  5706  003620  0E01               	movlw	1
  5707  003622  EC44  F015         	call	_runSMA
  5708  003626  0012               	return		;funcret
  5709  003628                     __end_of_deployLeft:
  5710                           	opt callstack 0
  5711                           
  5712 ;; *************** function _deployBoth *****************
  5713 ;; Defined at:
  5714 ;;		line 509 in file "helpers.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;		None
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;		None
  5719 ;; Return value:  Size  Location     Type
  5720 ;;                  1    wreg      void 
  5721 ;; Registers used:
  5722 ;;		wreg, status,2, status,0, cstack
  5723 ;; Tracked objects:
  5724 ;;		On entry : 0/0
  5725 ;;		On exit  : 0/0
  5726 ;;		Unchanged: 0/0
  5727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5732 ;;Total ram usage:        0 bytes
  5733 ;; Hardware stack levels used:    1
  5734 ;; Hardware stack levels required when called:    2
  5735 ;; This function calls:
  5736 ;;		_runSMs
  5737 ;; This function is called by:
  5738 ;;		_tireDeploy
  5739 ;; This function uses a non-reentrant model
  5740 ;;
  5741                           
  5742                           	psect	text12
  5743  0035E2                     __ptext12:
  5744                           	opt callstack 0
  5745  0035E2                     _deployBoth:
  5746                           	opt callstack 26
  5747                           
  5748                           ;helpers.c: 510:     runSMs(1,0);
  5749                           
  5750                           ;incstack = 0
  5751  0035E2  0E00               	movlw	0
  5752  0035E4  6E01               	movwf	runSMs@dirB,c
  5753  0035E6  0E01               	movlw	1
  5754  0035E8  EC0F  F00E         	call	_runSMs
  5755  0035EC  0012               	return		;funcret
  5756  0035EE                     __end_of_deployBoth:
  5757                           	opt callstack 0
  5758                           
  5759 ;; *************** function _runSMs *****************
  5760 ;; Defined at:
  5761 ;;		line 345 in file "helpers.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;  dirA            1    wreg     unsigned char 
  5764 ;;  dirB            1    0[COMRAM] unsigned char 
  5765 ;; Auto vars:     Size  Location     Type
  5766 ;;  dirA            1    1[COMRAM] unsigned char 
  5767 ;;  ctr             2    2[COMRAM] unsigned int 
  5768 ;;  ticksB          1    6[COMRAM] unsigned char 
  5769 ;;  ticksA          1    5[COMRAM] unsigned char 
  5770 ;;  subCtr          1    4[COMRAM] unsigned char 
  5771 ;; Return value:  Size  Location     Type
  5772 ;;                  1    wreg      void 
  5773 ;; Registers used:
  5774 ;;		wreg, status,2, status,0
  5775 ;; Tracked objects:
  5776 ;;		On entry : 0/0
  5777 ;;		On exit  : 0/0
  5778 ;;		Unchanged: 0/0
  5779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5780 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5781 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5784 ;;Total ram usage:        7 bytes
  5785 ;; Hardware stack levels used:    1
  5786 ;; Hardware stack levels required when called:    1
  5787 ;; This function calls:
  5788 ;;		Nothing
  5789 ;; This function is called by:
  5790 ;;		_deployBoth
  5791 ;; This function uses a non-reentrant model
  5792 ;;
  5793                           
  5794                           	psect	text13
  5795  001C1E                     __ptext13:
  5796                           	opt callstack 0
  5797  001C1E                     _runSMs:
  5798                           	opt callstack 26
  5799                           
  5800                           ;incstack = 0
  5801                           ;runSMs@dirA stored from wreg
  5802  001C1E  6E02               	movwf	runSMs@dirA,c
  5803                           
  5804                           ;helpers.c: 348:     unsigned char subCtr = 0;
  5805  001C20  0E00               	movlw	0
  5806  001C22  6E05               	movwf	runSMs@subCtr,c
  5807                           
  5808                           ;helpers.c: 349:     unsigned int ctr = 0;
  5809  001C24  0E00               	movlw	0
  5810  001C26  6E04               	movwf	runSMs@ctr+1,c
  5811  001C28  0E00               	movlw	0
  5812  001C2A  6E03               	movwf	runSMs@ctr,c
  5813                           
  5814                           ;helpers.c: 350:     unsigned char ticksA = 0;
  5815  001C2C  0E00               	movlw	0
  5816  001C2E  6E06               	movwf	runSMs@ticksA,c
  5817                           
  5818                           ;helpers.c: 351:     unsigned char ticksB = 0;
  5819  001C30  0E00               	movlw	0
  5820  001C32  6E07               	movwf	runSMs@ticksB,c
  5821  001C34                     l5182:
  5822                           
  5823                           ;helpers.c: 353:         subCtr++;
  5824  001C34  2A05               	incf	runSMs@subCtr,f,c
  5825                           
  5826                           ;helpers.c: 354:         if (subCtr >= 40){
  5827  001C36  0E27               	movlw	39
  5828  001C38  6405               	cpfsgt	runSMs@subCtr,c
  5829  001C3A  D004               	goto	l5190
  5830                           
  5831                           ;helpers.c: 355:             subCtr = 0;
  5832  001C3C  0E00               	movlw	0
  5833  001C3E  6E05               	movwf	runSMs@subCtr,c
  5834                           
  5835                           ;helpers.c: 356:             ctr++;
  5836  001C40  4A03               	infsnz	runSMs@ctr,f,c
  5837  001C42  2A04               	incf	runSMs@ctr+1,f,c
  5838  001C44                     l5190:
  5839                           
  5840                           ;helpers.c: 358:         _delay((unsigned long)((0.7)*(10000000/4000.0)));
  5841  001C44  0EFA               	movlw	250
  5842  001C46                     u7707:
  5843  001C46  D000               	nop2	
  5844  001C48  D000               	nop2	
  5845  001C4A  2EE8               	decfsz	wreg,f,c
  5846  001C4C  D7FC               	bra	u7707
  5847                           
  5848                           ;helpers.c: 359:         if (dirA == 0){
  5849  001C4E  5002               	movf	runSMs@dirA,w,c
  5850  001C50  A4D8               	btfss	status,2,c
  5851  001C52  D002               	goto	l5196
  5852                           
  5853                           ;helpers.c: 360:             ticksA = (ticksA+1)%8;
  5854  001C54  2806               	incf	runSMs@ticksA,w,c
  5855  001C56  D001               	goto	L10
  5856  001C58                     l5196:
  5857                           
  5858                           ;helpers.c: 362:             ticksA = (ticksA-1)%8;
  5859  001C58  0406               	decf	runSMs@ticksA,w,c
  5860  001C5A                     L10:
  5861  001C5A  0B07               	andlw	7
  5862  001C5C  6E06               	movwf	runSMs@ticksA,c
  5863                           
  5864                           ;helpers.c: 364:         if (dirB == 0){
  5865  001C5E  5001               	movf	runSMs@dirB,w,c
  5866  001C60  A4D8               	btfss	status,2,c
  5867  001C62  D002               	goto	l5202
  5868                           
  5869                           ;helpers.c: 365:             ticksB = (ticksB+1)%8;
  5870  001C64  2807               	incf	runSMs@ticksB,w,c
  5871  001C66  D001               	goto	L11
  5872  001C68                     l5202:
  5873                           
  5874                           ;helpers.c: 367:             ticksB = (ticksB-1)%8;
  5875  001C68  0407               	decf	runSMs@ticksB,w,c
  5876  001C6A                     L11:
  5877  001C6A  0B07               	andlw	7
  5878  001C6C  6E07               	movwf	runSMs@ticksB,c
  5879                           
  5880                           ;helpers.c: 369:         if (ticksA == 0){
  5881  001C6E  5006               	movf	runSMs@ticksA,w,c
  5882  001C70  A4D8               	btfss	status,2,c
  5883  001C72  D006               	goto	l5210
  5884                           
  5885                           ;helpers.c: 370:             LATA = (LATA & 0xEA) | 0x01;
  5886  001C74  5089               	movf	3977,w,c	;volatile
  5887  001C76  0BEA               	andlw	234
  5888  001C78  0901               	iorlw	1
  5889  001C7A  D020               	goto	L18
  5890  001C7C                     l5208:
  5891                           
  5892                           ;helpers.c: 371:             LATEbits.LATE0 = 0;
  5893  001C7C  908D               	bcf	3981,0,c	;volatile
  5894                           
  5895                           ;helpers.c: 372:         } else if (ticksA == 1){
  5896  001C7E  D038               	goto	l552
  5897  001C80                     l5210:
  5898  001C80  0406               	decf	runSMs@ticksA,w,c
  5899  001C82  A4D8               	btfss	status,2,c
  5900  001C84  D004               	goto	l5216
  5901                           
  5902                           ;helpers.c: 373:             LATA = (LATA & 0xEA) | 0x05;
  5903  001C86  5089               	movf	3977,w,c	;volatile
  5904  001C88  0BEA               	andlw	234
  5905  001C8A  0905               	iorlw	5
  5906  001C8C  D017               	goto	L18
  5907  001C8E                     l5216:
  5908  001C8E  0E02               	movlw	2
  5909  001C90  1806               	xorwf	runSMs@ticksA,w,c
  5910  001C92  A4D8               	btfss	status,2,c
  5911  001C94  D004               	goto	l5222
  5912                           
  5913                           ;helpers.c: 376:             LATA = (LATA & 0xEA) | 0x04;
  5914  001C96  5089               	movf	3977,w,c	;volatile
  5915  001C98  0BEA               	andlw	234
  5916  001C9A  0904               	iorlw	4
  5917  001C9C  D00F               	goto	L18
  5918  001C9E                     l5222:
  5919  001C9E  0E03               	movlw	3
  5920  001CA0  1806               	xorwf	runSMs@ticksA,w,c
  5921  001CA2  A4D8               	btfss	status,2,c
  5922  001CA4  D004               	goto	l5228
  5923                           
  5924                           ;helpers.c: 379:             LATA = (LATA & 0xEA) | 0x14;
  5925  001CA6  5089               	movf	3977,w,c	;volatile
  5926  001CA8  0BEA               	andlw	234
  5927  001CAA  0914               	iorlw	20
  5928  001CAC  D007               	goto	L18
  5929  001CAE                     l5228:
  5930  001CAE  0E04               	movlw	4
  5931  001CB0  1806               	xorwf	runSMs@ticksA,w,c
  5932  001CB2  A4D8               	btfss	status,2,c
  5933  001CB4  D005               	goto	l5234
  5934                           
  5935                           ;helpers.c: 382:             LATA = (LATA & 0xEA) | 0x10;
  5936  001CB6  5089               	movf	3977,w,c	;volatile
  5937  001CB8  0BEA               	andlw	234
  5938  001CBA  0910               	iorlw	16
  5939  001CBC                     L18:
  5940  001CBC  6E89               	movwf	3977,c	;volatile
  5941  001CBE  D7DE               	goto	l5208
  5942  001CC0                     l5234:
  5943  001CC0  0E05               	movlw	5
  5944  001CC2  1806               	xorwf	runSMs@ticksA,w,c
  5945  001CC4  A4D8               	btfss	status,2,c
  5946  001CC6  D004               	goto	l5240
  5947                           
  5948                           ;helpers.c: 385:             LATA = (LATA & 0xEA) | 0x10;
  5949  001CC8  5089               	movf	3977,w,c	;volatile
  5950  001CCA  0BEA               	andlw	234
  5951  001CCC  0910               	iorlw	16
  5952  001CCE  D00E               	goto	L41
  5953  001CD0                     l5240:
  5954  001CD0  0E06               	movlw	6
  5955  001CD2  1806               	xorwf	runSMs@ticksA,w,c
  5956  001CD4  A4D8               	btfss	status,2,c
  5957  001CD6  D003               	goto	l5246
  5958                           
  5959                           ;helpers.c: 388:             LATA = (LATA & 0xEA) | 0x00;
  5960  001CD8  5089               	movf	3977,w,c	;volatile
  5961  001CDA  0BEA               	andlw	234
  5962  001CDC  D007               	goto	L41
  5963  001CDE                     l5246:
  5964  001CDE  0E07               	movlw	7
  5965  001CE0  1806               	xorwf	runSMs@ticksA,w,c
  5966  001CE2  A4D8               	btfss	status,2,c
  5967  001CE4  D005               	goto	l552
  5968                           
  5969                           ;helpers.c: 391:             LATA = (LATA & 0xEA) | 0x01;
  5970  001CE6  5089               	movf	3977,w,c	;volatile
  5971  001CE8  0BEA               	andlw	234
  5972  001CEA  0901               	iorlw	1
  5973  001CEC                     L41:
  5974  001CEC  6E89               	movwf	3977,c	;volatile
  5975                           
  5976                           ;helpers.c: 392:             LATEbits.LATE0 = 1;
  5977  001CEE  808D               	bsf	3981,0,c	;volatile
  5978  001CF0                     l552:
  5979                           
  5980                           ;helpers.c: 394:         if (ticksB == 0){
  5981  001CF0  5007               	movf	runSMs@ticksB,w,c
  5982  001CF2  A4D8               	btfss	status,2,c
  5983  001CF4  D006               	goto	l5258
  5984                           
  5985                           ;helpers.c: 395:             LATB = (LATB & 0xAB) | 0x04;
  5986  001CF6  508A               	movf	3978,w,c	;volatile
  5987  001CF8  0BAB               	andlw	171
  5988  001CFA  0904               	iorlw	4
  5989  001CFC  D020               	goto	L21
  5990  001CFE                     l5256:
  5991                           
  5992                           ;helpers.c: 396:             LATDbits.LATD0 = 0;
  5993  001CFE  908C               	bcf	3980,0,c	;volatile
  5994                           
  5995                           ;helpers.c: 397:         } else if (ticksB == 1){
  5996  001D00  D038               	goto	l567
  5997  001D02                     l5258:
  5998  001D02  0407               	decf	runSMs@ticksB,w,c
  5999  001D04  A4D8               	btfss	status,2,c
  6000  001D06  D004               	goto	l5264
  6001                           
  6002                           ;helpers.c: 398:             LATB = (LATB & 0xAB) | 0x14;
  6003  001D08  508A               	movf	3978,w,c	;volatile
  6004  001D0A  0BAB               	andlw	171
  6005  001D0C  0914               	iorlw	20
  6006  001D0E  D017               	goto	L21
  6007  001D10                     l5264:
  6008  001D10  0E02               	movlw	2
  6009  001D12  1807               	xorwf	runSMs@ticksB,w,c
  6010  001D14  A4D8               	btfss	status,2,c
  6011  001D16  D004               	goto	l5270
  6012                           
  6013                           ;helpers.c: 401:             LATB = (LATB & 0xAB) | 0x10;
  6014  001D18  508A               	movf	3978,w,c	;volatile
  6015  001D1A  0BAB               	andlw	171
  6016  001D1C  0910               	iorlw	16
  6017  001D1E  D00F               	goto	L21
  6018  001D20                     l5270:
  6019  001D20  0E03               	movlw	3
  6020  001D22  1807               	xorwf	runSMs@ticksB,w,c
  6021  001D24  A4D8               	btfss	status,2,c
  6022  001D26  D004               	goto	l5276
  6023                           
  6024                           ;helpers.c: 404:             LATB = (LATB & 0xAB) | 0x50;
  6025  001D28  508A               	movf	3978,w,c	;volatile
  6026  001D2A  0BAB               	andlw	171
  6027  001D2C  0950               	iorlw	80
  6028  001D2E  D007               	goto	L21
  6029  001D30                     l5276:
  6030  001D30  0E04               	movlw	4
  6031  001D32  1807               	xorwf	runSMs@ticksB,w,c
  6032  001D34  A4D8               	btfss	status,2,c
  6033  001D36  D005               	goto	l5282
  6034                           
  6035                           ;helpers.c: 407:             LATB = (LATB & 0xAB) | 0x40;
  6036  001D38  508A               	movf	3978,w,c	;volatile
  6037  001D3A  0BAB               	andlw	171
  6038  001D3C  0940               	iorlw	64
  6039  001D3E                     L21:
  6040  001D3E  6E8A               	movwf	3978,c	;volatile
  6041  001D40  D7DE               	goto	l5256
  6042  001D42                     l5282:
  6043  001D42  0E05               	movlw	5
  6044  001D44  1807               	xorwf	runSMs@ticksB,w,c
  6045  001D46  A4D8               	btfss	status,2,c
  6046  001D48  D004               	goto	l5288
  6047                           
  6048                           ;helpers.c: 410:             LATB = (LATB & 0xAB) | 0x40;
  6049  001D4A  508A               	movf	3978,w,c	;volatile
  6050  001D4C  0BAB               	andlw	171
  6051  001D4E  0940               	iorlw	64
  6052  001D50  D00E               	goto	L42
  6053  001D52                     l5288:
  6054  001D52  0E06               	movlw	6
  6055  001D54  1807               	xorwf	runSMs@ticksB,w,c
  6056  001D56  A4D8               	btfss	status,2,c
  6057  001D58  D003               	goto	l5294
  6058                           
  6059                           ;helpers.c: 413:             LATB = (LATB & 0xAB) | 0x00;
  6060  001D5A  508A               	movf	3978,w,c	;volatile
  6061  001D5C  0BAB               	andlw	171
  6062  001D5E  D007               	goto	L42
  6063  001D60                     l5294:
  6064  001D60  0E07               	movlw	7
  6065  001D62  1807               	xorwf	runSMs@ticksB,w,c
  6066  001D64  A4D8               	btfss	status,2,c
  6067  001D66  D005               	goto	l567
  6068                           
  6069                           ;helpers.c: 416:             LATB = (LATB & 0xAB) | 0x04;
  6070  001D68  508A               	movf	3978,w,c	;volatile
  6071  001D6A  0BAB               	andlw	171
  6072  001D6C  0904               	iorlw	4
  6073  001D6E                     L42:
  6074  001D6E  6E8A               	movwf	3978,c	;volatile
  6075                           
  6076                           ;helpers.c: 417:             LATDbits.LATD0 = 1;
  6077  001D70  808C               	bsf	3980,0,c	;volatile
  6078  001D72                     l567:
  6079                           
  6080                           ;helpers.c: 419:         if (ctr >= 197){
  6081  001D72  5004               	movf	runSMs@ctr+1,w,c
  6082  001D74  E105               	bnz	u5430
  6083  001D76  0EC5               	movlw	197
  6084  001D78  5C03               	subwf	runSMs@ctr,w,c
  6085  001D7A  B0D8               	btfsc	status,0,c
  6086  001D7C  0012               	return	
  6087  001D7E  D75A               	goto	l5182
  6088  001D80                     u5430:
  6089  001D80  0012               	return		;funcret
  6090  001D82                     __end_of_runSMs:
  6091                           	opt callstack 0
  6092                           
  6093 ;; *************** function _dispProcMode *****************
  6094 ;; Defined at:
  6095 ;;		line 82 in file "lcdCode.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;  mode            1    wreg     unsigned char 
  6098 ;; Auto vars:     Size  Location     Type
  6099 ;;  mode            1  124[COMRAM] unsigned char 
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  1    wreg      void 
  6102 ;; Registers used:
  6103 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6113 ;;Total ram usage:        2 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; Hardware stack levels required when called:   12
  6116 ;; This function calls:
  6117 ;;		_lcdInst
  6118 ;;		_printf
  6119 ;; This function is called by:
  6120 ;;		_runOp
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           	psect	text14
  6125  002602                     __ptext14:
  6126                           	opt callstack 0
  6127  002602                     _dispProcMode:
  6128                           	opt callstack 17
  6129                           
  6130                           ;incstack = 0
  6131                           ;dispProcMode@mode stored from wreg
  6132  002602  6E7D               	movwf	dispProcMode@mode,c
  6133                           
  6134                           ;lcdCode.c: 84:     { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.0)));};
  6135  002604  0E80               	movlw	128
  6136  002606  ECFD  F01A         	call	_lcdInst
  6137  00260A  0E07               	movlw	7
  6138  00260C  6E7C               	movwf	??_dispProcMode& (0+255),c
  6139  00260E  0E7D               	movlw	125
  6140  002610                     u7717:
  6141  002610  2EE8               	decfsz	wreg,f,c
  6142  002612  D7FE               	bra	u7717
  6143  002614  2E7C               	decfsz	??_dispProcMode& (0+255),f,c
  6144  002616  D7FC               	bra	u7717
  6145  002618  F000               	nop	
  6146                           
  6147                           ;lcdCode.c: 85:     printf("                ");
  6148  00261A  0E3C               	movlw	low STR_20
  6149  00261C  6E70               	movwf	printf@fmt,c
  6150  00261E  0EFD               	movlw	high STR_20
  6151  002620  6E71               	movwf	printf@fmt+1,c
  6152  002622  EC82  F01A         	call	_printf	;wreg free
  6153  002626  0EC0               	movlw	192
  6154  002628  ECFD  F01A         	call	_lcdInst
  6155                           
  6156                           ;lcdCode.c: 87:     printf("                ");
  6157  00262C  0E3C               	movlw	low STR_20
  6158  00262E  6E70               	movwf	printf@fmt,c
  6159  002630  0EFD               	movlw	high STR_20
  6160  002632  6E71               	movwf	printf@fmt+1,c
  6161  002634  EC82  F01A         	call	_printf	;wreg free
  6162                           
  6163                           ;lcdCode.c: 88:     if (mode == 0){
  6164  002638  507D               	movf	dispProcMode@mode,w,c
  6165  00263A  A4D8               	btfss	status,2,c
  6166  00263C  D013               	goto	l5384
  6167  00263E  0E90               	movlw	144
  6168  002640  ECFD  F01A         	call	_lcdInst
  6169                           
  6170                           ;lcdCode.c: 90:         printf("                ");
  6171  002644  0E3C               	movlw	low STR_20
  6172  002646  6E70               	movwf	printf@fmt,c
  6173  002648  0EFD               	movlw	high STR_20
  6174  00264A  6E71               	movwf	printf@fmt+1,c
  6175  00264C  EC82  F01A         	call	_printf	;wreg free
  6176  002650  0ED0               	movlw	208
  6177  002652  ECFD  F01A         	call	_lcdInst
  6178                           
  6179                           ;lcdCode.c: 92:         printf(" I AM GOING OUT ");
  6180  002656  0E19               	movlw	low STR_24
  6181  002658  6E70               	movwf	printf@fmt,c
  6182  00265A  0EFE               	movlw	high STR_24
  6183  00265C  6E71               	movwf	printf@fmt+1,c
  6184  00265E  EC82  F01A         	call	_printf	;wreg free
  6185                           
  6186                           ;lcdCode.c: 93:     } else if (mode == 1){
  6187  002662  0012               	return	
  6188  002664                     l5384:
  6189  002664  047D               	decf	dispProcMode@mode,w,c
  6190  002666  A4D8               	btfss	status,2,c
  6191  002668  D013               	goto	l5392
  6192  00266A  0E90               	movlw	144
  6193  00266C  ECFD  F01A         	call	_lcdInst
  6194                           
  6195                           ;lcdCode.c: 95:         printf("   BASE FOUND   ");
  6196  002670  0E80               	movlw	low STR_25
  6197  002672  6E70               	movwf	printf@fmt,c
  6198  002674  0EFD               	movlw	high STR_25
  6199  002676  6E71               	movwf	printf@fmt+1,c
  6200  002678  EC82  F01A         	call	_printf	;wreg free
  6201  00267C  0ED0               	movlw	208
  6202  00267E  ECFD  F01A         	call	_lcdInst
  6203                           
  6204                           ;lcdCode.c: 97:         printf("LOOKING FOR POLE");
  6205  002682  0E29               	movlw	low STR_26
  6206  002684  6E70               	movwf	printf@fmt,c
  6207  002686  0EFF               	movlw	high STR_26
  6208  002688  6E71               	movwf	printf@fmt+1,c
  6209  00268A  EC82  F01A         	call	_printf	;wreg free
  6210                           
  6211                           ;lcdCode.c: 98:     } else if (mode == 2){
  6212  00268E  0012               	return	
  6213  002690                     l5392:
  6214  002690  0E02               	movlw	2
  6215  002692  187D               	xorwf	dispProcMode@mode,w,c
  6216  002694  A4D8               	btfss	status,2,c
  6217  002696  D013               	goto	l5400
  6218  002698  0E90               	movlw	144
  6219  00269A  ECFD  F01A         	call	_lcdInst
  6220                           
  6221                           ;lcdCode.c: 100:         printf("   POLE FOUND   ");
  6222  00269E  0E6F               	movlw	low STR_27
  6223  0026A0  6E70               	movwf	printf@fmt,c
  6224  0026A2  0EFD               	movlw	high STR_27
  6225  0026A4  6E71               	movwf	printf@fmt+1,c
  6226  0026A6  EC82  F01A         	call	_printf	;wreg free
  6227  0026AA  0ED0               	movlw	208
  6228  0026AC  ECFD  F01A         	call	_lcdInst
  6229                           
  6230                           ;lcdCode.c: 102:         printf("DEPLOYING  TIRES");
  6231  0026B0  0E7E               	movlw	low STR_28
  6232  0026B2  6E70               	movwf	printf@fmt,c
  6233  0026B4  0EFF               	movlw	high STR_28
  6234  0026B6  6E71               	movwf	printf@fmt+1,c
  6235  0026B8  EC82  F01A         	call	_printf	;wreg free
  6236                           
  6237                           ;lcdCode.c: 103:     } else if (mode == 3){
  6238  0026BC  0012               	return	
  6239  0026BE                     l5400:
  6240  0026BE  0E03               	movlw	3
  6241  0026C0  187D               	xorwf	dispProcMode@mode,w,c
  6242  0026C2  A4D8               	btfss	status,2,c
  6243  0026C4  D013               	goto	l5408
  6244  0026C6  0E90               	movlw	144
  6245  0026C8  ECFD  F01A         	call	_lcdInst
  6246                           
  6247                           ;lcdCode.c: 105:         printf(" TIRES  ARRIVED ");
  6248  0026CC  0ED5               	movlw	low STR_29
  6249  0026CE  6E70               	movwf	printf@fmt,c
  6250  0026D0  0EFD               	movlw	high STR_29
  6251  0026D2  6E71               	movwf	printf@fmt+1,c
  6252  0026D4  EC82  F01A         	call	_printf	;wreg free
  6253  0026D8  0ED0               	movlw	208
  6254  0026DA  ECFD  F01A         	call	_lcdInst
  6255                           
  6256                           ;lcdCode.c: 107:         printf("MOVING + RAMP IN");
  6257  0026DE  0E6D               	movlw	low STR_30
  6258  0026E0  6E70               	movwf	printf@fmt,c
  6259  0026E2  0EFF               	movlw	high STR_30
  6260  0026E4  6E71               	movwf	printf@fmt+1,c
  6261  0026E6  EC82  F01A         	call	_printf	;wreg free
  6262                           
  6263                           ;lcdCode.c: 108:     } else {
  6264  0026EA  0012               	return	
  6265  0026EC                     l5408:
  6266  0026EC  0E90               	movlw	144
  6267  0026EE  ECFD  F01A         	call	_lcdInst
  6268                           
  6269                           ;lcdCode.c: 110:         printf("  MAX DISTANCE  ");
  6270  0026F2  0EA2               	movlw	low STR_31
  6271  0026F4  6E70               	movwf	printf@fmt,c
  6272  0026F6  0EFD               	movlw	high STR_31
  6273  0026F8  6E71               	movwf	printf@fmt+1,c
  6274  0026FA  EC82  F01A         	call	_printf	;wreg free
  6275  0026FE  0ED0               	movlw	208
  6276  002700  ECFD  F01A         	call	_lcdInst
  6277                           
  6278                           ;lcdCode.c: 112:         printf("I AM COMING HOME");
  6279  002704  0E3A               	movlw	low STR_32
  6280  002706  6E70               	movwf	printf@fmt,c
  6281  002708  0EFF               	movlw	high STR_32
  6282  00270A  6E71               	movwf	printf@fmt+1,c
  6283  00270C  EC82  F01A         	call	_printf	;wreg free
  6284  002710  0012               	return		;funcret
  6285  002712                     __end_of_dispProcMode:
  6286                           	opt callstack 0
  6287                           
  6288 ;; *************** function _initLCD *****************
  6289 ;; Defined at:
  6290 ;;		line 69 in file "lcd.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;		None
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;		None
  6295 ;; Return value:  Size  Location     Type
  6296 ;;                  1    wreg      void 
  6297 ;; Registers used:
  6298 ;;		wreg, status,2, status,0, cstack
  6299 ;; Tracked objects:
  6300 ;;		On entry : 0/0
  6301 ;;		On exit  : 0/0
  6302 ;;		Unchanged: 0/0
  6303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6306 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;Total ram usage:        1 bytes
  6309 ;; Hardware stack levels used:    1
  6310 ;; Hardware stack levels required when called:    5
  6311 ;; This function calls:
  6312 ;;		_lcdInst
  6313 ;;		_send_byte
  6314 ;;		_send_nibble
  6315 ;; This function is called by:
  6316 ;;		_main
  6317 ;; This function uses a non-reentrant model
  6318 ;;
  6319                           
  6320                           	psect	text15
  6321  003010                     __ptext15:
  6322                           	opt callstack 0
  6323  003010                     _initLCD:
  6324                           	opt callstack 25
  6325                           
  6326                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
  6327                           
  6328                           ;incstack = 0
  6329  003010  0E31               	movlw	49
  6330  003012  6E05               	movwf	??_initLCD& (0+255),c
  6331  003014  0EB2               	movlw	178
  6332  003016                     u7727:
  6333  003016  2EE8               	decfsz	wreg,f,c
  6334  003018  D7FE               	bra	u7727
  6335  00301A  2E05               	decfsz	??_initLCD& (0+255),f,c
  6336  00301C  D7FC               	bra	u7727
  6337  00301E  D000               	nop2	
  6338                           
  6339                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
  6340  003020  948C               	bcf	3980,2,c	;volatile
  6341                           
  6342                           ;lcd.c: 74:     send_nibble(0b0011);
  6343  003022  0E03               	movlw	3
  6344  003024  ECCA  F01A         	call	_send_nibble
  6345                           
  6346                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
  6347  003028  0E11               	movlw	17
  6348  00302A  6E05               	movwf	??_initLCD& (0+255),c
  6349  00302C  0E3A               	movlw	58
  6350  00302E                     u7737:
  6351  00302E  2EE8               	decfsz	wreg,f,c
  6352  003030  D7FE               	bra	u7737
  6353  003032  2E05               	decfsz	??_initLCD& (0+255),f,c
  6354  003034  D7FC               	bra	u7737
  6355  003036  D000               	nop2	
  6356                           
  6357                           ;lcd.c: 76:     send_nibble(0b0011);
  6358  003038  0E03               	movlw	3
  6359  00303A  ECCA  F01A         	call	_send_nibble
  6360                           
  6361                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  6362  00303E  0E7D               	movlw	125
  6363  003040                     u7747:
  6364  003040  2EE8               	decfsz	wreg,f,c
  6365  003042  D7FE               	bra	u7747
  6366                           
  6367                           ;lcd.c: 78:     send_byte(0b00110010);
  6368  003044  0E32               	movlw	50
  6369  003046  ECE8  F01A         	call	_send_byte
  6370                           
  6371                           ;lcd.c: 80:     send_byte(0b00101000);
  6372  00304A  0E28               	movlw	40
  6373  00304C  ECE8  F01A         	call	_send_byte
  6374                           
  6375                           ;lcd.c: 81:     send_byte(0b00001000);
  6376  003050  0E08               	movlw	8
  6377  003052  ECE8  F01A         	call	_send_byte
  6378                           
  6379                           ;lcd.c: 82:     send_byte(0b00000001);
  6380  003056  0E01               	movlw	1
  6381  003058  ECE8  F01A         	call	_send_byte
  6382                           
  6383                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
  6384  00305C  0E11               	movlw	17
  6385  00305E  6E05               	movwf	??_initLCD& (0+255),c
  6386  003060  0E3A               	movlw	58
  6387  003062                     u7757:
  6388  003062  2EE8               	decfsz	wreg,f,c
  6389  003064  D7FE               	bra	u7757
  6390  003066  2E05               	decfsz	??_initLCD& (0+255),f,c
  6391  003068  D7FC               	bra	u7757
  6392  00306A  D000               	nop2	
  6393                           
  6394                           ;lcd.c: 84:     send_byte(0b00000110);
  6395  00306C  0E06               	movlw	6
  6396  00306E  ECE8  F01A         	call	_send_byte
  6397                           
  6398                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  6399  003072  0E0F               	movlw	15
  6400  003074  ECFD  F01A         	call	_lcdInst
  6401  003078  0012               	return		;funcret
  6402  00307A                     __end_of_initLCD:
  6403                           	opt callstack 0
  6404                           
  6405 ;; *************** function _dispStateTrans *****************
  6406 ;; Defined at:
  6407 ;;		line 54 in file "helpers.c"
  6408 ;; Parameters:    Size  Location     Type
  6409 ;;  keypress        1    wreg     unsigned char 
  6410 ;;  dispMode        1    6[COMRAM] unsigned char 
  6411 ;;  startTime       2    7[COMRAM] PTR unsigned char 
  6412 ;;		 -> main@startTimeInt(3), 
  6413 ;;  pStepDir1       2    9[COMRAM] PTR unsigned char 
  6414 ;;		 -> main@direction1(1), 
  6415 ;;  pStepDir2       2   11[COMRAM] PTR unsigned char 
  6416 ;;		 -> main@direction2(1), 
  6417 ;;  pLogToShow      2   13[COMRAM] PTR unsigned char 
  6418 ;;		 -> logToShow(1), 
  6419 ;;  lastWritten     1   15[COMRAM] unsigned char 
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;  keypress        1   17[COMRAM] unsigned char 
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      unsigned char 
  6424 ;; Registers used:
  6425 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6431 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6435 ;;Total ram usage:       12 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    4
  6438 ;; This function calls:
  6439 ;;		_fixTime
  6440 ;;		_getTime
  6441 ;;		_read_EEPROM
  6442 ;;		_runSMA
  6443 ;;		_runSMB
  6444 ;; This function is called by:
  6445 ;;		_main
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           	psect	text16
  6450  001670                     __ptext16:
  6451                           	opt callstack 0
  6452  001670                     _dispStateTrans:
  6453                           	opt callstack 26
  6454                           
  6455                           ;incstack = 0
  6456                           ;dispStateTrans@keypress stored from wreg
  6457  001670  6E12               	movwf	dispStateTrans@keypress,c
  6458                           
  6459                           ;helpers.c: 54: unsigned char dispStateTrans(unsigned char keypress, unsigned char dispM
      +                          ode,;helpers.c: 55:         unsigned char startTime[3], unsigned char *pStepDir1, unsign
      +                          ed char;helpers.c: 56:         *pStepDir2, unsigned char* pLogToShow, unsigned char last
      +                          Written){;helpers.c: 58:     if (dispMode == 0){
  6460  001672  5007               	movf	dispStateTrans@dispMode,w,c
  6461  001674  A4D8               	btfss	status,2,c
  6462  001676  D051               	goto	l5674
  6463                           
  6464                           ;helpers.c: 60:         if (keypress == 0x0D){
  6465  001678  0E0D               	movlw	13
  6466  00167A  1812               	xorwf	dispStateTrans@keypress,w,c
  6467  00167C  A4D8               	btfss	status,2,c
  6468  00167E  D00E               	goto	l5618
  6469                           
  6470                           ;helpers.c: 62:             getTime(startTime);
  6471  001680  C008  F004         	movff	dispStateTrans@startTime,getTime@pTime
  6472  001684  C009  F005         	movff	dispStateTrans@startTime+1,getTime@pTime+1
  6473  001688  EC3D  F018         	call	_getTime	;wreg free
  6474                           
  6475                           ;helpers.c: 63:             fixTime(startTime);
  6476  00168C  C008  F001         	movff	dispStateTrans@startTime,fixTime@Time
  6477  001690  C009  F002         	movff	dispStateTrans@startTime+1,fixTime@Time+1
  6478  001694  ECFB  F015         	call	_fixTime	;wreg free
  6479                           
  6480                           ;helpers.c: 64:             return 1;
  6481  001698  0E01               	movlw	1
  6482  00169A  0012               	return	
  6483  00169C                     l5618:
  6484  00169C  0E0F               	movlw	15
  6485  00169E  1812               	xorwf	dispStateTrans@keypress,w,c
  6486  0016A0  A4D8               	btfss	status,2,c
  6487  0016A2  D002               	goto	l5626
  6488  0016A4                     u5750:
  6489                           
  6490                           ;helpers.c: 66:             return 7;
  6491  0016A4  0E07               	movlw	7
  6492  0016A6  0012               	return	
  6493  0016A8                     l5626:
  6494  0016A8  0E09               	movlw	9
  6495  0016AA  1812               	xorwf	dispStateTrans@keypress,w,c
  6496  0016AC  A4D8               	btfss	status,2,c
  6497  0016AE  D002               	goto	l5634
  6498  0016B0                     u5760:
  6499                           
  6500                           ;helpers.c: 68:             return 8;
  6501  0016B0  0E08               	movlw	8
  6502  0016B2  0012               	return	
  6503  0016B4                     l5634:
  6504  0016B4  0E03               	movlw	3
  6505  0016B6  1812               	xorwf	dispStateTrans@keypress,w,c
  6506  0016B8  A4D8               	btfss	status,2,c
  6507  0016BA  D008               	goto	l5644
  6508                           
  6509                           ;helpers.c: 70:             LATAbits.LATA1 = 1; LATAbits.LATA3 = 0;
  6510  0016BC  8289               	bsf	3977,1,c	;volatile
  6511  0016BE  9689               	bcf	3977,3,c	;volatile
  6512  0016C0                     l393:
  6513                           
  6514                           ;helpers.c: 71:             while (PORTCbits.RC0 == 0){
  6515  0016C0  A082               	btfss	3970,0,c	;volatile
  6516  0016C2  D7FE               	goto	l393
  6517                           
  6518                           ;helpers.c: 74:             LATAbits.LATA1 = 0; LATAbits.LATA3 = 0;
  6519  0016C4  9289               	bcf	3977,1,c	;volatile
  6520  0016C6  9689               	bcf	3977,3,c	;volatile
  6521  0016C8                     l5638:
  6522                           
  6523                           ;helpers.c: 76:             return 0;
  6524  0016C8  0E00               	movlw	0
  6525  0016CA  0012               	return	
  6526  0016CC                     l5644:
  6527  0016CC  0E07               	movlw	7
  6528  0016CE  1812               	xorwf	dispStateTrans@keypress,w,c
  6529  0016D0  A4D8               	btfss	status,2,c
  6530  0016D2  D00E               	goto	l5658
  6531                           
  6532                           ;helpers.c: 79:             LATAbits.LATA1 = 0; LATAbits.LATA3 = 1;
  6533  0016D4  9289               	bcf	3977,1,c	;volatile
  6534  0016D6  8689               	bsf	3977,3,c	;volatile
  6535                           
  6536                           ;helpers.c: 80:             _delay((unsigned long)((50)*(10000000/4000.0)));
  6537  0016D8  0EA3               	movlw	163
  6538  0016DA  6E11               	movwf	??_dispStateTrans& (0+255),c
  6539  0016DC  0E55               	movlw	85
  6540  0016DE                     u7767:
  6541  0016DE  2EE8               	decfsz	wreg,f,c
  6542  0016E0  D7FE               	bra	u7767
  6543  0016E2  2E11               	decfsz	??_dispStateTrans& (0+255),f,c
  6544  0016E4  D7FC               	bra	u7767
  6545  0016E6  F000               	nop	
  6546                           
  6547                           ;helpers.c: 81:             LATAbits.LATA1 = 0; LATAbits.LATA3 = 0;
  6548  0016E8  9289               	bcf	3977,1,c	;volatile
  6549  0016EA  9689               	bcf	3977,3,c	;volatile
  6550                           
  6551                           ;helpers.c: 83:             return 0;
  6552  0016EC  0E00               	movlw	0
  6553  0016EE  0012               	return	
  6554  0016F0                     l5658:
  6555  0016F0  0E02               	movlw	2
  6556  0016F2  1812               	xorwf	dispStateTrans@keypress,w,c
  6557  0016F4  A4D8               	btfss	status,2,c
  6558  0016F6  D004               	goto	l5662
  6559                           
  6560                           ;helpers.c: 87:             runSMA(0);
  6561  0016F8  0E00               	movlw	0
  6562  0016FA  EC44  F015         	call	_runSMA
  6563                           
  6564                           ;helpers.c: 89:         } else if (keypress == 0x06){
  6565  0016FE  D08D               	goto	l5804
  6566  001700                     l5662:
  6567  001700  0E06               	movlw	6
  6568  001702  1812               	xorwf	dispStateTrans@keypress,w,c
  6569  001704  A4D8               	btfss	status,2,c
  6570  001706  D089               	goto	l5804
  6571                           
  6572                           ;helpers.c: 91:             LATCbits.LATC5 = 1;
  6573  001708  8A8B               	bsf	3979,5,c	;volatile
  6574                           
  6575                           ;helpers.c: 93:             TRISB = 0b10101011;
  6576  00170A  0EAB               	movlw	171
  6577  00170C  6E93               	movwf	3987,c	;volatile
  6578                           
  6579                           ;helpers.c: 95:             runSMB(1);
  6580  00170E  0E01               	movlw	1
  6581  001710  EC76  F014         	call	_runSMB
  6582                           
  6583                           ;helpers.c: 97:             TRISB = 0b11111111;
  6584  001714  6893               	setf	3987,c	;volatile
  6585                           
  6586                           ;helpers.c: 99:             LATCbits.LATC5 = 0;
  6587  001716  9A8B               	bcf	3979,5,c	;volatile
  6588  001718  D080               	goto	l5804
  6589  00171A                     l5674:
  6590  00171A  0E02               	movlw	2
  6591  00171C  1807               	xorwf	dispStateTrans@dispMode,w,c
  6592  00171E  A4D8               	btfss	status,2,c
  6593  001720  D011               	goto	l5698
  6594                           
  6595                           ;helpers.c: 103:         if (keypress == 0x08){
  6596  001722  0E08               	movlw	8
  6597  001724  1812               	xorwf	dispStateTrans@keypress,w,c
  6598  001726  A4D8               	btfss	status,2,c
  6599  001728  D002               	goto	l5684
  6600                           
  6601                           ;helpers.c: 104:             return 3;
  6602  00172A  0E03               	movlw	3
  6603  00172C  0012               	return	
  6604  00172E                     l5684:
  6605  00172E  0E0A               	movlw	10
  6606  001730  1812               	xorwf	dispStateTrans@keypress,w,c
  6607  001732  A4D8               	btfss	status,2,c
  6608  001734  D002               	goto	l5692
  6609                           
  6610                           ;helpers.c: 106:             return 4;
  6611  001736  0E04               	movlw	4
  6612  001738  0012               	return	
  6613  00173A                     l5692:
  6614  00173A  0E0D               	movlw	13
  6615  00173C  1812               	xorwf	dispStateTrans@keypress,w,c
  6616  00173E  B4D8               	btfsc	status,2,c
  6617  001740  D7C3               	goto	l5638
  6618  001742  D06B               	goto	l5804
  6619  001744                     l5698:
  6620  001744  0E03               	movlw	3
  6621  001746  1807               	xorwf	dispStateTrans@dispMode,w,c
  6622  001748  A4D8               	btfss	status,2,c
  6623  00174A  D006               	goto	l5706
  6624                           
  6625                           ;helpers.c: 112:         if (keypress == 0x0D){
  6626  00174C  0E0D               	movlw	13
  6627  00174E  1812               	xorwf	dispStateTrans@keypress,w,c
  6628  001750  A4D8               	btfss	status,2,c
  6629  001752  D063               	goto	l5804
  6630  001754                     u5870:
  6631                           
  6632                           ;helpers.c: 113:             return 2;
  6633  001754  0E02               	movlw	2
  6634  001756  0012               	return	
  6635  001758                     l5706:
  6636  001758  0E04               	movlw	4
  6637  00175A  1807               	xorwf	dispStateTrans@dispMode,w,c
  6638  00175C  A4D8               	btfss	status,2,c
  6639  00175E  D010               	goto	l5730
  6640                           
  6641                           ;helpers.c: 117:         if (keypress == 0xC){
  6642  001760  0E0C               	movlw	12
  6643  001762  1812               	xorwf	dispStateTrans@keypress,w,c
  6644  001764  A4D8               	btfss	status,2,c
  6645  001766  D002               	goto	l5716
  6646                           
  6647                           ;helpers.c: 118:             return 5;
  6648  001768  0E05               	movlw	5
  6649  00176A  0012               	return	
  6650  00176C                     l5716:
  6651  00176C  0E0D               	movlw	13
  6652  00176E  1812               	xorwf	dispStateTrans@keypress,w,c
  6653  001770  B4D8               	btfsc	status,2,c
  6654  001772  D7F0               	goto	u5870
  6655  001774  0E0E               	movlw	14
  6656  001776  1812               	xorwf	dispStateTrans@keypress,w,c
  6657  001778  A4D8               	btfss	status,2,c
  6658  00177A  D04F               	goto	l5804
  6659                           
  6660                           ;helpers.c: 122:             return 6;
  6661  00177C  0E06               	movlw	6
  6662  00177E  0012               	return	
  6663  001780                     l5730:
  6664  001780  0E07               	movlw	7
  6665  001782  1807               	xorwf	dispStateTrans@dispMode,w,c
  6666  001784  A4D8               	btfss	status,2,c
  6667  001786  D025               	goto	l5756
  6668                           
  6669                           ;helpers.c: 126:         if (keypress == 0x00){
  6670  001788  5012               	movf	dispStateTrans@keypress,w,c
  6671  00178A  A4D8               	btfss	status,2,c
  6672  00178C  D00F               	goto	l5742
  6673                           
  6674                           ;helpers.c: 127:             (*pStepDir1) = ((*pStepDir1) == 0) ? 1:0;
  6675  00178E  C00A  FFD9         	movff	dispStateTrans@pStepDir1,fsr2l
  6676  001792  C00B  FFDA         	movff	dispStateTrans@pStepDir1+1,fsr2h
  6677  001796  50DF               	movf	indf2,w,c
  6678  001798  A4D8               	btfss	status,2,c
  6679  00179A  D002               	goto	u5940
  6680  00179C  0E01               	movlw	1
  6681  00179E  D001               	goto	u5950
  6682  0017A0                     u5940:
  6683  0017A0  0E00               	movlw	0
  6684  0017A2                     u5950:
  6685  0017A2  C00A  FFD9         	movff	dispStateTrans@pStepDir1,fsr2l
  6686  0017A6  C00B  FFDA         	movff	dispStateTrans@pStepDir1+1,fsr2h
  6687  0017AA  D011               	goto	L23
  6688  0017AC                     l5742:
  6689  0017AC  0412               	decf	dispStateTrans@keypress,w,c
  6690  0017AE  A4D8               	btfss	status,2,c
  6691  0017B0  D78B               	goto	l5638
  6692                           
  6693                           ;helpers.c: 130:             (*pStepDir2) = ((*pStepDir2) == 0) ? 1:0;
  6694  0017B2  C00C  FFD9         	movff	dispStateTrans@pStepDir2,fsr2l
  6695  0017B6  C00D  FFDA         	movff	dispStateTrans@pStepDir2+1,fsr2h
  6696  0017BA  50DF               	movf	indf2,w,c
  6697  0017BC  A4D8               	btfss	status,2,c
  6698  0017BE  D002               	goto	u5970
  6699  0017C0  0E01               	movlw	1
  6700  0017C2  D001               	goto	u5980
  6701  0017C4                     u5970:
  6702  0017C4  0E00               	movlw	0
  6703  0017C6                     u5980:
  6704  0017C6  C00C  FFD9         	movff	dispStateTrans@pStepDir2,fsr2l
  6705  0017CA  C00D  FFDA         	movff	dispStateTrans@pStepDir2+1,fsr2h
  6706  0017CE                     L23:
  6707  0017CE  6EDF               	movwf	indf2,c
  6708  0017D0  D769               	goto	u5750
  6709  0017D2                     l5756:
  6710  0017D2  0E08               	movlw	8
  6711  0017D4  1807               	xorwf	dispStateTrans@dispMode,w,c
  6712  0017D6  A4D8               	btfss	status,2,c
  6713  0017D8  D022               	goto	l5810
  6714                           
  6715                           ;helpers.c: 137:         if (keypress == 0){
  6716  0017DA  5012               	movf	dispStateTrans@keypress,w,c
  6717  0017DC  A4D8               	btfss	status,2,c
  6718  0017DE  D00A               	goto	l5768
  6719                           
  6720                           ;helpers.c: 138:             *pLogToShow = (lastWritten + 4)%4;
  6721  0017E0  5010               	movf	dispStateTrans@lastWritten,w,c
  6722  0017E2  0F04               	addlw	4
  6723  0017E4                     L22:
  6724  0017E4  0B03               	andlw	3
  6725  0017E6  C00E  FFD9         	movff	dispStateTrans@pLogToShow,fsr2l
  6726  0017EA  C00F  FFDA         	movff	dispStateTrans@pLogToShow+1,fsr2h
  6727  0017EE  6EDF               	movwf	indf2,c
  6728  0017F0                     l5762:
  6729                           
  6730                           ;helpers.c: 139:             return 9;
  6731  0017F0  0E09               	movlw	9
  6732  0017F2  0012               	return	
  6733  0017F4                     l5768:
  6734  0017F4  0412               	decf	dispStateTrans@keypress,w,c
  6735  0017F6  A4D8               	btfss	status,2,c
  6736  0017F8  D003               	goto	l5778
  6737                           
  6738                           ;helpers.c: 141:             *pLogToShow = (lastWritten + 3)%4;
  6739  0017FA  5010               	movf	dispStateTrans@lastWritten,w,c
  6740  0017FC  0F03               	addlw	3
  6741  0017FE  D7F2               	goto	L22
  6742  001800                     l5778:
  6743  001800  0E02               	movlw	2
  6744  001802  1812               	xorwf	dispStateTrans@keypress,w,c
  6745  001804  A4D8               	btfss	status,2,c
  6746  001806  D003               	goto	l5788
  6747                           
  6748                           ;helpers.c: 144:             *pLogToShow = (lastWritten + 2)%4;
  6749  001808  5010               	movf	dispStateTrans@lastWritten,w,c
  6750  00180A  0F02               	addlw	2
  6751  00180C  D7EB               	goto	L22
  6752  00180E                     l5788:
  6753  00180E  0E04               	movlw	4
  6754  001810  1812               	xorwf	dispStateTrans@keypress,w,c
  6755  001812  A4D8               	btfss	status,2,c
  6756  001814  D792               	goto	l5692
  6757                           
  6758                           ;helpers.c: 147:             *pLogToShow = (lastWritten + 1)%4;
  6759  001816  2810               	incf	dispStateTrans@lastWritten,w,c
  6760  001818  D7E5               	goto	L22
  6761  00181A                     l5804:
  6762                           
  6763                           ;helpers.c: 153:         return dispMode;
  6764  00181A  5007               	movf	dispStateTrans@dispMode,w,c
  6765  00181C  0012               	return	
  6766  00181E                     l5810:
  6767  00181E  0E09               	movlw	9
  6768  001820  1807               	xorwf	dispStateTrans@dispMode,w,c
  6769  001822  A4D8               	btfss	status,2,c
  6770  001824  D01E               	goto	l5840
  6771                           
  6772                           ;helpers.c: 155:         if (keypress == 0x08){
  6773  001826  0E08               	movlw	8
  6774  001828  1812               	xorwf	dispStateTrans@keypress,w,c
  6775  00182A  A4D8               	btfss	status,2,c
  6776  00182C  D002               	goto	l5820
  6777                           
  6778                           ;helpers.c: 156:             return 10;
  6779  00182E  0E0A               	movlw	10
  6780  001830  0012               	return	
  6781  001832                     l5820:
  6782  001832  0E0A               	movlw	10
  6783  001834  1812               	xorwf	dispStateTrans@keypress,w,c
  6784  001836  A4D8               	btfss	status,2,c
  6785  001838  D002               	goto	l5828
  6786                           
  6787                           ;helpers.c: 158:             return 11;
  6788  00183A  0E0B               	movlw	11
  6789  00183C  0012               	return	
  6790  00183E                     l5828:
  6791  00183E  0E0D               	movlw	13
  6792  001840  1812               	xorwf	dispStateTrans@keypress,w,c
  6793  001842  A4D8               	btfss	status,2,c
  6794  001844  D7EA               	goto	l5804
  6795                           
  6796                           ;helpers.c: 160:             if (read_EEPROM((*pLogToShow)*64+1) > 128){
  6797  001846  C00E  FFD9         	movff	dispStateTrans@pLogToShow,fsr2l
  6798  00184A  C00F  FFDA         	movff	dispStateTrans@pLogToShow+1,fsr2h
  6799  00184E  50DF               	movf	indf2,w,c
  6800  001850  0D40               	mullw	64
  6801  001852  28F3               	incf	prodl,w,c
  6802  001854  ECD5  F01A         	call	_read_EEPROM
  6803  001858  6E11               	movwf	??_dispStateTrans& (0+255),c
  6804  00185A  0E80               	movlw	128
  6805  00185C  6411               	cpfsgt	??_dispStateTrans,c
  6806  00185E  D734               	goto	l5638
  6807  001860  D727               	goto	u5760
  6808  001862                     l5840:
  6809  001862  0E0A               	movlw	10
  6810  001864  1807               	xorwf	dispStateTrans@dispMode,w,c
  6811  001866  A4D8               	btfss	status,2,c
  6812  001868  D005               	goto	l5848
  6813                           
  6814                           ;helpers.c: 168:         if (keypress == 0x0D){
  6815  00186A  0E0D               	movlw	13
  6816  00186C  1812               	xorwf	dispStateTrans@keypress,w,c
  6817  00186E  B4D8               	btfsc	status,2,c
  6818  001870  D7BF               	goto	l5762
  6819  001872  D7D3               	goto	l5804
  6820  001874                     l5848:
  6821  001874  0E0B               	movlw	11
  6822  001876  1807               	xorwf	dispStateTrans@dispMode,w,c
  6823  001878  A4D8               	btfss	status,2,c
  6824  00187A  D7CF               	goto	l5804
  6825                           
  6826                           ;helpers.c: 173:         if (keypress == 0xC){
  6827  00187C  0E0C               	movlw	12
  6828  00187E  1812               	xorwf	dispStateTrans@keypress,w,c
  6829  001880  A4D8               	btfss	status,2,c
  6830  001882  D002               	goto	l5858
  6831                           
  6832                           ;helpers.c: 174:             return 12;
  6833  001884  0E0C               	movlw	12
  6834  001886  0012               	return	
  6835  001888                     l5858:
  6836  001888  0E0D               	movlw	13
  6837  00188A  1812               	xorwf	dispStateTrans@keypress,w,c
  6838  00188C  B4D8               	btfsc	status,2,c
  6839  00188E  D7B0               	goto	l5762
  6840  001890  0E0E               	movlw	14
  6841  001892  1812               	xorwf	dispStateTrans@keypress,w,c
  6842  001894  A4D8               	btfss	status,2,c
  6843  001896  D7C1               	goto	l5804
  6844                           
  6845                           ;helpers.c: 178:             return 13;
  6846  001898  0E0D               	movlw	13
  6847  00189A  0012               	return		;funcret
  6848  00189C                     __end_of_dispStateTrans:
  6849                           	opt callstack 0
  6850                           
  6851 ;; *************** function _runSMB *****************
  6852 ;; Defined at:
  6853 ;;		line 296 in file "helpers.c"
  6854 ;; Parameters:    Size  Location     Type
  6855 ;;  dirB            1    wreg     unsigned char 
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;  dirB            1    0[COMRAM] unsigned char 
  6858 ;;  ctr             2    1[COMRAM] unsigned int 
  6859 ;;  ticksB          1    4[COMRAM] unsigned char 
  6860 ;;  subCtr          1    3[COMRAM] unsigned char 
  6861 ;; Return value:  Size  Location     Type
  6862 ;;                  1    wreg      void 
  6863 ;; Registers used:
  6864 ;;		wreg, status,2, status,0
  6865 ;; Tracked objects:
  6866 ;;		On entry : 0/0
  6867 ;;		On exit  : 0/0
  6868 ;;		Unchanged: 0/0
  6869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6871 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6873 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6874 ;;Total ram usage:        5 bytes
  6875 ;; Hardware stack levels used:    1
  6876 ;; Hardware stack levels required when called:    1
  6877 ;; This function calls:
  6878 ;;		Nothing
  6879 ;; This function is called by:
  6880 ;;		_dispStateTrans
  6881 ;;		_deployRight
  6882 ;; This function uses a non-reentrant model
  6883 ;;
  6884                           
  6885                           	psect	text17
  6886  0028EC                     __ptext17:
  6887                           	opt callstack 0
  6888  0028EC                     _runSMB:
  6889                           	opt callstack 26
  6890                           
  6891                           ;incstack = 0
  6892                           ;runSMB@dirB stored from wreg
  6893  0028EC  6E01               	movwf	runSMB@dirB,c
  6894                           
  6895                           ;helpers.c: 299:     unsigned char subCtr = 0;
  6896  0028EE  0E00               	movlw	0
  6897  0028F0  6E04               	movwf	runSMB@subCtr,c
  6898                           
  6899                           ;helpers.c: 300:     unsigned int ctr = 0;
  6900  0028F2  0E00               	movlw	0
  6901  0028F4  6E03               	movwf	runSMB@ctr+1,c
  6902  0028F6  0E00               	movlw	0
  6903  0028F8  6E02               	movwf	runSMB@ctr,c
  6904                           
  6905                           ;helpers.c: 301:     unsigned char ticksB = 0;
  6906  0028FA  0E00               	movlw	0
  6907  0028FC  6E05               	movwf	runSMB@ticksB,c
  6908  0028FE                     l5114:
  6909                           
  6910                           ;helpers.c: 303:         subCtr++;
  6911  0028FE  2A04               	incf	runSMB@subCtr,f,c
  6912                           
  6913                           ;helpers.c: 304:         if (subCtr >= 40){
  6914  002900  0E27               	movlw	39
  6915  002902  6404               	cpfsgt	runSMB@subCtr,c
  6916  002904  D004               	goto	l5122
  6917                           
  6918                           ;helpers.c: 305:             subCtr = 0;
  6919  002906  0E00               	movlw	0
  6920  002908  6E04               	movwf	runSMB@subCtr,c
  6921                           
  6922                           ;helpers.c: 306:             ctr++;
  6923  00290A  4A02               	infsnz	runSMB@ctr,f,c
  6924  00290C  2A03               	incf	runSMB@ctr+1,f,c
  6925  00290E                     l5122:
  6926                           
  6927                           ;helpers.c: 308:         _delay((unsigned long)((0.7)*(10000000/4000.0)));
  6928  00290E  0EFA               	movlw	250
  6929  002910                     u7777:
  6930  002910  D000               	nop2	
  6931  002912  D000               	nop2	
  6932  002914  2EE8               	decfsz	wreg,f,c
  6933  002916  D7FC               	bra	u7777
  6934                           
  6935                           ;helpers.c: 309:         if (dirB == 0){
  6936  002918  5001               	movf	runSMB@dirB,w,c
  6937  00291A  A4D8               	btfss	status,2,c
  6938  00291C  D002               	goto	l5128
  6939                           
  6940                           ;helpers.c: 310:             ticksB = (ticksB+1)%8;
  6941  00291E  2805               	incf	runSMB@ticksB,w,c
  6942  002920  D001               	goto	L24
  6943  002922                     l5128:
  6944                           
  6945                           ;helpers.c: 312:             ticksB = (ticksB-1)%8;
  6946  002922  0405               	decf	runSMB@ticksB,w,c
  6947  002924                     L24:
  6948  002924  0B07               	andlw	7
  6949  002926  6E05               	movwf	runSMB@ticksB,c
  6950                           
  6951                           ;helpers.c: 314:         if (ticksB == 0){
  6952  002928  5005               	movf	runSMB@ticksB,w,c
  6953  00292A  A4D8               	btfss	status,2,c
  6954  00292C  D006               	goto	l5136
  6955                           
  6956                           ;helpers.c: 315:             LATB = (LATB & 0xAB) | 0x04;
  6957  00292E  508A               	movf	3978,w,c	;volatile
  6958  002930  0BAB               	andlw	171
  6959  002932  0904               	iorlw	4
  6960  002934  D020               	goto	L29
  6961  002936                     l5134:
  6962                           
  6963                           ;helpers.c: 316:             LATDbits.LATD0 = 0;
  6964  002936  908C               	bcf	3980,0,c	;volatile
  6965                           
  6966                           ;helpers.c: 317:         } else if (ticksB == 1){
  6967  002938  D038               	goto	l525
  6968  00293A                     l5136:
  6969  00293A  0405               	decf	runSMB@ticksB,w,c
  6970  00293C  A4D8               	btfss	status,2,c
  6971  00293E  D004               	goto	l5142
  6972                           
  6973                           ;helpers.c: 318:             LATB = (LATB & 0xAB) | 0x14;
  6974  002940  508A               	movf	3978,w,c	;volatile
  6975  002942  0BAB               	andlw	171
  6976  002944  0914               	iorlw	20
  6977  002946  D017               	goto	L29
  6978  002948                     l5142:
  6979  002948  0E02               	movlw	2
  6980  00294A  1805               	xorwf	runSMB@ticksB,w,c
  6981  00294C  A4D8               	btfss	status,2,c
  6982  00294E  D004               	goto	l5148
  6983                           
  6984                           ;helpers.c: 321:             LATB = (LATB & 0xAB) | 0x10;
  6985  002950  508A               	movf	3978,w,c	;volatile
  6986  002952  0BAB               	andlw	171
  6987  002954  0910               	iorlw	16
  6988  002956  D00F               	goto	L29
  6989  002958                     l5148:
  6990  002958  0E03               	movlw	3
  6991  00295A  1805               	xorwf	runSMB@ticksB,w,c
  6992  00295C  A4D8               	btfss	status,2,c
  6993  00295E  D004               	goto	l5154
  6994                           
  6995                           ;helpers.c: 324:             LATB = (LATB & 0xAB) | 0x50;
  6996  002960  508A               	movf	3978,w,c	;volatile
  6997  002962  0BAB               	andlw	171
  6998  002964  0950               	iorlw	80
  6999  002966  D007               	goto	L29
  7000  002968                     l5154:
  7001  002968  0E04               	movlw	4
  7002  00296A  1805               	xorwf	runSMB@ticksB,w,c
  7003  00296C  A4D8               	btfss	status,2,c
  7004  00296E  D005               	goto	l5160
  7005                           
  7006                           ;helpers.c: 327:             LATB = (LATB & 0xAB) | 0x40;
  7007  002970  508A               	movf	3978,w,c	;volatile
  7008  002972  0BAB               	andlw	171
  7009  002974  0940               	iorlw	64
  7010  002976                     L29:
  7011  002976  6E8A               	movwf	3978,c	;volatile
  7012  002978  D7DE               	goto	l5134
  7013  00297A                     l5160:
  7014  00297A  0E05               	movlw	5
  7015  00297C  1805               	xorwf	runSMB@ticksB,w,c
  7016  00297E  A4D8               	btfss	status,2,c
  7017  002980  D004               	goto	l5166
  7018                           
  7019                           ;helpers.c: 330:             LATB = (LATB & 0xAB) | 0x40;
  7020  002982  508A               	movf	3978,w,c	;volatile
  7021  002984  0BAB               	andlw	171
  7022  002986  0940               	iorlw	64
  7023  002988  D00E               	goto	L43
  7024  00298A                     l5166:
  7025  00298A  0E06               	movlw	6
  7026  00298C  1805               	xorwf	runSMB@ticksB,w,c
  7027  00298E  A4D8               	btfss	status,2,c
  7028  002990  D003               	goto	l5172
  7029                           
  7030                           ;helpers.c: 333:             LATB = (LATB & 0xAB) | 0x00;
  7031  002992  508A               	movf	3978,w,c	;volatile
  7032  002994  0BAB               	andlw	171
  7033  002996  D007               	goto	L43
  7034  002998                     l5172:
  7035  002998  0E07               	movlw	7
  7036  00299A  1805               	xorwf	runSMB@ticksB,w,c
  7037  00299C  A4D8               	btfss	status,2,c
  7038  00299E  D005               	goto	l525
  7039                           
  7040                           ;helpers.c: 336:             LATB = (LATB & 0xAB) | 0x04;
  7041  0029A0  508A               	movf	3978,w,c	;volatile
  7042  0029A2  0BAB               	andlw	171
  7043  0029A4  0904               	iorlw	4
  7044  0029A6                     L43:
  7045  0029A6  6E8A               	movwf	3978,c	;volatile
  7046                           
  7047                           ;helpers.c: 337:             LATDbits.LATD0 = 1;
  7048  0029A8  808C               	bsf	3980,0,c	;volatile
  7049  0029AA                     l525:
  7050                           
  7051                           ;helpers.c: 339:         if (ctr >= 197){
  7052  0029AA  5003               	movf	runSMB@ctr+1,w,c
  7053  0029AC  E105               	bnz	u5230
  7054  0029AE  0EC5               	movlw	197
  7055  0029B0  5C02               	subwf	runSMB@ctr,w,c
  7056  0029B2  B0D8               	btfsc	status,0,c
  7057  0029B4  0012               	return	
  7058  0029B6  D7A3               	goto	l5114
  7059  0029B8                     u5230:
  7060  0029B8  0012               	return		;funcret
  7061  0029BA                     __end_of_runSMB:
  7062                           	opt callstack 0
  7063                           
  7064 ;; *************** function _runSMA *****************
  7065 ;; Defined at:
  7066 ;;		line 247 in file "helpers.c"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;  dirA            1    wreg     unsigned char 
  7069 ;; Auto vars:     Size  Location     Type
  7070 ;;  dirA            1    0[COMRAM] unsigned char 
  7071 ;;  ticksA          1    3[COMRAM] unsigned char 
  7072 ;;  subCtr          1    2[COMRAM] unsigned char 
  7073 ;;  ctr             1    1[COMRAM] unsigned char 
  7074 ;; Return value:  Size  Location     Type
  7075 ;;                  1    wreg      void 
  7076 ;; Registers used:
  7077 ;;		wreg, status,2, status,0
  7078 ;; Tracked objects:
  7079 ;;		On entry : 0/0
  7080 ;;		On exit  : 0/0
  7081 ;;		Unchanged: 0/0
  7082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7087 ;;Total ram usage:        4 bytes
  7088 ;; Hardware stack levels used:    1
  7089 ;; Hardware stack levels required when called:    1
  7090 ;; This function calls:
  7091 ;;		Nothing
  7092 ;; This function is called by:
  7093 ;;		_dispStateTrans
  7094 ;;		_deployLeft
  7095 ;; This function uses a non-reentrant model
  7096 ;;
  7097                           
  7098                           	psect	text18
  7099  002A88                     __ptext18:
  7100                           	opt callstack 0
  7101  002A88                     _runSMA:
  7102                           	opt callstack 26
  7103                           
  7104                           ;incstack = 0
  7105                           ;runSMA@dirA stored from wreg
  7106  002A88  6E01               	movwf	runSMA@dirA,c
  7107                           
  7108                           ;helpers.c: 250:     unsigned char subCtr = 0;
  7109  002A8A  0E00               	movlw	0
  7110  002A8C  6E03               	movwf	runSMA@subCtr,c
  7111                           
  7112                           ;helpers.c: 251:     unsigned char ctr = 0;
  7113  002A8E  0E00               	movlw	0
  7114  002A90  6E02               	movwf	runSMA@ctr,c
  7115                           
  7116                           ;helpers.c: 252:     unsigned char ticksA = 0;
  7117  002A92  0E00               	movlw	0
  7118  002A94  6E04               	movwf	runSMA@ticksA,c
  7119  002A96                     l5046:
  7120                           
  7121                           ;helpers.c: 254:         subCtr++;
  7122  002A96  2A03               	incf	runSMA@subCtr,f,c
  7123                           
  7124                           ;helpers.c: 255:         if (subCtr >= 40){
  7125  002A98  0E27               	movlw	39
  7126  002A9A  6403               	cpfsgt	runSMA@subCtr,c
  7127  002A9C  D003               	goto	l5054
  7128                           
  7129                           ;helpers.c: 256:             subCtr = 0;
  7130  002A9E  0E00               	movlw	0
  7131  002AA0  6E03               	movwf	runSMA@subCtr,c
  7132                           
  7133                           ;helpers.c: 257:             ctr++;
  7134  002AA2  2A02               	incf	runSMA@ctr,f,c
  7135  002AA4                     l5054:
  7136                           
  7137                           ;helpers.c: 259:         _delay((unsigned long)((0.7)*(10000000/4000.0)));
  7138  002AA4  0EFA               	movlw	250
  7139  002AA6                     u7787:
  7140  002AA6  D000               	nop2	
  7141  002AA8  D000               	nop2	
  7142  002AAA  2EE8               	decfsz	wreg,f,c
  7143  002AAC  D7FC               	bra	u7787
  7144                           
  7145                           ;helpers.c: 260:         if (dirA == 0){
  7146  002AAE  5001               	movf	runSMA@dirA,w,c
  7147  002AB0  A4D8               	btfss	status,2,c
  7148  002AB2  D002               	goto	l5060
  7149                           
  7150                           ;helpers.c: 261:             ticksA = (ticksA+1)%8;
  7151  002AB4  2804               	incf	runSMA@ticksA,w,c
  7152  002AB6  D001               	goto	L30
  7153  002AB8                     l5060:
  7154                           
  7155                           ;helpers.c: 263:             ticksA = (ticksA-1)%8;
  7156  002AB8  0404               	decf	runSMA@ticksA,w,c
  7157  002ABA                     L30:
  7158  002ABA  0B07               	andlw	7
  7159  002ABC  6E04               	movwf	runSMA@ticksA,c
  7160                           
  7161                           ;helpers.c: 265:         if (ticksA == 0){
  7162  002ABE  5004               	movf	runSMA@ticksA,w,c
  7163  002AC0  A4D8               	btfss	status,2,c
  7164  002AC2  D006               	goto	l5068
  7165                           
  7166                           ;helpers.c: 266:             LATA = (LATA & 0xEA) | 0x01;
  7167  002AC4  5089               	movf	3977,w,c	;volatile
  7168  002AC6  0BEA               	andlw	234
  7169  002AC8  0901               	iorlw	1
  7170  002ACA  D020               	goto	L35
  7171  002ACC                     l5066:
  7172                           
  7173                           ;helpers.c: 267:             LATEbits.LATE0 = 0;
  7174  002ACC  908D               	bcf	3981,0,c	;volatile
  7175                           
  7176                           ;helpers.c: 268:         } else if (ticksA == 1){
  7177  002ACE  D038               	goto	l500
  7178  002AD0                     l5068:
  7179  002AD0  0404               	decf	runSMA@ticksA,w,c
  7180  002AD2  A4D8               	btfss	status,2,c
  7181  002AD4  D004               	goto	l5074
  7182                           
  7183                           ;helpers.c: 269:             LATA = (LATA & 0xEA) | 0x05;
  7184  002AD6  5089               	movf	3977,w,c	;volatile
  7185  002AD8  0BEA               	andlw	234
  7186  002ADA  0905               	iorlw	5
  7187  002ADC  D017               	goto	L35
  7188  002ADE                     l5074:
  7189  002ADE  0E02               	movlw	2
  7190  002AE0  1804               	xorwf	runSMA@ticksA,w,c
  7191  002AE2  A4D8               	btfss	status,2,c
  7192  002AE4  D004               	goto	l5080
  7193                           
  7194                           ;helpers.c: 272:             LATA = (LATA & 0xEA) | 0x04;
  7195  002AE6  5089               	movf	3977,w,c	;volatile
  7196  002AE8  0BEA               	andlw	234
  7197  002AEA  0904               	iorlw	4
  7198  002AEC  D00F               	goto	L35
  7199  002AEE                     l5080:
  7200  002AEE  0E03               	movlw	3
  7201  002AF0  1804               	xorwf	runSMA@ticksA,w,c
  7202  002AF2  A4D8               	btfss	status,2,c
  7203  002AF4  D004               	goto	l5086
  7204                           
  7205                           ;helpers.c: 275:             LATA = (LATA & 0xEA) | 0x14;
  7206  002AF6  5089               	movf	3977,w,c	;volatile
  7207  002AF8  0BEA               	andlw	234
  7208  002AFA  0914               	iorlw	20
  7209  002AFC  D007               	goto	L35
  7210  002AFE                     l5086:
  7211  002AFE  0E04               	movlw	4
  7212  002B00  1804               	xorwf	runSMA@ticksA,w,c
  7213  002B02  A4D8               	btfss	status,2,c
  7214  002B04  D005               	goto	l5092
  7215                           
  7216                           ;helpers.c: 278:             LATA = (LATA & 0xEA) | 0x10;
  7217  002B06  5089               	movf	3977,w,c	;volatile
  7218  002B08  0BEA               	andlw	234
  7219  002B0A  0910               	iorlw	16
  7220  002B0C                     L35:
  7221  002B0C  6E89               	movwf	3977,c	;volatile
  7222  002B0E  D7DE               	goto	l5066
  7223  002B10                     l5092:
  7224  002B10  0E05               	movlw	5
  7225  002B12  1804               	xorwf	runSMA@ticksA,w,c
  7226  002B14  A4D8               	btfss	status,2,c
  7227  002B16  D004               	goto	l5098
  7228                           
  7229                           ;helpers.c: 281:             LATA = (LATA & 0xEA) | 0x10;
  7230  002B18  5089               	movf	3977,w,c	;volatile
  7231  002B1A  0BEA               	andlw	234
  7232  002B1C  0910               	iorlw	16
  7233  002B1E  D00E               	goto	L44
  7234  002B20                     l5098:
  7235  002B20  0E06               	movlw	6
  7236  002B22  1804               	xorwf	runSMA@ticksA,w,c
  7237  002B24  A4D8               	btfss	status,2,c
  7238  002B26  D003               	goto	l5104
  7239                           
  7240                           ;helpers.c: 284:             LATA = (LATA & 0xEA) | 0x00;
  7241  002B28  5089               	movf	3977,w,c	;volatile
  7242  002B2A  0BEA               	andlw	234
  7243  002B2C  D007               	goto	L44
  7244  002B2E                     l5104:
  7245  002B2E  0E07               	movlw	7
  7246  002B30  1804               	xorwf	runSMA@ticksA,w,c
  7247  002B32  A4D8               	btfss	status,2,c
  7248  002B34  D005               	goto	l500
  7249                           
  7250                           ;helpers.c: 287:             LATA = (LATA & 0xEA) | 0x01;
  7251  002B36  5089               	movf	3977,w,c	;volatile
  7252  002B38  0BEA               	andlw	234
  7253  002B3A  0901               	iorlw	1
  7254  002B3C                     L44:
  7255  002B3C  6E89               	movwf	3977,c	;volatile
  7256                           
  7257                           ;helpers.c: 288:             LATEbits.LATE0 = 1;
  7258  002B3E  808D               	bsf	3981,0,c	;volatile
  7259  002B40                     l500:
  7260                           
  7261                           ;helpers.c: 290:         if (ctr >= 197){
  7262  002B40  0EC4               	movlw	196
  7263  002B42  6402               	cpfsgt	runSMA@ctr,c
  7264  002B44  D7A8               	goto	l5046
  7265  002B46  0012               	return	
  7266  002B48                     __end_of_runSMA:
  7267                           	opt callstack 0
  7268                           
  7269 ;; *************** function _getTime *****************
  7270 ;; Defined at:
  7271 ;;		line 12 in file "helpers.c"
  7272 ;; Parameters:    Size  Location     Type
  7273 ;;  pTime           2    3[COMRAM] PTR unsigned char 
  7274 ;;		 -> runOp@endTime(3), main@startTimeInt(3), 
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;  i               1    5[COMRAM] unsigned char 
  7277 ;; Return value:  Size  Location     Type
  7278 ;;                  1    wreg      void 
  7279 ;; Registers used:
  7280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7281 ;; Tracked objects:
  7282 ;;		On entry : 0/0
  7283 ;;		On exit  : 0/0
  7284 ;;		Unchanged: 0/0
  7285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7286 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7287 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7289 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7290 ;;Total ram usage:        3 bytes
  7291 ;; Hardware stack levels used:    1
  7292 ;; Hardware stack levels required when called:    3
  7293 ;; This function calls:
  7294 ;;		_I2C_Master_Read
  7295 ;;		_I2C_Master_Start
  7296 ;;		_I2C_Master_Stop
  7297 ;;		_I2C_Master_Write
  7298 ;; This function is called by:
  7299 ;;		_dispStateTrans
  7300 ;;		_runOp
  7301 ;; This function uses a non-reentrant model
  7302 ;;
  7303                           
  7304                           	psect	text19
  7305  00307A                     __ptext19:
  7306                           	opt callstack 0
  7307  00307A                     _getTime:
  7308                           	opt callstack 26
  7309                           
  7310                           ;helpers.c: 14:     I2C_Master_Start();
  7311                           
  7312                           ;incstack = 0
  7313  00307A  EC18  F01B         	call	_I2C_Master_Start	;wreg free
  7314                           
  7315                           ;helpers.c: 15:     I2C_Master_Write(0b11010000);
  7316  00307E  0E00               	movlw	0
  7317  003080  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  7318  003082  0ED0               	movlw	208
  7319  003084  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  7320  003086  EC03  F01B         	call	_I2C_Master_Write	;wreg free
  7321                           
  7322                           ;helpers.c: 16:     I2C_Master_Write(0x00);
  7323  00308A  0E00               	movlw	0
  7324  00308C  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  7325  00308E  0E00               	movlw	0
  7326  003090  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  7327  003092  EC03  F01B         	call	_I2C_Master_Write	;wreg free
  7328                           
  7329                           ;helpers.c: 17:     I2C_Master_Stop();
  7330  003096  EC14  F01B         	call	_I2C_Master_Stop	;wreg free
  7331                           
  7332                           ;helpers.c: 20:     I2C_Master_Start();
  7333  00309A  EC18  F01B         	call	_I2C_Master_Start	;wreg free
  7334                           
  7335                           ;helpers.c: 21:     I2C_Master_Write(0b11010001);
  7336  00309E  0E00               	movlw	0
  7337  0030A0  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  7338  0030A2  0ED1               	movlw	209
  7339  0030A4  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  7340  0030A6  EC03  F01B         	call	_I2C_Master_Write	;wreg free
  7341                           
  7342                           ;helpers.c: 22:     for(unsigned char i = 0; i < 2; i++){
  7343  0030AA  0E00               	movlw	0
  7344  0030AC  6E06               	movwf	getTime@i,c
  7345  0030AE                     l5426:
  7346                           
  7347                           ;helpers.c: 23:         pTime[i] = I2C_Master_Read(0);
  7348  0030AE  5006               	movf	getTime@i,w,c
  7349  0030B0  2404               	addwf	getTime@pTime,w,c
  7350  0030B2  6ED9               	movwf	fsr2l,c
  7351  0030B4  0E00               	movlw	0
  7352  0030B6  2005               	addwfc	getTime@pTime+1,w,c
  7353  0030B8  6EDA               	movwf	fsr2h,c
  7354  0030BA  0E00               	movlw	0
  7355  0030BC  ECA8  F01A         	call	_I2C_Master_Read
  7356  0030C0  6EDF               	movwf	indf2,c
  7357                           
  7358                           ;helpers.c: 24:     }
  7359  0030C2  2A06               	incf	getTime@i,f,c
  7360  0030C4  0E01               	movlw	1
  7361  0030C6  6406               	cpfsgt	getTime@i,c
  7362  0030C8  D7F2               	goto	l5426
  7363                           
  7364                           ;helpers.c: 25:     pTime[2] = I2C_Master_Read(1);
  7365  0030CA  EE20 F002          	lfsr	2,2
  7366  0030CE  5004               	movf	getTime@pTime,w,c
  7367  0030D0  26D9               	addwf	fsr2l,f,c
  7368  0030D2  5005               	movf	getTime@pTime+1,w,c
  7369  0030D4  22DA               	addwfc	fsr2h,f,c
  7370  0030D6  0E01               	movlw	1
  7371  0030D8  ECA8  F01A         	call	_I2C_Master_Read
  7372  0030DC  6EDF               	movwf	indf2,c
  7373                           
  7374                           ;helpers.c: 27:     I2C_Master_Stop();
  7375  0030DE  EC14  F01B         	call	_I2C_Master_Stop	;wreg free
  7376  0030E2  0012               	return		;funcret
  7377  0030E4                     __end_of_getTime:
  7378                           	opt callstack 0
  7379                           
  7380 ;; *************** function _I2C_Master_Write *****************
  7381 ;; Defined at:
  7382 ;;		line 70 in file "I2C.c"
  7383 ;; Parameters:    Size  Location     Type
  7384 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  7385 ;; Auto vars:     Size  Location     Type
  7386 ;;		None
  7387 ;; Return value:  Size  Location     Type
  7388 ;;                  1    wreg      void 
  7389 ;; Registers used:
  7390 ;;		wreg, status,2, status,0, cstack
  7391 ;; Tracked objects:
  7392 ;;		On entry : 0/0
  7393 ;;		On exit  : 0/0
  7394 ;;		Unchanged: 0/0
  7395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7396 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7399 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7400 ;;Total ram usage:        2 bytes
  7401 ;; Hardware stack levels used:    1
  7402 ;; Hardware stack levels required when called:    2
  7403 ;; This function calls:
  7404 ;;		_I2C_Master_Wait
  7405 ;; This function is called by:
  7406 ;;		_showTime
  7407 ;;		_getTime
  7408 ;; This function uses a non-reentrant model
  7409 ;;
  7410                           
  7411                           	psect	text20
  7412  003606                     __ptext20:
  7413                           	opt callstack 0
  7414  003606                     _I2C_Master_Write:
  7415                           	opt callstack 27
  7416                           
  7417                           ;I2C.c: 71:     I2C_Master_Wait();
  7418                           
  7419                           ;incstack = 0
  7420  003606  ECDF  F01A         	call	_I2C_Master_Wait	;wreg free
  7421                           
  7422                           ;I2C.c: 74:     SSPBUF = byteToWrite;
  7423  00360A  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  7424  00360E  0012               	return		;funcret
  7425  003610                     __end_of_I2C_Master_Write:
  7426                           	opt callstack 0
  7427                           
  7428 ;; *************** function _I2C_Master_Stop *****************
  7429 ;; Defined at:
  7430 ;;		line 65 in file "I2C.c"
  7431 ;; Parameters:    Size  Location     Type
  7432 ;;		None
  7433 ;; Auto vars:     Size  Location     Type
  7434 ;;		None
  7435 ;; Return value:  Size  Location     Type
  7436 ;;                  1    wreg      void 
  7437 ;; Registers used:
  7438 ;;		wreg, status,2, status,0, cstack
  7439 ;; Tracked objects:
  7440 ;;		On entry : 0/0
  7441 ;;		On exit  : 0/0
  7442 ;;		Unchanged: 0/0
  7443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7448 ;;Total ram usage:        0 bytes
  7449 ;; Hardware stack levels used:    1
  7450 ;; Hardware stack levels required when called:    2
  7451 ;; This function calls:
  7452 ;;		_I2C_Master_Wait
  7453 ;; This function is called by:
  7454 ;;		_showTime
  7455 ;;		_getTime
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           	psect	text21
  7460  003628                     __ptext21:
  7461                           	opt callstack 0
  7462  003628                     _I2C_Master_Stop:
  7463                           	opt callstack 27
  7464                           
  7465                           ;I2C.c: 66:     I2C_Master_Wait();
  7466                           
  7467                           ;incstack = 0
  7468  003628  ECDF  F01A         	call	_I2C_Master_Wait	;wreg free
  7469                           
  7470                           ;I2C.c: 67:     SSPCON2bits.PEN = 1;
  7471  00362C  84C5               	bsf	4037,2,c	;volatile
  7472  00362E  0012               	return		;funcret
  7473  003630                     __end_of_I2C_Master_Stop:
  7474                           	opt callstack 0
  7475                           
  7476 ;; *************** function _I2C_Master_Start *****************
  7477 ;; Defined at:
  7478 ;;		line 55 in file "I2C.c"
  7479 ;; Parameters:    Size  Location     Type
  7480 ;;		None
  7481 ;; Auto vars:     Size  Location     Type
  7482 ;;		None
  7483 ;; Return value:  Size  Location     Type
  7484 ;;                  1    wreg      void 
  7485 ;; Registers used:
  7486 ;;		wreg, status,2, status,0, cstack
  7487 ;; Tracked objects:
  7488 ;;		On entry : 0/0
  7489 ;;		On exit  : 0/0
  7490 ;;		Unchanged: 0/0
  7491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7496 ;;Total ram usage:        0 bytes
  7497 ;; Hardware stack levels used:    1
  7498 ;; Hardware stack levels required when called:    2
  7499 ;; This function calls:
  7500 ;;		_I2C_Master_Wait
  7501 ;; This function is called by:
  7502 ;;		_showTime
  7503 ;;		_getTime
  7504 ;; This function uses a non-reentrant model
  7505 ;;
  7506                           
  7507                           	psect	text22
  7508  003630                     __ptext22:
  7509                           	opt callstack 0
  7510  003630                     _I2C_Master_Start:
  7511                           	opt callstack 27
  7512                           
  7513                           ;I2C.c: 56:     I2C_Master_Wait();
  7514                           
  7515                           ;incstack = 0
  7516  003630  ECDF  F01A         	call	_I2C_Master_Wait	;wreg free
  7517                           
  7518                           ;I2C.c: 57:     SSPCON2bits.SEN = 1;
  7519  003634  80C5               	bsf	4037,0,c	;volatile
  7520  003636  0012               	return		;funcret
  7521  003638                     __end_of_I2C_Master_Start:
  7522                           	opt callstack 0
  7523                           
  7524 ;; *************** function _I2C_Master_Read *****************
  7525 ;; Defined at:
  7526 ;;		line 77 in file "I2C.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;  ackBit          1    wreg     unsigned char 
  7529 ;; Auto vars:     Size  Location     Type
  7530 ;;  ackBit          1    1[COMRAM] unsigned char 
  7531 ;;  receivedByte    1    2[COMRAM] unsigned char 
  7532 ;; Return value:  Size  Location     Type
  7533 ;;                  1    wreg      unsigned char 
  7534 ;; Registers used:
  7535 ;;		wreg, status,2, status,0, cstack
  7536 ;; Tracked objects:
  7537 ;;		On entry : 0/0
  7538 ;;		On exit  : 0/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7542 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7544 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;Total ram usage:        2 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; Hardware stack levels required when called:    2
  7548 ;; This function calls:
  7549 ;;		_I2C_Master_Wait
  7550 ;; This function is called by:
  7551 ;;		_showTime
  7552 ;;		_getTime
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           	psect	text23
  7557  003550                     __ptext23:
  7558                           	opt callstack 0
  7559  003550                     _I2C_Master_Read:
  7560                           	opt callstack 27
  7561                           
  7562                           ;incstack = 0
  7563                           ;I2C_Master_Read@ackBit stored from wreg
  7564  003550  6E02               	movwf	I2C_Master_Read@ackBit,c
  7565                           
  7566                           ;I2C.c: 78:     I2C_Master_Wait();
  7567  003552  ECDF  F01A         	call	_I2C_Master_Wait	;wreg free
  7568                           
  7569                           ;I2C.c: 79:     SSPCON2bits.RCEN = 1;
  7570  003556  86C5               	bsf	4037,3,c	;volatile
  7571                           
  7572                           ;I2C.c: 81:     I2C_Master_Wait();
  7573  003558  ECDF  F01A         	call	_I2C_Master_Wait	;wreg free
  7574                           
  7575                           ;I2C.c: 84:     unsigned char receivedByte = SSPBUF;
  7576  00355C  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  7577                           
  7578                           ;I2C.c: 86:     I2C_Master_Wait();
  7579  003560  ECDF  F01A         	call	_I2C_Master_Wait	;wreg free
  7580                           
  7581                           ;I2C.c: 87:     SSPCON2bits.ACKDT = ackBit;
  7582  003564  B002               	btfsc	I2C_Master_Read@ackBit,0,c
  7583  003566  D002               	bra	u5455
  7584  003568  9AC5               	bcf	4037,5,c	;volatile
  7585  00356A  D001               	bra	u5456
  7586  00356C                     u5455:
  7587  00356C  8AC5               	bsf	4037,5,c	;volatile
  7588  00356E                     u5456:
  7589                           
  7590                           ;I2C.c: 88:     SSPCON2bits.ACKEN = 1;
  7591  00356E  88C5               	bsf	4037,4,c	;volatile
  7592                           
  7593                           ;I2C.c: 90:     return receivedByte;
  7594  003570  5003               	movf	I2C_Master_Read@receivedByte,w,c
  7595  003572  0012               	return		;funcret
  7596  003574                     __end_of_I2C_Master_Read:
  7597                           	opt callstack 0
  7598                           
  7599 ;; *************** function _I2C_Master_Wait *****************
  7600 ;; Defined at:
  7601 ;;		line 21 in file "I2C.c"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;		None
  7604 ;; Auto vars:     Size  Location     Type
  7605 ;;		None
  7606 ;; Return value:  Size  Location     Type
  7607 ;;                  1    wreg      void 
  7608 ;; Registers used:
  7609 ;;		wreg, status,2, status,0
  7610 ;; Tracked objects:
  7611 ;;		On entry : 0/0
  7612 ;;		On exit  : 0/0
  7613 ;;		Unchanged: 0/0
  7614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7617 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;Total ram usage:        1 bytes
  7620 ;; Hardware stack levels used:    1
  7621 ;; Hardware stack levels required when called:    1
  7622 ;; This function calls:
  7623 ;;		Nothing
  7624 ;; This function is called by:
  7625 ;;		_I2C_Master_Start
  7626 ;;		_I2C_Master_Stop
  7627 ;;		_I2C_Master_Write
  7628 ;;		_I2C_Master_Read
  7629 ;;		_I2C_Master_RepeatedStart
  7630 ;; This function uses a non-reentrant model
  7631 ;;
  7632                           
  7633                           	psect	text24
  7634  0035BE                     __ptext24:
  7635                           	opt callstack 0
  7636  0035BE                     _I2C_Master_Wait:
  7637                           	opt callstack 27
  7638                           
  7639                           ;I2C.c: 26:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F)){
  7640                           
  7641                           ;I2C.c: 28:     }
  7642                           
  7643                           ;incstack = 0
  7644  0035BE  B4C7               	btfsc	4039,2,c	;volatile
  7645  0035C0  D7FE               	goto	_I2C_Master_Wait
  7646  0035C2  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  7647  0035C6  0E1F               	movlw	31
  7648  0035C8  1601               	andwf	??_I2C_Master_Wait,f,c
  7649  0035CA  B4D8               	btfsc	status,2,c
  7650  0035CC  0012               	return	
  7651  0035CE  D7F7               	goto	_I2C_Master_Wait
  7652  0035D0                     __end_of_I2C_Master_Wait:
  7653                           	opt callstack 0
  7654                           
  7655 ;; *************** function _fixTime *****************
  7656 ;; Defined at:
  7657 ;;		line 3 in file "helpers.c"
  7658 ;; Parameters:    Size  Location     Type
  7659 ;;  Time            2    0[COMRAM] PTR unsigned char 
  7660 ;;		 -> runOp@endTime(3), main@startTimeInt(3), 
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;		None
  7663 ;; Return value:  Size  Location     Type
  7664 ;;                  1    wreg      void 
  7665 ;; Registers used:
  7666 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7667 ;; Tracked objects:
  7668 ;;		On entry : 0/0
  7669 ;;		On exit  : 0/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7672 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7674 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7675 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7676 ;;Total ram usage:        4 bytes
  7677 ;; Hardware stack levels used:    1
  7678 ;; Hardware stack levels required when called:    1
  7679 ;; This function calls:
  7680 ;;		Nothing
  7681 ;; This function is called by:
  7682 ;;		_dispStateTrans
  7683 ;;		_runOp
  7684 ;; This function uses a non-reentrant model
  7685 ;;
  7686                           
  7687                           	psect	text25
  7688  002BF6                     __ptext25:
  7689                           	opt callstack 0
  7690  002BF6                     _fixTime:
  7691                           	opt callstack 28
  7692                           
  7693                           ;helpers.c: 7:     Time[2] = ((Time[2])>>4)*10 + ((Time[2])&0x0F);
  7694                           
  7695                           ;incstack = 0
  7696  002BF6  EE20 F002          	lfsr	2,2
  7697  002BFA  5001               	movf	fixTime@Time,w,c
  7698  002BFC  26D9               	addwf	fsr2l,f,c
  7699  002BFE  5002               	movf	fixTime@Time+1,w,c
  7700  002C00  22DA               	addwfc	fsr2h,f,c
  7701  002C02  EE10 F002          	lfsr	1,2
  7702  002C06  5001               	movf	fixTime@Time,w,c
  7703  002C08  26E1               	addwf	fsr1l,f,c
  7704  002C0A  5002               	movf	fixTime@Time+1,w,c
  7705  002C0C  22E2               	addwfc	fsr1h,f,c
  7706  002C0E  50E7               	movf	indf1,w,c
  7707  002C10  6E03               	movwf	??_fixTime& (0+255),c
  7708  002C12  0E0F               	movlw	15
  7709  002C14  1603               	andwf	??_fixTime,f,c
  7710  002C16  EE10 F002          	lfsr	1,2
  7711  002C1A  5001               	movf	fixTime@Time,w,c
  7712  002C1C  26E1               	addwf	fsr1l,f,c
  7713  002C1E  5002               	movf	fixTime@Time+1,w,c
  7714  002C20  22E2               	addwfc	fsr1h,f,c
  7715  002C22  50E7               	movf	indf1,w,c
  7716  002C24  6E04               	movwf	(??_fixTime+1)& (0+255),c
  7717  002C26  3804               	swapf	??_fixTime+1,w,c
  7718  002C28  0B0F               	andlw	15
  7719  002C2A  0D0A               	mullw	10
  7720  002C2C  50F3               	movf	prodl,w,c
  7721  002C2E  2403               	addwf	??_fixTime,w,c
  7722  002C30  6EDF               	movwf	indf2,c
  7723                           
  7724                           ;helpers.c: 8:     Time[1] = ((Time[1])>>4)*10 + ((Time[1])&0x0F);
  7725  002C32  EE20 F001          	lfsr	2,1
  7726  002C36  5001               	movf	fixTime@Time,w,c
  7727  002C38  26D9               	addwf	fsr2l,f,c
  7728  002C3A  5002               	movf	fixTime@Time+1,w,c
  7729  002C3C  22DA               	addwfc	fsr2h,f,c
  7730  002C3E  EE10 F001          	lfsr	1,1
  7731  002C42  5001               	movf	fixTime@Time,w,c
  7732  002C44  26E1               	addwf	fsr1l,f,c
  7733  002C46  5002               	movf	fixTime@Time+1,w,c
  7734  002C48  22E2               	addwfc	fsr1h,f,c
  7735  002C4A  50E7               	movf	indf1,w,c
  7736  002C4C  6E03               	movwf	??_fixTime& (0+255),c
  7737  002C4E  0E0F               	movlw	15
  7738  002C50  1603               	andwf	??_fixTime,f,c
  7739  002C52  EE10 F001          	lfsr	1,1
  7740  002C56  5001               	movf	fixTime@Time,w,c
  7741  002C58  26E1               	addwf	fsr1l,f,c
  7742  002C5A  5002               	movf	fixTime@Time+1,w,c
  7743  002C5C  22E2               	addwfc	fsr1h,f,c
  7744  002C5E  50E7               	movf	indf1,w,c
  7745  002C60  6E04               	movwf	(??_fixTime+1)& (0+255),c
  7746  002C62  3804               	swapf	??_fixTime+1,w,c
  7747  002C64  0B0F               	andlw	15
  7748  002C66  0D0A               	mullw	10
  7749  002C68  50F3               	movf	prodl,w,c
  7750  002C6A  2403               	addwf	??_fixTime,w,c
  7751  002C6C  6EDF               	movwf	indf2,c
  7752                           
  7753                           ;helpers.c: 9:     Time[0] = ((Time[0])>>4)*10 + ((Time[0])&0x0F);
  7754  002C6E  C001  FFD9         	movff	fixTime@Time,fsr2l
  7755  002C72  C002  FFDA         	movff	fixTime@Time+1,fsr2h
  7756  002C76  50DF               	movf	indf2,w,c
  7757  002C78  6E03               	movwf	??_fixTime& (0+255),c
  7758  002C7A  0E0F               	movlw	15
  7759  002C7C  1603               	andwf	??_fixTime,f,c
  7760  002C7E  C001  FFD9         	movff	fixTime@Time,fsr2l
  7761  002C82  C002  FFDA         	movff	fixTime@Time+1,fsr2h
  7762  002C86  50DF               	movf	indf2,w,c
  7763  002C88  6E04               	movwf	(??_fixTime+1)& (0+255),c
  7764  002C8A  3804               	swapf	??_fixTime+1,w,c
  7765  002C8C  0B0F               	andlw	15
  7766  002C8E  0D0A               	mullw	10
  7767  002C90  50F3               	movf	prodl,w,c
  7768  002C92  2403               	addwf	??_fixTime,w,c
  7769  002C94  C001  FFD9         	movff	fixTime@Time,fsr2l
  7770  002C98  C002  FFDA         	movff	fixTime@Time+1,fsr2h
  7771  002C9C  6EDF               	movwf	indf2,c
  7772  002C9E  0012               	return		;funcret
  7773  002CA0                     __end_of_fixTime:
  7774                           	opt callstack 0
  7775                           
  7776 ;; *************** function _dispShowLogs *****************
  7777 ;; Defined at:
  7778 ;;		line 150 in file "lcdCode.c"
  7779 ;; Parameters:    Size  Location     Type
  7780 ;;		None
  7781 ;; Auto vars:     Size  Location     Type
  7782 ;;		None
  7783 ;; Return value:  Size  Location     Type
  7784 ;;                  1    wreg      void 
  7785 ;; Registers used:
  7786 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7787 ;; Tracked objects:
  7788 ;;		On entry : 0/0
  7789 ;;		On exit  : 0/0
  7790 ;;		Unchanged: 0/0
  7791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7794 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7795 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7796 ;;Total ram usage:        1 bytes
  7797 ;; Hardware stack levels used:    1
  7798 ;; Hardware stack levels required when called:   12
  7799 ;; This function calls:
  7800 ;;		_lcdInst
  7801 ;;		_printf
  7802 ;; This function is called by:
  7803 ;;		_main
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           	psect	text26
  7808  00319A                     __ptext26:
  7809                           	opt callstack 0
  7810  00319A                     _dispShowLogs:
  7811                           	opt callstack 18
  7812                           
  7813                           ;lcdCode.c: 151:     { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.0)));};
  7814                           
  7815                           ;incstack = 0
  7816  00319A  0E80               	movlw	128
  7817  00319C  ECFD  F01A         	call	_lcdInst
  7818  0031A0  0E07               	movlw	7
  7819  0031A2  6E7C               	movwf	??_dispShowLogs& (0+255),c
  7820  0031A4  0E7D               	movlw	125
  7821  0031A6                     u7797:
  7822  0031A6  2EE8               	decfsz	wreg,f,c
  7823  0031A8  D7FE               	bra	u7797
  7824  0031AA  2E7C               	decfsz	??_dispShowLogs& (0+255),f,c
  7825  0031AC  D7FC               	bra	u7797
  7826  0031AE  F000               	nop	
  7827                           
  7828                           ;lcdCode.c: 152:     printf("CHOOSE WHICH LOG");
  7829  0031B0  0E5C               	movlw	low STR_45
  7830  0031B2  6E70               	movwf	printf@fmt,c
  7831  0031B4  0EFF               	movlw	high STR_45
  7832  0031B6  6E71               	movwf	printf@fmt+1,c
  7833  0031B8  EC82  F01A         	call	_printf	;wreg free
  7834  0031BC  0EC0               	movlw	192
  7835  0031BE  ECFD  F01A         	call	_lcdInst
  7836                           
  7837                           ;lcdCode.c: 154:     printf("TO SEE ( 1 - 4 )");
  7838  0031C2  0EB2               	movlw	low STR_46
  7839  0031C4  6E70               	movwf	printf@fmt,c
  7840  0031C6  0EFE               	movlw	high STR_46
  7841  0031C8  6E71               	movwf	printf@fmt+1,c
  7842  0031CA  EC82  F01A         	call	_printf	;wreg free
  7843  0031CE  0E90               	movlw	144
  7844  0031D0  ECFD  F01A         	call	_lcdInst
  7845                           
  7846                           ;lcdCode.c: 156:     printf("1:NEW      4:OLD");
  7847  0031D4  0E18               	movlw	low STR_47
  7848  0031D6  6E70               	movwf	printf@fmt,c
  7849  0031D8  0EFF               	movlw	high STR_47
  7850  0031DA  6E71               	movwf	printf@fmt+1,c
  7851  0031DC  EC82  F01A         	call	_printf	;wreg free
  7852  0031E0  0ED0               	movlw	208
  7853  0031E2  ECFD  F01A         	call	_lcdInst
  7854                           
  7855                           ;lcdCode.c: 158:     printf("-----0:DONE-----");
  7856  0031E6  0EC3               	movlw	low STR_8
  7857  0031E8  6E70               	movwf	printf@fmt,c
  7858  0031EA  0EFE               	movlw	high STR_8
  7859  0031EC  6E71               	movwf	printf@fmt+1,c
  7860  0031EE  EC82  F01A         	call	_printf	;wreg free
  7861  0031F2  0012               	return		;funcret
  7862  0031F4                     __end_of_dispShowLogs:
  7863                           	opt callstack 0
  7864                           
  7865 ;; *************** function _dispSMrun *****************
  7866 ;; Defined at:
  7867 ;;		line 30 in file "helpers.c"
  7868 ;; Parameters:    Size  Location     Type
  7869 ;;  direc           1    wreg     unsigned char 
  7870 ;;  motorPos        2  123[COMRAM] unsigned int 
  7871 ;; Auto vars:     Size  Location     Type
  7872 ;;  direc           1    0[BANK0 ] unsigned char 
  7873 ;; Return value:  Size  Location     Type
  7874 ;;                  1    wreg      void 
  7875 ;; Registers used:
  7876 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7877 ;; Tracked objects:
  7878 ;;		On entry : 0/0
  7879 ;;		On exit  : 0/0
  7880 ;;		Unchanged: 0/0
  7881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7882 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7883 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7884 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7885 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7886 ;;Total ram usage:        6 bytes
  7887 ;; Hardware stack levels used:    1
  7888 ;; Hardware stack levels required when called:   12
  7889 ;; This function calls:
  7890 ;;		_lcdInst
  7891 ;;		_printf
  7892 ;; This function is called by:
  7893 ;;		_main
  7894 ;; This function uses a non-reentrant model
  7895 ;;
  7896                           
  7897                           	psect	text27
  7898  002D3A                     __ptext27:
  7899                           	opt callstack 0
  7900  002D3A                     _dispSMrun:
  7901                           	opt callstack 18
  7902                           
  7903                           ;incstack = 0
  7904                           ;dispSMrun@direc stored from wreg
  7905  002D3A  0100               	movlb	0	; () banked
  7906  002D3C  6F80               	movwf	dispSMrun@direc& (0+255),b
  7907                           
  7908                           ;helpers.c: 32:     { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.0)));};
  7909  002D3E  0E80               	movlw	128
  7910  002D40  ECFD  F01A         	call	_lcdInst
  7911  002D44  0E07               	movlw	7
  7912  002D46  6E7E               	movwf	??_dispSMrun& (0+255),c
  7913  002D48  0E7D               	movlw	125
  7914  002D4A                     u7807:
  7915  002D4A  2EE8               	decfsz	wreg,f,c
  7916  002D4C  D7FE               	bra	u7807
  7917  002D4E  2E7E               	decfsz	??_dispSMrun& (0+255),f,c
  7918  002D50  D7FC               	bra	u7807
  7919  002D52  F000               	nop	
  7920                           
  7921                           ;helpers.c: 33:     printf(" STEPPER  MOTOR ");
  7922  002D54  0E1A               	movlw	low STR_77
  7923  002D56  6E70               	movwf	printf@fmt,c
  7924  002D58  0EFD               	movlw	high STR_77
  7925  002D5A  6E71               	movwf	printf@fmt+1,c
  7926  002D5C  EC82  F01A         	call	_printf	;wreg free
  7927  002D60  0EC0               	movlw	192
  7928  002D62  ECFD  F01A         	call	_lcdInst
  7929                           
  7930                           ;helpers.c: 35:     printf(" RUNNING DIR %s", (direc==1) ? "CCW\0":"CW \0");
  7931  002D66  0100               	movlb	0	; () banked
  7932  002D68  0580               	decf	dispSMrun@direc& (0+255),w,b
  7933  002D6A  B4D8               	btfsc	status,2,c
  7934  002D6C  D004               	goto	l6406
  7935                           
  7936                           ; BSR set to: 0
  7937  002D6E  0EF0               	movlw	low STR_80
  7938  002D70  6F81               	movwf	_dispSMrun$976& (0+255),b
  7939  002D72  0EFF               	movlw	high STR_80
  7940  002D74  D003               	goto	L36
  7941  002D76                     l6406:
  7942                           
  7943                           ; BSR set to: 0
  7944  002D76  0EF5               	movlw	low STR_79
  7945  002D78  6F81               	movwf	_dispSMrun$976& (0+255),b
  7946  002D7A  0EFF               	movlw	high STR_79
  7947  002D7C                     L36:
  7948  002D7C  6F82               	movwf	(_dispSMrun$976+1)& (0+255),b
  7949                           
  7950                           ; BSR set to: 0
  7951  002D7E  0ED1               	movlw	low STR_78
  7952  002D80  6E70               	movwf	printf@fmt,c
  7953  002D82  0EFF               	movlw	high STR_78
  7954  002D84  6E71               	movwf	printf@fmt+1,c
  7955  002D86  C081  F072         	movff	_dispSMrun$976,?_printf+2
  7956  002D8A  C082  F073         	movff	_dispSMrun$976+1,?_printf+3
  7957  002D8E  EC82  F01A         	call	_printf	;wreg free
  7958  002D92  0E90               	movlw	144
  7959  002D94  ECFD  F01A         	call	_lcdInst
  7960                           
  7961                           ;helpers.c: 37:     printf("%16x",motorPos);
  7962  002D98  0EFA               	movlw	low STR_81
  7963  002D9A  6E70               	movwf	printf@fmt,c
  7964  002D9C  0EFF               	movlw	high STR_81
  7965  002D9E  6E71               	movwf	printf@fmt+1,c
  7966  002DA0  C07C  F072         	movff	dispSMrun@motorPos,?_printf+2
  7967  002DA4  C07D  F073         	movff	dispSMrun@motorPos+1,?_printf+3
  7968  002DA8  EC82  F01A         	call	_printf	;wreg free
  7969  002DAC  0ED0               	movlw	208
  7970  002DAE  ECFD  F01A         	call	_lcdInst
  7971                           
  7972                           ;helpers.c: 39:     printf("1:SWITCH  D:STOP");
  7973  002DB2  0E2B               	movlw	low STR_82
  7974  002DB4  6E70               	movwf	printf@fmt,c
  7975  002DB6  0EFD               	movlw	high STR_82
  7976  002DB8  6E71               	movwf	printf@fmt+1,c
  7977  002DBA  EC82  F01A         	call	_printf	;wreg free
  7978  002DBE  0012               	return		;funcret
  7979  002DC0                     __end_of_dispSMrun:
  7980                           	opt callstack 0
  7981                           
  7982 ;; *************** function _dispLogPoleDet *****************
  7983 ;; Defined at:
  7984 ;;		line 206 in file "lcdCode.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;  log             1    wreg     unsigned char 
  7987 ;;  currPole        1  123[COMRAM] unsigned char 
  7988 ;; Auto vars:     Size  Location     Type
  7989 ;;  log             1    8[BANK0 ] unsigned char 
  7990 ;;  pos             2    6[BANK0 ] int 
  7991 ;; Return value:  Size  Location     Type
  7992 ;;                  1    wreg      void 
  7993 ;; Registers used:
  7994 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7995 ;; Tracked objects:
  7996 ;;		On entry : 0/0
  7997 ;;		On exit  : 0/0
  7998 ;;		Unchanged: 0/0
  7999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8000 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8001 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8002 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8003 ;;      Totals:         1       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8004 ;;Total ram usage:       10 bytes
  8005 ;; Hardware stack levels used:    1
  8006 ;; Hardware stack levels required when called:   12
  8007 ;; This function calls:
  8008 ;;		___awdiv
  8009 ;;		___awmod
  8010 ;;		_lcdInst
  8011 ;;		_printf
  8012 ;;		_read_EEPROM
  8013 ;; This function is called by:
  8014 ;;		_main
  8015 ;; This function uses a non-reentrant model
  8016 ;;
  8017                           
  8018                           	psect	text28
  8019  001210                     __ptext28:
  8020                           	opt callstack 0
  8021  001210                     _dispLogPoleDet:
  8022                           	opt callstack 18
  8023                           
  8024                           ;incstack = 0
  8025                           ;dispLogPoleDet@log stored from wreg
  8026  001210  0100               	movlb	0	; () banked
  8027  001212  6F88               	movwf	dispLogPoleDet@log& (0+255),b
  8028                           
  8029                           ;lcdCode.c: 208:     if (read_EEPROM(log*64+1) > 128){
  8030  001214  0100               	movlb	0	; () banked
  8031  001216  5188               	movf	dispLogPoleDet@log& (0+255),w,b
  8032  001218  0D40               	mullw	64
  8033  00121A  28F3               	incf	prodl,w,c
  8034  00121C  ECD5  F01A         	call	_read_EEPROM
  8035  001220  0100               	movlb	0	; () banked
  8036  001222  6F80               	movwf	??_dispLogPoleDet& (0+255),b
  8037  001224  0E80               	movlw	128
  8038  001226  6580               	cpfsgt	??_dispLogPoleDet& (0+255),b
  8039  001228  D038               	goto	l6614
  8040                           
  8041                           ; BSR set to: 0
  8042                           ;lcdCode.c: 209:         { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.0)))
      +                          ;};
  8043  00122A  0E80               	movlw	128
  8044  00122C  ECFD  F01A         	call	_lcdInst
  8045  001230  0E07               	movlw	7
  8046  001232  0100               	movlb	0	; () banked
  8047  001234  6F80               	movwf	??_dispLogPoleDet& (0+255),b
  8048  001236  0E7D               	movlw	125
  8049  001238                     u7817:
  8050  001238  2EE8               	decfsz	wreg,f,c
  8051  00123A  D7FE               	bra	u7817
  8052  00123C  2F80               	decfsz	??_dispLogPoleDet& (0+255),f,b
  8053  00123E  D7FC               	bra	u7817
  8054                           
  8055                           ;lcdCode.c: 210:         printf("      ERROR      ");
  8056  001240  0EC0               	movlw	low STR_49
  8057  001242  6E70               	movwf	printf@fmt,c
  8058  001244  0EFC               	movlw	high STR_49
  8059  001246  6E71               	movwf	printf@fmt+1,c
  8060  001248  EC82  F01A         	call	_printf	;wreg free
  8061  00124C  0EC0               	movlw	192
  8062  00124E  ECFD  F01A         	call	_lcdInst
  8063                           
  8064                           ;lcdCode.c: 212:         printf(" NO  INFORMATION ");
  8065  001252  0EE4               	movlw	low STR_50
  8066  001254  6E70               	movwf	printf@fmt,c
  8067  001256  0EFC               	movlw	high STR_50
  8068  001258  6E71               	movwf	printf@fmt+1,c
  8069  00125A  EC82  F01A         	call	_printf	;wreg free
  8070  00125E  0E90               	movlw	144
  8071  001260  ECFD  F01A         	call	_lcdInst
  8072                           
  8073                           ;lcdCode.c: 214:         printf("      STORED     ",read_EEPROM(log*64+1));
  8074  001264  0ED2               	movlw	low STR_51
  8075  001266  6E70               	movwf	printf@fmt,c
  8076  001268  0EFC               	movlw	high STR_51
  8077  00126A  6E71               	movwf	printf@fmt+1,c
  8078  00126C  0100               	movlb	0	; () banked
  8079  00126E  5188               	movf	dispLogPoleDet@log& (0+255),w,b
  8080  001270  0D40               	mullw	64
  8081  001272  28F3               	incf	prodl,w,c
  8082  001274  ECD5  F01A         	call	_read_EEPROM
  8083  001278  0100               	movlb	0	; () banked
  8084  00127A  6F80               	movwf	??_dispLogPoleDet& (0+255),b
  8085  00127C  5180               	movf	??_dispLogPoleDet& (0+255),w,b
  8086  00127E  6E72               	movwf	?_printf+2,c
  8087  001280  6A73               	clrf	?_printf+3,c
  8088  001282  EC82  F01A         	call	_printf	;wreg free
  8089  001286  0ED0               	movlw	208
  8090  001288  ECFD  F01A         	call	_lcdInst
  8091                           
  8092                           ;lcdCode.c: 216:         printf("-----0:MENU-----");
  8093  00128C  0ED4               	movlw	low STR_12
  8094  00128E  6E70               	movwf	printf@fmt,c
  8095  001290  0EFE               	movlw	high STR_12
  8096  001292  6E71               	movwf	printf@fmt+1,c
  8097  001294  EC82  F01A         	call	_printf	;wreg free
  8098                           
  8099                           ;lcdCode.c: 217:     } else {
  8100  001298  0012               	return	
  8101  00129A                     l6614:
  8102                           
  8103                           ; BSR set to: 0
  8104                           ;lcdCode.c: 218:         if (read_EEPROM(log*64+1) == 0){
  8105  00129A  5188               	movf	dispLogPoleDet@log& (0+255),w,b
  8106  00129C  0D40               	mullw	64
  8107  00129E  28F3               	incf	prodl,w,c
  8108  0012A0  ECD5  F01A         	call	_read_EEPROM
  8109  0012A4  0900               	iorlw	0
  8110  0012A6  A4D8               	btfss	status,2,c
  8111  0012A8  D02D               	goto	l6634
  8112                           
  8113                           ;lcdCode.c: 219:             { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.
      +                          0)));};
  8114  0012AA  0E80               	movlw	128
  8115  0012AC  ECFD  F01A         	call	_lcdInst
  8116  0012B0  0E07               	movlw	7
  8117  0012B2  0100               	movlb	0	; () banked
  8118  0012B4  6F80               	movwf	??_dispLogPoleDet& (0+255),b
  8119  0012B6  0E7D               	movlw	125
  8120  0012B8                     u7827:
  8121  0012B8  2EE8               	decfsz	wreg,f,c
  8122  0012BA  D7FE               	bra	u7827
  8123  0012BC  2F80               	decfsz	??_dispLogPoleDet& (0+255),f,b
  8124  0012BE  D7FC               	bra	u7827
  8125                           
  8126                           ;lcdCode.c: 220:             printf("  THIS RUN HAD  ");
  8127  0012C0  0E91               	movlw	low STR_69
  8128  0012C2  6E70               	movwf	printf@fmt,c
  8129  0012C4  0EFD               	movlw	high STR_69
  8130  0012C6  6E71               	movwf	printf@fmt+1,c
  8131  0012C8  EC82  F01A         	call	_printf	;wreg free
  8132  0012CC  0EC0               	movlw	192
  8133  0012CE  ECFD  F01A         	call	_lcdInst
  8134                           
  8135                           ;lcdCode.c: 222:             printf("    NO POLES    ");
  8136  0012D2  0E5E               	movlw	low STR_70
  8137  0012D4  6E70               	movwf	printf@fmt,c
  8138  0012D6  0EFD               	movlw	high STR_70
  8139  0012D8  6E71               	movwf	printf@fmt+1,c
  8140  0012DA  EC82  F01A         	call	_printf	;wreg free
  8141  0012DE  0E90               	movlw	144
  8142  0012E0  ECFD  F01A         	call	_lcdInst
  8143                           
  8144                           ;lcdCode.c: 224:             printf("    DETECTED    ");
  8145  0012E4  0E4D               	movlw	low STR_71
  8146  0012E6  6E70               	movwf	printf@fmt,c
  8147  0012E8  0EFD               	movlw	high STR_71
  8148  0012EA  6E71               	movwf	printf@fmt+1,c
  8149  0012EC  EC82  F01A         	call	_printf	;wreg free
  8150  0012F0  0ED0               	movlw	208
  8151  0012F2  ECFD  F01A         	call	_lcdInst
  8152                           
  8153                           ;lcdCode.c: 226:             printf("-----0:MENU-----");
  8154  0012F6  0ED4               	movlw	low STR_12
  8155  0012F8  6E70               	movwf	printf@fmt,c
  8156  0012FA  0EFE               	movlw	high STR_12
  8157  0012FC  6E71               	movwf	printf@fmt+1,c
  8158  0012FE  EC82  F01A         	call	_printf	;wreg free
  8159                           
  8160                           ;lcdCode.c: 227:         } else {
  8161  001302  0012               	return	
  8162  001304                     l6634:
  8163                           
  8164                           ;lcdCode.c: 228:             int pos = ((int)read_EEPROM(log*64+3+4*currPole))<<8 |
  8165  001304  507C               	movf	dispLogPoleDet@currPole,w,c
  8166  001306  0D04               	mullw	4
  8167  001308  CFF3 F080          	movff	prodl,??_dispLogPoleDet
  8168  00130C  0100               	movlb	0	; () banked
  8169  00130E  5188               	movf	dispLogPoleDet@log& (0+255),w,b
  8170  001310  0D40               	mullw	64
  8171  001312  50F3               	movf	prodl,w,c
  8172  001314  2580               	addwf	??_dispLogPoleDet& (0+255),w,b
  8173  001316  0F03               	addlw	3
  8174  001318  ECD5  F01A         	call	_read_EEPROM
  8175  00131C  0100               	movlb	0	; () banked
  8176  00131E  6F81               	movwf	(??_dispLogPoleDet+1)& (0+255),b
  8177  001320  5181               	movf	(??_dispLogPoleDet+1)& (0+255),w,b
  8178  001322  6F83               	movwf	(??_dispLogPoleDet+3)& (0+255),b
  8179  001324  6B82               	clrf	(??_dispLogPoleDet+2)& (0+255),b
  8180  001326  507C               	movf	dispLogPoleDet@currPole,w,c
  8181  001328  0D04               	mullw	4
  8182  00132A  CFF3 F084          	movff	prodl,??_dispLogPoleDet+4
  8183  00132E  5188               	movf	dispLogPoleDet@log& (0+255),w,b
  8184  001330  0D40               	mullw	64
  8185  001332  50F3               	movf	prodl,w,c
  8186  001334  2584               	addwf	(??_dispLogPoleDet+4)& (0+255),w,b
  8187  001336  0F04               	addlw	4
  8188  001338  ECD5  F01A         	call	_read_EEPROM
  8189  00133C  0100               	movlb	0	; () banked
  8190  00133E  6F85               	movwf	(??_dispLogPoleDet+5)& (0+255),b
  8191  001340  5185               	movf	(??_dispLogPoleDet+5)& (0+255),w,b
  8192  001342  1182               	iorwf	(??_dispLogPoleDet+2)& (0+255),w,b
  8193  001344  6F86               	movwf	dispLogPoleDet@pos& (0+255),b
  8194  001346  5183               	movf	(??_dispLogPoleDet+3)& (0+255),w,b
  8195  001348  6F87               	movwf	(dispLogPoleDet@pos+1)& (0+255),b
  8196                           
  8197                           ; BSR set to: 0
  8198                           ;lcdCode.c: 230:             { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.
      +                          0)));};
  8199  00134A  0E80               	movlw	128
  8200  00134C  ECFD  F01A         	call	_lcdInst
  8201  001350  0E07               	movlw	7
  8202  001352  0100               	movlb	0	; () banked
  8203  001354  6F80               	movwf	??_dispLogPoleDet& (0+255),b
  8204  001356  0E7D               	movlw	125
  8205  001358                     u7837:
  8206  001358  2EE8               	decfsz	wreg,f,c
  8207  00135A  D7FE               	bra	u7837
  8208  00135C  2F80               	decfsz	??_dispLogPoleDet& (0+255),f,b
  8209  00135E  D7FC               	bra	u7837
  8210                           
  8211                           ;lcdCode.c: 231:             printf("POLE%1x POS: %1d.%02dm",
  8212  001360  0E83               	movlw	low STR_13
  8213  001362  6E70               	movwf	printf@fmt,c
  8214  001364  0EFC               	movlw	high STR_13
  8215  001366  6E71               	movwf	printf@fmt+1,c
  8216  001368  0E01               	movlw	1
  8217  00136A  247C               	addwf	dispLogPoleDet@currPole,w,c
  8218  00136C  6E72               	movwf	?_printf+2,c
  8219  00136E  6A73               	clrf	?_printf+3,c
  8220  001370  0E00               	movlw	0
  8221  001372  2273               	addwfc	?_printf+3,f,c
  8222  001374  C086  F00D         	movff	dispLogPoleDet@pos,___awdiv@dividend
  8223  001378  C087  F00E         	movff	dispLogPoleDet@pos+1,___awdiv@dividend+1
  8224  00137C  0E03               	movlw	3
  8225  00137E  6E10               	movwf	___awdiv@divisor+1,c
  8226  001380  0EE8               	movlw	232
  8227  001382  6E0F               	movwf	___awdiv@divisor,c
  8228  001384  ECE0  F016         	call	___awdiv	;wreg free
  8229  001388  C00D  F074         	movff	?___awdiv,?_printf+4
  8230  00138C  C00E  F075         	movff	?___awdiv+1,?_printf+5
  8231  001390  0E03               	movlw	3
  8232  001392  6E0A               	movwf	___awmod@divisor+1,c
  8233  001394  0EE8               	movlw	232
  8234  001396  6E09               	movwf	___awmod@divisor,c
  8235  001398  C086  F007         	movff	dispLogPoleDet@pos,___awmod@dividend
  8236  00139C  C087  F008         	movff	dispLogPoleDet@pos+1,___awmod@dividend+1
  8237  0013A0  EC63  F017         	call	___awmod	;wreg free
  8238  0013A4  C007  F00D         	movff	?___awmod,___awdiv@dividend
  8239  0013A8  C008  F00E         	movff	?___awmod+1,___awdiv@dividend+1
  8240  0013AC  0E00               	movlw	0
  8241  0013AE  6E10               	movwf	___awdiv@divisor+1,c
  8242  0013B0  0E0A               	movlw	10
  8243  0013B2  6E0F               	movwf	___awdiv@divisor,c
  8244  0013B4  ECE0  F016         	call	___awdiv	;wreg free
  8245  0013B8  C00D  F076         	movff	?___awdiv,?_printf+6
  8246  0013BC  C00E  F077         	movff	?___awdiv+1,?_printf+7
  8247  0013C0  EC82  F01A         	call	_printf	;wreg free
  8248  0013C4  0EC0               	movlw	192
  8249  0013C6  ECFD  F01A         	call	_lcdInst
  8250                           
  8251                           ;lcdCode.c: 234:             printf("TIRES SUPP:   %1d ",read_EEPROM(log*64+5+4*currPole
      +                          ));
  8252  0013CA  0E9A               	movlw	low STR_14
  8253  0013CC  6E70               	movwf	printf@fmt,c
  8254  0013CE  0EFC               	movlw	high STR_14
  8255  0013D0  6E71               	movwf	printf@fmt+1,c
  8256  0013D2  507C               	movf	dispLogPoleDet@currPole,w,c
  8257  0013D4  0D04               	mullw	4
  8258  0013D6  CFF3 F080          	movff	prodl,??_dispLogPoleDet
  8259  0013DA  0100               	movlb	0	; () banked
  8260  0013DC  5188               	movf	dispLogPoleDet@log& (0+255),w,b
  8261  0013DE  0D40               	mullw	64
  8262  0013E0  50F3               	movf	prodl,w,c
  8263  0013E2  2580               	addwf	??_dispLogPoleDet& (0+255),w,b
  8264  0013E4  0F05               	addlw	5
  8265  0013E6  ECD5  F01A         	call	_read_EEPROM
  8266  0013EA  0100               	movlb	0	; () banked
  8267  0013EC  6F81               	movwf	(??_dispLogPoleDet+1)& (0+255),b
  8268  0013EE  5181               	movf	(??_dispLogPoleDet+1)& (0+255),w,b
  8269  0013F0  6E72               	movwf	?_printf+2,c
  8270  0013F2  6A73               	clrf	?_printf+3,c
  8271  0013F4  EC82  F01A         	call	_printf	;wreg free
  8272  0013F8  0E90               	movlw	144
  8273  0013FA  ECFD  F01A         	call	_lcdInst
  8274                           
  8275                           ;lcdCode.c: 236:             printf("TIRES ON POLE:%1d ",read_EEPROM(log*64+6+4*currPole
      +                          ));
  8276  0013FE  0EAD               	movlw	low STR_15
  8277  001400  6E70               	movwf	printf@fmt,c
  8278  001402  0EFC               	movlw	high STR_15
  8279  001404  6E71               	movwf	printf@fmt+1,c
  8280  001406  507C               	movf	dispLogPoleDet@currPole,w,c
  8281  001408  0D04               	mullw	4
  8282  00140A  CFF3 F080          	movff	prodl,??_dispLogPoleDet
  8283  00140E  0100               	movlb	0	; () banked
  8284  001410  5188               	movf	dispLogPoleDet@log& (0+255),w,b
  8285  001412  0D40               	mullw	64
  8286  001414  50F3               	movf	prodl,w,c
  8287  001416  2580               	addwf	??_dispLogPoleDet& (0+255),w,b
  8288  001418  0F06               	addlw	6
  8289  00141A  ECD5  F01A         	call	_read_EEPROM
  8290  00141E  0100               	movlb	0	; () banked
  8291  001420  6F81               	movwf	(??_dispLogPoleDet+1)& (0+255),b
  8292  001422  5181               	movf	(??_dispLogPoleDet+1)& (0+255),w,b
  8293  001424  6E72               	movwf	?_printf+2,c
  8294  001426  6A73               	clrf	?_printf+3,c
  8295  001428  EC82  F01A         	call	_printf	;wreg free
  8296  00142C  0ED0               	movlw	208
  8297  00142E  ECFD  F01A         	call	_lcdInst
  8298                           
  8299                           ;lcdCode.c: 238:             printf("<*   0:MENU   #>");
  8300  001432  0E07               	movlw	low STR_16
  8301  001434  6E70               	movwf	printf@fmt,c
  8302  001436  0EFF               	movlw	high STR_16
  8303  001438  6E71               	movwf	printf@fmt+1,c
  8304  00143A  EC82  F01A         	call	_printf	;wreg free
  8305  00143E  0012               	return		;funcret
  8306  001440                     __end_of_dispLogPoleDet:
  8307                           	opt callstack 0
  8308                           
  8309 ;; *************** function ___awmod *****************
  8310 ;; Defined at:
  8311 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  8312 ;; Parameters:    Size  Location     Type
  8313 ;;  dividend        2    6[COMRAM] int 
  8314 ;;  divisor         2    8[COMRAM] int 
  8315 ;; Auto vars:     Size  Location     Type
  8316 ;;  sign            1   11[COMRAM] unsigned char 
  8317 ;;  counter         1   10[COMRAM] unsigned char 
  8318 ;; Return value:  Size  Location     Type
  8319 ;;                  2    6[COMRAM] int 
  8320 ;; Registers used:
  8321 ;;		wreg, status,2, status,0
  8322 ;; Tracked objects:
  8323 ;;		On entry : 0/0
  8324 ;;		On exit  : 0/0
  8325 ;;		Unchanged: 0/0
  8326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8327 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8328 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8330 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;Total ram usage:        6 bytes
  8332 ;; Hardware stack levels used:    1
  8333 ;; Hardware stack levels required when called:    1
  8334 ;; This function calls:
  8335 ;;		Nothing
  8336 ;; This function is called by:
  8337 ;;		_scrDonePoleDet
  8338 ;;		_dispLogPoleDet
  8339 ;; This function uses a non-reentrant model
  8340 ;;
  8341                           
  8342                           	psect	text29
  8343  002EC6                     __ptext29:
  8344                           	opt callstack 0
  8345  002EC6                     ___awmod:
  8346                           	opt callstack 28
  8347                           
  8348                           ;incstack = 0
  8349  002EC6  0E00               	movlw	0
  8350  002EC8  6E0C               	movwf	___awmod@sign,c
  8351  002ECA  AE08               	btfss	___awmod@dividend+1,7,c
  8352  002ECC  D006               	goto	l5546
  8353  002ECE  6C07               	negf	___awmod@dividend,c
  8354  002ED0  1E08               	comf	___awmod@dividend+1,f,c
  8355  002ED2  B0D8               	btfsc	status,0,c
  8356  002ED4  2A08               	incf	___awmod@dividend+1,f,c
  8357  002ED6  0E01               	movlw	1
  8358  002ED8  6E0C               	movwf	___awmod@sign,c
  8359  002EDA                     l5546:
  8360  002EDA  AE0A               	btfss	___awmod@divisor+1,7,c
  8361  002EDC  D004               	goto	l5550
  8362  002EDE  6C09               	negf	___awmod@divisor,c
  8363  002EE0  1E0A               	comf	___awmod@divisor+1,f,c
  8364  002EE2  B0D8               	btfsc	status,0,c
  8365  002EE4  2A0A               	incf	___awmod@divisor+1,f,c
  8366  002EE6                     l5550:
  8367  002EE6  5009               	movf	___awmod@divisor,w,c
  8368  002EE8  100A               	iorwf	___awmod@divisor+1,w,c
  8369  002EEA  B4D8               	btfsc	status,2,c
  8370  002EEC  D018               	goto	l5566
  8371  002EEE  0E01               	movlw	1
  8372  002EF0  6E0B               	movwf	___awmod@counter,c
  8373  002EF2  D004               	goto	l5556
  8374  002EF4                     l5554:
  8375  002EF4  90D8               	bcf	status,0,c
  8376  002EF6  3609               	rlcf	___awmod@divisor,f,c
  8377  002EF8  360A               	rlcf	___awmod@divisor+1,f,c
  8378  002EFA  2A0B               	incf	___awmod@counter,f,c
  8379  002EFC                     l5556:
  8380  002EFC  AE0A               	btfss	___awmod@divisor+1,7,c
  8381  002EFE  D7FA               	goto	l5554
  8382  002F00                     u5690:
  8383  002F00  5009               	movf	___awmod@divisor,w,c
  8384  002F02  5C07               	subwf	___awmod@dividend,w,c
  8385  002F04  500A               	movf	___awmod@divisor+1,w,c
  8386  002F06  5808               	subwfb	___awmod@dividend+1,w,c
  8387  002F08  A0D8               	btfss	status,0,c
  8388  002F0A  D004               	goto	l5562
  8389  002F0C  5009               	movf	___awmod@divisor,w,c
  8390  002F0E  5E07               	subwf	___awmod@dividend,f,c
  8391  002F10  500A               	movf	___awmod@divisor+1,w,c
  8392  002F12  5A08               	subwfb	___awmod@dividend+1,f,c
  8393  002F14                     l5562:
  8394  002F14  90D8               	bcf	status,0,c
  8395  002F16  320A               	rrcf	___awmod@divisor+1,f,c
  8396  002F18  3209               	rrcf	___awmod@divisor,f,c
  8397  002F1A  2E0B               	decfsz	___awmod@counter,f,c
  8398  002F1C  D7F1               	goto	u5690
  8399  002F1E                     l5566:
  8400  002F1E  500C               	movf	___awmod@sign,w,c
  8401  002F20  B4D8               	btfsc	status,2,c
  8402  002F22  D004               	goto	l5570
  8403  002F24  6C07               	negf	___awmod@dividend,c
  8404  002F26  1E08               	comf	___awmod@dividend+1,f,c
  8405  002F28  B0D8               	btfsc	status,0,c
  8406  002F2A  2A08               	incf	___awmod@dividend+1,f,c
  8407  002F2C                     l5570:
  8408  002F2C  C007  F007         	movff	___awmod@dividend,?___awmod
  8409  002F30  C008  F008         	movff	___awmod@dividend+1,?___awmod+1
  8410  002F34  0012               	return		;funcret
  8411  002F36                     __end_of___awmod:
  8412                           	opt callstack 0
  8413                           
  8414 ;; *************** function ___awdiv *****************
  8415 ;; Defined at:
  8416 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  8417 ;; Parameters:    Size  Location     Type
  8418 ;;  dividend        2   12[COMRAM] int 
  8419 ;;  divisor         2   14[COMRAM] int 
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;  quotient        2   18[COMRAM] int 
  8422 ;;  sign            1   17[COMRAM] unsigned char 
  8423 ;;  counter         1   16[COMRAM] unsigned char 
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  2   12[COMRAM] int 
  8426 ;; Registers used:
  8427 ;;		wreg, status,2, status,0
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8433 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8434 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8436 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8437 ;;Total ram usage:        8 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    1
  8440 ;; This function calls:
  8441 ;;		Nothing
  8442 ;; This function is called by:
  8443 ;;		_scrDonePoleDet
  8444 ;;		_dispLogPoleDet
  8445 ;;		_runOp
  8446 ;; This function uses a non-reentrant model
  8447 ;;
  8448                           
  8449                           	psect	text30
  8450  002DC0                     __ptext30:
  8451                           	opt callstack 0
  8452  002DC0                     ___awdiv:
  8453                           	opt callstack 28
  8454                           
  8455                           ;incstack = 0
  8456  002DC0  0E00               	movlw	0
  8457  002DC2  6E12               	movwf	___awdiv@sign,c
  8458  002DC4  AE10               	btfss	___awdiv@divisor+1,7,c
  8459  002DC6  D006               	goto	l5502
  8460  002DC8  6C0F               	negf	___awdiv@divisor,c
  8461  002DCA  1E10               	comf	___awdiv@divisor+1,f,c
  8462  002DCC  B0D8               	btfsc	status,0,c
  8463  002DCE  2A10               	incf	___awdiv@divisor+1,f,c
  8464  002DD0  0E01               	movlw	1
  8465  002DD2  6E12               	movwf	___awdiv@sign,c
  8466  002DD4                     l5502:
  8467  002DD4  AE0E               	btfss	___awdiv@dividend+1,7,c
  8468  002DD6  D006               	goto	l5508
  8469  002DD8  6C0D               	negf	___awdiv@dividend,c
  8470  002DDA  1E0E               	comf	___awdiv@dividend+1,f,c
  8471  002DDC  B0D8               	btfsc	status,0,c
  8472  002DDE  2A0E               	incf	___awdiv@dividend+1,f,c
  8473  002DE0  0E01               	movlw	1
  8474  002DE2  1A12               	xorwf	___awdiv@sign,f,c
  8475  002DE4                     l5508:
  8476  002DE4  0E00               	movlw	0
  8477  002DE6  6E14               	movwf	___awdiv@quotient+1,c
  8478  002DE8  0E00               	movlw	0
  8479  002DEA  6E13               	movwf	___awdiv@quotient,c
  8480  002DEC  500F               	movf	___awdiv@divisor,w,c
  8481  002DEE  1010               	iorwf	___awdiv@divisor+1,w,c
  8482  002DF0  B4D8               	btfsc	status,2,c
  8483  002DF2  D01C               	goto	l5530
  8484  002DF4  0E01               	movlw	1
  8485  002DF6  6E11               	movwf	___awdiv@counter,c
  8486  002DF8  D004               	goto	l5516
  8487  002DFA                     l5514:
  8488  002DFA  90D8               	bcf	status,0,c
  8489  002DFC  360F               	rlcf	___awdiv@divisor,f,c
  8490  002DFE  3610               	rlcf	___awdiv@divisor+1,f,c
  8491  002E00  2A11               	incf	___awdiv@counter,f,c
  8492  002E02                     l5516:
  8493  002E02  AE10               	btfss	___awdiv@divisor+1,7,c
  8494  002E04  D7FA               	goto	l5514
  8495  002E06                     u5630:
  8496  002E06  90D8               	bcf	status,0,c
  8497  002E08  3613               	rlcf	___awdiv@quotient,f,c
  8498  002E0A  3614               	rlcf	___awdiv@quotient+1,f,c
  8499  002E0C  500F               	movf	___awdiv@divisor,w,c
  8500  002E0E  5C0D               	subwf	___awdiv@dividend,w,c
  8501  002E10  5010               	movf	___awdiv@divisor+1,w,c
  8502  002E12  580E               	subwfb	___awdiv@dividend+1,w,c
  8503  002E14  A0D8               	btfss	status,0,c
  8504  002E16  D005               	goto	l5526
  8505  002E18  500F               	movf	___awdiv@divisor,w,c
  8506  002E1A  5E0D               	subwf	___awdiv@dividend,f,c
  8507  002E1C  5010               	movf	___awdiv@divisor+1,w,c
  8508  002E1E  5A0E               	subwfb	___awdiv@dividend+1,f,c
  8509  002E20  8013               	bsf	___awdiv@quotient,0,c
  8510  002E22                     l5526:
  8511  002E22  90D8               	bcf	status,0,c
  8512  002E24  3210               	rrcf	___awdiv@divisor+1,f,c
  8513  002E26  320F               	rrcf	___awdiv@divisor,f,c
  8514  002E28  2E11               	decfsz	___awdiv@counter,f,c
  8515  002E2A  D7ED               	goto	u5630
  8516  002E2C                     l5530:
  8517  002E2C  5012               	movf	___awdiv@sign,w,c
  8518  002E2E  B4D8               	btfsc	status,2,c
  8519  002E30  D004               	goto	l5534
  8520  002E32  6C13               	negf	___awdiv@quotient,c
  8521  002E34  1E14               	comf	___awdiv@quotient+1,f,c
  8522  002E36  B0D8               	btfsc	status,0,c
  8523  002E38  2A14               	incf	___awdiv@quotient+1,f,c
  8524  002E3A                     l5534:
  8525  002E3A  C013  F00D         	movff	___awdiv@quotient,?___awdiv
  8526  002E3E  C014  F00E         	movff	___awdiv@quotient+1,?___awdiv+1
  8527  002E42  0012               	return		;funcret
  8528  002E44                     __end_of___awdiv:
  8529                           	opt callstack 0
  8530                           
  8531 ;; *************** function _dispLogMain *****************
  8532 ;; Defined at:
  8533 ;;		line 161 in file "lcdCode.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;  log             1    wreg     unsigned char 
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;  log             1  124[COMRAM] unsigned char 
  8538 ;; Return value:  Size  Location     Type
  8539 ;;                  1    wreg      void 
  8540 ;; Registers used:
  8541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8542 ;; Tracked objects:
  8543 ;;		On entry : 0/0
  8544 ;;		On exit  : 0/0
  8545 ;;		Unchanged: 0/0
  8546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8548 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8549 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8550 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8551 ;;Total ram usage:        2 bytes
  8552 ;; Hardware stack levels used:    1
  8553 ;; Hardware stack levels required when called:   12
  8554 ;; This function calls:
  8555 ;;		_lcdInst
  8556 ;;		_printf
  8557 ;;		_read_EEPROM
  8558 ;; This function is called by:
  8559 ;;		_main
  8560 ;; This function uses a non-reentrant model
  8561 ;;
  8562                           
  8563                           	psect	text31
  8564  002812                     __ptext31:
  8565                           	opt callstack 0
  8566  002812                     _dispLogMain:
  8567                           	opt callstack 18
  8568                           
  8569                           ;incstack = 0
  8570                           ;dispLogMain@log stored from wreg
  8571  002812  6E7D               	movwf	dispLogMain@log,c
  8572                           
  8573                           ;lcdCode.c: 163:     if (read_EEPROM(log*64+1) > 128){
  8574  002814  507D               	movf	dispLogMain@log,w,c
  8575  002816  0D40               	mullw	64
  8576  002818  28F3               	incf	prodl,w,c
  8577  00281A  ECD5  F01A         	call	_read_EEPROM
  8578  00281E  6E7C               	movwf	??_dispLogMain& (0+255),c
  8579  002820  0E80               	movlw	128
  8580  002822  647C               	cpfsgt	??_dispLogMain,c
  8581  002824  D036               	goto	l6538
  8582                           
  8583                           ;lcdCode.c: 164:         { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.0)))
      +                          ;};
  8584  002826  0E80               	movlw	128
  8585  002828  ECFD  F01A         	call	_lcdInst
  8586  00282C  0E07               	movlw	7
  8587  00282E  6E7C               	movwf	??_dispLogMain& (0+255),c
  8588  002830  0E7D               	movlw	125
  8589  002832                     u7847:
  8590  002832  2EE8               	decfsz	wreg,f,c
  8591  002834  D7FE               	bra	u7847
  8592  002836  2E7C               	decfsz	??_dispLogMain& (0+255),f,c
  8593  002838  D7FC               	bra	u7847
  8594  00283A  F000               	nop	
  8595                           
  8596                           ;lcdCode.c: 165:         printf("      ERROR      ");
  8597  00283C  0EC0               	movlw	low STR_49
  8598  00283E  6E70               	movwf	printf@fmt,c
  8599  002840  0EFC               	movlw	high STR_49
  8600  002842  6E71               	movwf	printf@fmt+1,c
  8601  002844  EC82  F01A         	call	_printf	;wreg free
  8602  002848  0EC0               	movlw	192
  8603  00284A  ECFD  F01A         	call	_lcdInst
  8604                           
  8605                           ;lcdCode.c: 167:         printf(" NO  INFORMATION ");
  8606  00284E  0EE4               	movlw	low STR_50
  8607  002850  6E70               	movwf	printf@fmt,c
  8608  002852  0EFC               	movlw	high STR_50
  8609  002854  6E71               	movwf	printf@fmt+1,c
  8610  002856  EC82  F01A         	call	_printf	;wreg free
  8611  00285A  0E90               	movlw	144
  8612  00285C  ECFD  F01A         	call	_lcdInst
  8613                           
  8614                           ;lcdCode.c: 169:         printf("      STORED     ",read_EEPROM(log*64+1));
  8615  002860  0ED2               	movlw	low STR_51
  8616  002862  6E70               	movwf	printf@fmt,c
  8617  002864  0EFC               	movlw	high STR_51
  8618  002866  6E71               	movwf	printf@fmt+1,c
  8619  002868  507D               	movf	dispLogMain@log,w,c
  8620  00286A  0D40               	mullw	64
  8621  00286C  28F3               	incf	prodl,w,c
  8622  00286E  ECD5  F01A         	call	_read_EEPROM
  8623  002872  6E7C               	movwf	??_dispLogMain& (0+255),c
  8624  002874  507C               	movf	??_dispLogMain,w,c
  8625  002876  6E72               	movwf	?_printf+2,c
  8626  002878  6A73               	clrf	?_printf+3,c
  8627  00287A  EC82  F01A         	call	_printf	;wreg free
  8628  00287E  0ED0               	movlw	208
  8629  002880  ECFD  F01A         	call	_lcdInst
  8630                           
  8631                           ;lcdCode.c: 171:         printf("-----0:MENU-----");
  8632  002884  0ED4               	movlw	low STR_12
  8633  002886  6E70               	movwf	printf@fmt,c
  8634  002888  0EFE               	movlw	high STR_12
  8635  00288A  6E71               	movwf	printf@fmt+1,c
  8636  00288C  EC82  F01A         	call	_printf	;wreg free
  8637                           
  8638                           ;lcdCode.c: 172:     } else {
  8639  002890  0012               	return	
  8640  002892                     l6538:
  8641                           
  8642                           ;lcdCode.c: 173:         { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.0)))
      +                          ;};
  8643  002892  0E80               	movlw	128
  8644  002894  ECFD  F01A         	call	_lcdInst
  8645  002898  0E07               	movlw	7
  8646  00289A  6E7C               	movwf	??_dispLogMain& (0+255),c
  8647  00289C  0E7D               	movlw	125
  8648  00289E                     u7857:
  8649  00289E  2EE8               	decfsz	wreg,f,c
  8650  0028A0  D7FE               	bra	u7857
  8651  0028A2  2E7C               	decfsz	??_dispLogMain& (0+255),f,c
  8652  0028A4  D7FC               	bra	u7857
  8653  0028A6  F000               	nop	
  8654                           
  8655                           ;lcdCode.c: 174:         printf("--SHOWING  LOG--");
  8656  0028A8  0EF6               	movlw	low STR_53
  8657  0028AA  6E70               	movwf	printf@fmt,c
  8658  0028AC  0EFE               	movlw	high STR_53
  8659  0028AE  6E71               	movwf	printf@fmt+1,c
  8660  0028B0  EC82  F01A         	call	_printf	;wreg free
  8661  0028B4  0EC0               	movlw	192
  8662  0028B6  ECFD  F01A         	call	_lcdInst
  8663                           
  8664                           ;lcdCode.c: 176:         printf("7: GENERAL INFO ");
  8665  0028BA  0EF7               	movlw	low STR_6
  8666  0028BC  6E70               	movwf	printf@fmt,c
  8667  0028BE  0EFD               	movlw	high STR_6
  8668  0028C0  6E71               	movwf	printf@fmt+1,c
  8669  0028C2  EC82  F01A         	call	_printf	;wreg free
  8670  0028C6  0E90               	movlw	144
  8671  0028C8  ECFD  F01A         	call	_lcdInst
  8672                           
  8673                           ;lcdCode.c: 178:         printf("9: POLE DETAILS ");
  8674  0028CC  0E08               	movlw	low STR_7
  8675  0028CE  6E70               	movwf	printf@fmt,c
  8676  0028D0  0EFE               	movlw	high STR_7
  8677  0028D2  6E71               	movwf	printf@fmt+1,c
  8678  0028D4  EC82  F01A         	call	_printf	;wreg free
  8679  0028D8  0ED0               	movlw	208
  8680  0028DA  ECFD  F01A         	call	_lcdInst
  8681                           
  8682                           ;lcdCode.c: 180:         printf("-----0:DONE-----");
  8683  0028DE  0EC3               	movlw	low STR_8
  8684  0028E0  6E70               	movwf	printf@fmt,c
  8685  0028E2  0EFE               	movlw	high STR_8
  8686  0028E4  6E71               	movwf	printf@fmt+1,c
  8687  0028E6  EC82  F01A         	call	_printf	;wreg free
  8688  0028EA  0012               	return		;funcret
  8689  0028EC                     __end_of_dispLogMain:
  8690                           	opt callstack 0
  8691                           
  8692 ;; *************** function _dispLogGen *****************
  8693 ;; Defined at:
  8694 ;;		line 184 in file "lcdCode.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;  log             1    wreg     unsigned char 
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;  log             1  124[COMRAM] unsigned char 
  8699 ;; Return value:  Size  Location     Type
  8700 ;;                  1    wreg      void 
  8701 ;; Registers used:
  8702 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8703 ;; Tracked objects:
  8704 ;;		On entry : 0/0
  8705 ;;		On exit  : 0/0
  8706 ;;		Unchanged: 0/0
  8707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8709 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8710 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8711 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8712 ;;Total ram usage:        2 bytes
  8713 ;; Hardware stack levels used:    1
  8714 ;; Hardware stack levels required when called:   12
  8715 ;; This function calls:
  8716 ;;		_lcdInst
  8717 ;;		_printf
  8718 ;;		_read_EEPROM
  8719 ;; This function is called by:
  8720 ;;		_main
  8721 ;; This function uses a non-reentrant model
  8722 ;;
  8723                           
  8724                           	psect	text32
  8725  0024F0                     __ptext32:
  8726                           	opt callstack 0
  8727  0024F0                     _dispLogGen:
  8728                           	opt callstack 18
  8729                           
  8730                           ;incstack = 0
  8731                           ;dispLogGen@log stored from wreg
  8732  0024F0  6E7D               	movwf	dispLogGen@log,c
  8733                           
  8734                           ;lcdCode.c: 185:     if (read_EEPROM(log*64+1) > 128){
  8735  0024F2  507D               	movf	dispLogGen@log,w,c
  8736  0024F4  0D40               	mullw	64
  8737  0024F6  28F3               	incf	prodl,w,c
  8738  0024F8  ECD5  F01A         	call	_read_EEPROM
  8739  0024FC  6E7C               	movwf	??_dispLogGen& (0+255),c
  8740  0024FE  0E80               	movlw	128
  8741  002500  647C               	cpfsgt	??_dispLogGen,c
  8742  002502  D036               	goto	l6576
  8743                           
  8744                           ;lcdCode.c: 186:         { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.0)))
      +                          ;};
  8745  002504  0E80               	movlw	128
  8746  002506  ECFD  F01A         	call	_lcdInst
  8747  00250A  0E07               	movlw	7
  8748  00250C  6E7C               	movwf	??_dispLogGen& (0+255),c
  8749  00250E  0E7D               	movlw	125
  8750  002510                     u7867:
  8751  002510  2EE8               	decfsz	wreg,f,c
  8752  002512  D7FE               	bra	u7867
  8753  002514  2E7C               	decfsz	??_dispLogGen& (0+255),f,c
  8754  002516  D7FC               	bra	u7867
  8755  002518  F000               	nop	
  8756                           
  8757                           ;lcdCode.c: 187:         printf("      ERROR      ");
  8758  00251A  0EC0               	movlw	low STR_49
  8759  00251C  6E70               	movwf	printf@fmt,c
  8760  00251E  0EFC               	movlw	high STR_49
  8761  002520  6E71               	movwf	printf@fmt+1,c
  8762  002522  EC82  F01A         	call	_printf	;wreg free
  8763  002526  0EC0               	movlw	192
  8764  002528  ECFD  F01A         	call	_lcdInst
  8765                           
  8766                           ;lcdCode.c: 189:         printf(" NO  INFORMATION ");
  8767  00252C  0EE4               	movlw	low STR_50
  8768  00252E  6E70               	movwf	printf@fmt,c
  8769  002530  0EFC               	movlw	high STR_50
  8770  002532  6E71               	movwf	printf@fmt+1,c
  8771  002534  EC82  F01A         	call	_printf	;wreg free
  8772  002538  0E90               	movlw	144
  8773  00253A  ECFD  F01A         	call	_lcdInst
  8774                           
  8775                           ;lcdCode.c: 191:         printf("      STORED     ",read_EEPROM(log*64+1));
  8776  00253E  0ED2               	movlw	low STR_51
  8777  002540  6E70               	movwf	printf@fmt,c
  8778  002542  0EFC               	movlw	high STR_51
  8779  002544  6E71               	movwf	printf@fmt+1,c
  8780  002546  507D               	movf	dispLogGen@log,w,c
  8781  002548  0D40               	mullw	64
  8782  00254A  28F3               	incf	prodl,w,c
  8783  00254C  ECD5  F01A         	call	_read_EEPROM
  8784  002550  6E7C               	movwf	??_dispLogGen& (0+255),c
  8785  002552  507C               	movf	??_dispLogGen,w,c
  8786  002554  6E72               	movwf	?_printf+2,c
  8787  002556  6A73               	clrf	?_printf+3,c
  8788  002558  EC82  F01A         	call	_printf	;wreg free
  8789  00255C  0ED0               	movlw	208
  8790  00255E  ECFD  F01A         	call	_lcdInst
  8791                           
  8792                           ;lcdCode.c: 193:         printf("-----0:MENU-----");
  8793  002562  0ED4               	movlw	low STR_12
  8794  002564  6E70               	movwf	printf@fmt,c
  8795  002566  0EFE               	movlw	high STR_12
  8796  002568  6E71               	movwf	printf@fmt+1,c
  8797  00256A  EC82  F01A         	call	_printf	;wreg free
  8798                           
  8799                           ;lcdCode.c: 194:     } else {
  8800  00256E  0012               	return	
  8801  002570                     l6576:
  8802                           
  8803                           ;lcdCode.c: 195:         { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.0)))
      +                          ;};
  8804  002570  0E80               	movlw	128
  8805  002572  ECFD  F01A         	call	_lcdInst
  8806  002576  0E07               	movlw	7
  8807  002578  6E7C               	movwf	??_dispLogGen& (0+255),c
  8808  00257A  0E7D               	movlw	125
  8809  00257C                     u7877:
  8810  00257C  2EE8               	decfsz	wreg,f,c
  8811  00257E  D7FE               	bra	u7877
  8812  002580  2E7C               	decfsz	??_dispLogGen& (0+255),f,c
  8813  002582  D7FC               	bra	u7877
  8814  002584  F000               	nop	
  8815                           
  8816                           ;lcdCode.c: 196:         printf("TOTAL TIME: %3ds", read_EEPROM(log*64));
  8817  002586  0EA0               	movlw	low STR_9
  8818  002588  6E70               	movwf	printf@fmt,c
  8819  00258A  0EFF               	movlw	high STR_9
  8820  00258C  6E71               	movwf	printf@fmt+1,c
  8821  00258E  507D               	movf	dispLogGen@log,w,c
  8822  002590  0D40               	mullw	64
  8823  002592  50F3               	movf	prodl,w,c
  8824  002594  ECD5  F01A         	call	_read_EEPROM
  8825  002598  6E7C               	movwf	??_dispLogGen& (0+255),c
  8826  00259A  507C               	movf	??_dispLogGen,w,c
  8827  00259C  6E72               	movwf	?_printf+2,c
  8828  00259E  6A73               	clrf	?_printf+3,c
  8829  0025A0  EC82  F01A         	call	_printf	;wreg free
  8830  0025A4  0EC0               	movlw	192
  8831  0025A6  ECFD  F01A         	call	_lcdInst
  8832                           
  8833                           ;lcdCode.c: 198:         printf("TIRES SUPP:  %2d ",read_EEPROM(log*64+2));
  8834  0025AA  0EF6               	movlw	low STR_10
  8835  0025AC  6E70               	movwf	printf@fmt,c
  8836  0025AE  0EFC               	movlw	high STR_10
  8837  0025B0  6E71               	movwf	printf@fmt+1,c
  8838  0025B2  507D               	movf	dispLogGen@log,w,c
  8839  0025B4  0D40               	mullw	64
  8840  0025B6  50F3               	movf	prodl,w,c
  8841  0025B8  0F02               	addlw	2
  8842  0025BA  ECD5  F01A         	call	_read_EEPROM
  8843  0025BE  6E7C               	movwf	??_dispLogGen& (0+255),c
  8844  0025C0  507C               	movf	??_dispLogGen,w,c
  8845  0025C2  6E72               	movwf	?_printf+2,c
  8846  0025C4  6A73               	clrf	?_printf+3,c
  8847  0025C6  EC82  F01A         	call	_printf	;wreg free
  8848  0025CA  0E90               	movlw	144
  8849  0025CC  ECFD  F01A         	call	_lcdInst
  8850                           
  8851                           ;lcdCode.c: 200:         printf("POLE COUNT:  %2d ",read_EEPROM(log*64+1));
  8852  0025D0  0E08               	movlw	low STR_11
  8853  0025D2  6E70               	movwf	printf@fmt,c
  8854  0025D4  0EFD               	movlw	high STR_11
  8855  0025D6  6E71               	movwf	printf@fmt+1,c
  8856  0025D8  507D               	movf	dispLogGen@log,w,c
  8857  0025DA  0D40               	mullw	64
  8858  0025DC  28F3               	incf	prodl,w,c
  8859  0025DE  ECD5  F01A         	call	_read_EEPROM
  8860  0025E2  6E7C               	movwf	??_dispLogGen& (0+255),c
  8861  0025E4  507C               	movf	??_dispLogGen,w,c
  8862  0025E6  6E72               	movwf	?_printf+2,c
  8863  0025E8  6A73               	clrf	?_printf+3,c
  8864  0025EA  EC82  F01A         	call	_printf	;wreg free
  8865  0025EE  0ED0               	movlw	208
  8866  0025F0  ECFD  F01A         	call	_lcdInst
  8867                           
  8868                           ;lcdCode.c: 202:         printf("-----0:MENU-----");
  8869  0025F4  0ED4               	movlw	low STR_12
  8870  0025F6  6E70               	movwf	printf@fmt,c
  8871  0025F8  0EFE               	movlw	high STR_12
  8872  0025FA  6E71               	movwf	printf@fmt+1,c
  8873  0025FC  EC82  F01A         	call	_printf	;wreg free
  8874  002600  0012               	return		;funcret
  8875  002602                     __end_of_dispLogGen:
  8876                           	opt callstack 0
  8877                           
  8878 ;; *************** function _read_EEPROM *****************
  8879 ;; Defined at:
  8880 ;;		line 553 in file "helpers.c"
  8881 ;; Parameters:    Size  Location     Type
  8882 ;;  address         1    wreg     unsigned char 
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;  address         1    0[COMRAM] unsigned char 
  8885 ;; Return value:  Size  Location     Type
  8886 ;;                  1    wreg      unsigned char 
  8887 ;; Registers used:
  8888 ;;		wreg, status,2
  8889 ;; Tracked objects:
  8890 ;;		On entry : 0/0
  8891 ;;		On exit  : 0/0
  8892 ;;		Unchanged: 0/0
  8893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8895 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8897 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8898 ;;Total ram usage:        1 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:    1
  8901 ;; This function calls:
  8902 ;;		Nothing
  8903 ;; This function is called by:
  8904 ;;		_main
  8905 ;;		_dispLogMain
  8906 ;;		_dispLogGen
  8907 ;;		_dispLogPoleDet
  8908 ;;		_dispStateTrans
  8909 ;; This function uses a non-reentrant model
  8910 ;;
  8911                           
  8912                           	psect	text33
  8913  0035AA                     __ptext33:
  8914                           	opt callstack 0
  8915  0035AA                     _read_EEPROM:
  8916                           	opt callstack 29
  8917                           
  8918                           ;incstack = 0
  8919                           ;read_EEPROM@address stored from wreg
  8920  0035AA  6E01               	movwf	read_EEPROM@address,c
  8921  0035AC                     
  8922                           ;helpers.c: 554:     while( EECON1bits.WR ){continue;}
  8923  0035AC  B2A6               	btfsc	4006,1,c	;volsfr
  8924  0035AE  D7FE               	goto	l5352
  8925                           
  8926                           ;helpers.c: 556:     EEADR = address;
  8927  0035B0  C001  FFA9         	movff	read_EEPROM@address,4009	;volatile
  8928                           
  8929                           ;helpers.c: 557:     EECON1bits.EEPGD = 0;
  8930  0035B4  9EA6               	bcf	4006,7,c	;volsfr
  8931                           
  8932                           ;helpers.c: 558:     EECON1bits.CFGS = 0;
  8933  0035B6  9CA6               	bcf	4006,6,c	;volsfr
  8934                           
  8935                           ;helpers.c: 559:     EECON1bits.RD = 1;
  8936  0035B8  80A6               	bsf	4006,0,c	;volsfr
  8937                           
  8938                           ;helpers.c: 560:     return( EEDATA );
  8939  0035BA  50A8               	movf	4008,w,c	;volatile
  8940  0035BC  0012               	return		;funcret
  8941  0035BE                     __end_of_read_EEPROM:
  8942                           	opt callstack 0
  8943                           
  8944 ;; *************** function _printf *****************
  8945 ;; Defined at:
  8946 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  8947 ;; Parameters:    Size  Location     Type
  8948 ;;  fmt             2  111[COMRAM] PTR const unsigned char 
  8949 ;;		 -> STR_91(15), STR_90(17), STR_87(16), STR_84(16), 
  8950 ;;		 -> STR_83(17), STR_82(17), STR_81(5), STR_78(16), 
  8951 ;;		 -> STR_77(17), STR_76(17), STR_75(19), STR_74(19), 
  8952 ;;		 -> STR_73(23), STR_72(17), STR_71(17), STR_70(17), 
  8953 ;;		 -> STR_69(17), STR_68(17), STR_67(18), STR_66(18), 
  8954 ;;		 -> STR_65(18), STR_64(17), STR_63(18), STR_62(18), 
  8955 ;;		 -> STR_61(17), STR_60(17), STR_59(18), STR_58(18), 
  8956 ;;		 -> STR_57(18), STR_56(17), STR_55(17), STR_54(17), 
  8957 ;;		 -> STR_53(17), STR_52(17), STR_51(18), STR_50(18), 
  8958 ;;		 -> STR_49(18), STR_48(17), STR_47(17), STR_46(17), 
  8959 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
  8960 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
  8961 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
  8962 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
  8963 ;;		 -> STR_29(17), STR_28(17), STR_27(17), STR_26(17), 
  8964 ;;		 -> STR_25(17), STR_24(17), STR_23(17), STR_22(17), 
  8965 ;;		 -> STR_21(17), STR_20(17), STR_19(17), STR_18(17), 
  8966 ;;		 -> STR_17(17), STR_16(17), STR_15(19), STR_14(19), 
  8967 ;;		 -> STR_13(23), STR_12(17), STR_11(18), STR_10(18), 
  8968 ;;		 -> STR_9(17), STR_8(17), STR_7(17), STR_6(17), 
  8969 ;;		 -> STR_5(17), STR_4(17), STR_3(23), STR_2(23), 
  8970 ;;		 -> STR_1(17), 
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;  ap              2  121[COMRAM] PTR void [1]
  8973 ;;		 -> ?_printf(2), 
  8974 ;;  ret             2    0        int 
  8975 ;; Return value:  Size  Location     Type
  8976 ;;                  2  111[COMRAM] int 
  8977 ;; Registers used:
  8978 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8979 ;; Tracked objects:
  8980 ;;		On entry : 0/0
  8981 ;;		On exit  : 0/0
  8982 ;;		Unchanged: 0/0
  8983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8984 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8985 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8987 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8988 ;;Total ram usage:       12 bytes
  8989 ;; Hardware stack levels used:    1
  8990 ;; Hardware stack levels required when called:   11
  8991 ;; This function calls:
  8992 ;;		_vfprintf
  8993 ;; This function is called by:
  8994 ;;		_showTime
  8995 ;;		_scrDoneMain
  8996 ;;		_scrDoneGen
  8997 ;;		_scrDonePoleDet
  8998 ;;		_dispProcMode
  8999 ;;		_dispShowLogs
  9000 ;;		_dispLogMain
  9001 ;;		_dispLogGen
  9002 ;;		_dispLogPoleDet
  9003 ;;		_dispSMrun
  9004 ;;		_runOp
  9005 ;;		_dispOpProg
  9006 ;;		_detectFeedback
  9007 ;;		_tooManyTires
  9008 ;;		_lcdNorm
  9009 ;;		_dispSMsrun
  9010 ;; This function uses a non-reentrant model
  9011 ;;
  9012                           
  9013                           	psect	text34
  9014  003504                     __ptext34:
  9015                           	opt callstack 0
  9016  003504                     _printf:
  9017                           	opt callstack 18
  9018                           
  9019                           ;incstack = 0
  9020  003504  0E72               	movlw	low (?_printf+2)
  9021  003506  6E7A               	movwf	printf@ap,c
  9022  003508  0E00               	movlw	high (?_printf+2)
  9023  00350A  6E7B               	movwf	printf@ap+1,c
  9024  00350C  0E00               	movlw	0
  9025  00350E  6E68               	movwf	vfprintf@fp,c
  9026  003510  0E00               	movlw	0
  9027  003512  6E69               	movwf	vfprintf@fp+1,c
  9028  003514  C070  F06A         	movff	printf@fmt,vfprintf@fmt
  9029  003518  C071  F06B         	movff	printf@fmt+1,vfprintf@fmt+1
  9030  00351C  0E7A               	movlw	low printf@ap
  9031  00351E  6E6C               	movwf	vfprintf@ap,c
  9032  003520  0E00               	movlw	high printf@ap
  9033  003522  6E6D               	movwf	vfprintf@ap+1,c
  9034  003524  ECFA  F018         	call	_vfprintf	;wreg free
  9035  003528  0012               	return		;funcret
  9036  00352A                     __end_of_printf:
  9037                           	opt callstack 0
  9038                           
  9039 ;; *************** function _vfprintf *****************
  9040 ;; Defined at:
  9041 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;  fp              2  103[COMRAM] PTR struct _IO_FILE
  9044 ;;		 -> NULL(0), 
  9045 ;;  fmt             2  105[COMRAM] PTR const unsigned char 
  9046 ;;		 -> STR_91(15), STR_90(17), STR_87(16), STR_84(16), 
  9047 ;;		 -> STR_83(17), STR_82(17), STR_81(5), STR_78(16), 
  9048 ;;		 -> STR_77(17), STR_76(17), STR_75(19), STR_74(19), 
  9049 ;;		 -> STR_73(23), STR_72(17), STR_71(17), STR_70(17), 
  9050 ;;		 -> STR_69(17), STR_68(17), STR_67(18), STR_66(18), 
  9051 ;;		 -> STR_65(18), STR_64(17), STR_63(18), STR_62(18), 
  9052 ;;		 -> STR_61(17), STR_60(17), STR_59(18), STR_58(18), 
  9053 ;;		 -> STR_57(18), STR_56(17), STR_55(17), STR_54(17), 
  9054 ;;		 -> STR_53(17), STR_52(17), STR_51(18), STR_50(18), 
  9055 ;;		 -> STR_49(18), STR_48(17), STR_47(17), STR_46(17), 
  9056 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
  9057 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
  9058 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
  9059 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
  9060 ;;		 -> STR_29(17), STR_28(17), STR_27(17), STR_26(17), 
  9061 ;;		 -> STR_25(17), STR_24(17), STR_23(17), STR_22(17), 
  9062 ;;		 -> STR_21(17), STR_20(17), STR_19(17), STR_18(17), 
  9063 ;;		 -> STR_17(17), STR_16(17), STR_15(19), STR_14(19), 
  9064 ;;		 -> STR_13(23), STR_12(17), STR_11(18), STR_10(18), 
  9065 ;;		 -> STR_9(17), STR_8(17), STR_7(17), STR_6(17), 
  9066 ;;		 -> STR_5(17), STR_4(17), STR_3(23), STR_2(23), 
  9067 ;;		 -> STR_1(17), 
  9068 ;;  ap              2  107[COMRAM] PTR PTR void 
  9069 ;;		 -> printf@ap(2), 
  9070 ;; Auto vars:     Size  Location     Type
  9071 ;;  cfmt            2  109[COMRAM] PTR unsigned char 
  9072 ;;		 -> STR_91(15), STR_90(17), STR_87(16), STR_84(16), 
  9073 ;;		 -> STR_83(17), STR_82(17), STR_81(5), STR_78(16), 
  9074 ;;		 -> STR_77(17), STR_76(17), STR_75(19), STR_74(19), 
  9075 ;;		 -> STR_73(23), STR_72(17), STR_71(17), STR_70(17), 
  9076 ;;		 -> STR_69(17), STR_68(17), STR_67(18), STR_66(18), 
  9077 ;;		 -> STR_65(18), STR_64(17), STR_63(18), STR_62(18), 
  9078 ;;		 -> STR_61(17), STR_60(17), STR_59(18), STR_58(18), 
  9079 ;;		 -> STR_57(18), STR_56(17), STR_55(17), STR_54(17), 
  9080 ;;		 -> STR_53(17), STR_52(17), STR_51(18), STR_50(18), 
  9081 ;;		 -> STR_49(18), STR_48(17), STR_47(17), STR_46(17), 
  9082 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
  9083 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
  9084 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
  9085 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
  9086 ;;		 -> STR_29(17), STR_28(17), STR_27(17), STR_26(17), 
  9087 ;;		 -> STR_25(17), STR_24(17), STR_23(17), STR_22(17), 
  9088 ;;		 -> STR_21(17), STR_20(17), STR_19(17), STR_18(17), 
  9089 ;;		 -> STR_17(17), STR_16(17), STR_15(19), STR_14(19), 
  9090 ;;		 -> STR_13(23), STR_12(17), STR_11(18), STR_10(18), 
  9091 ;;		 -> STR_9(17), STR_8(17), STR_7(17), STR_6(17), 
  9092 ;;		 -> STR_5(17), STR_4(17), STR_3(23), STR_2(23), 
  9093 ;;		 -> STR_1(17), 
  9094 ;; Return value:  Size  Location     Type
  9095 ;;                  2  103[COMRAM] int 
  9096 ;; Registers used:
  9097 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9098 ;; Tracked objects:
  9099 ;;		On entry : 0/0
  9100 ;;		On exit  : 0/0
  9101 ;;		Unchanged: 0/0
  9102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9103 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9104 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9106 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9107 ;;Total ram usage:        8 bytes
  9108 ;; Hardware stack levels used:    1
  9109 ;; Hardware stack levels required when called:   10
  9110 ;; This function calls:
  9111 ;;		_vfpfcnvrt
  9112 ;; This function is called by:
  9113 ;;		_printf
  9114 ;; This function uses a non-reentrant model
  9115 ;;
  9116                           
  9117                           	psect	text35
  9118  0031F4                     __ptext35:
  9119                           	opt callstack 0
  9120  0031F4                     _vfprintf:
  9121                           	opt callstack 18
  9122                           
  9123                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  9124                           
  9125                           ;incstack = 0
  9126  0031F4  C06A  F06E         	movff	vfprintf@fmt,vfprintf@cfmt
  9127  0031F8  C06B  F06F         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  9128                           
  9129                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  9130  0031FC  0E00               	movlw	0
  9131  0031FE  0100               	movlb	0	; () banked
  9132  003200  6FBA               	movwf	(_nout+1)& (0+255),b
  9133  003202  0E00               	movlw	0
  9134  003204  6FB9               	movwf	_nout& (0+255),b
  9135                           
  9136                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  9137  003206  D013               	goto	l5308
  9138  003208                     l5306:
  9139                           
  9140                           ; BSR set to: 0
  9141                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  9142  003208  C068  F047         	movff	vfprintf@fp,vfpfcnvrt@fp
  9143  00320C  C069  F048         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  9144  003210  0E6E               	movlw	low vfprintf@cfmt
  9145  003212  6E49               	movwf	vfpfcnvrt@fmt,c
  9146  003214  0E00               	movlw	high vfprintf@cfmt
  9147  003216  6E4A               	movwf	vfpfcnvrt@fmt+1,c
  9148  003218  C06C  F04B         	movff	vfprintf@ap,vfpfcnvrt@ap
  9149  00321C  C06D  F04C         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  9150  003220  EC2A  F004         	call	_vfpfcnvrt	;wreg free
  9151  003224  5047               	movf	?_vfpfcnvrt,w,c
  9152  003226  0100               	movlb	0	; () banked
  9153  003228  27B9               	addwf	_nout& (0+255),f,b
  9154  00322A  5048               	movf	?_vfpfcnvrt+1,w,c
  9155  00322C  23BA               	addwfc	(_nout+1)& (0+255),f,b
  9156  00322E                     l5308:
  9157                           
  9158                           ; BSR set to: 0
  9159                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  9160  00322E  C06E  FFF6         	movff	vfprintf@cfmt,tblptrl
  9161  003232  C06F  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  9162  003236                     	if	0	;tblptru may be non-zero
  9163  003236                     	endif
  9164  003236                     	if	0	;tblptru may be non-zero
  9165  003236                     	endif
  9166  003236  0008               	tblrd		*
  9167  003238  50F5               	movf	tablat,w,c
  9168  00323A  0900               	iorlw	0
  9169  00323C  A4D8               	btfss	status,2,c
  9170  00323E  D7E4               	goto	l5306
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  9174  003240  C0B9  F068         	movff	_nout,?_vfprintf
  9175  003244  C0BA  F069         	movff	_nout+1,?_vfprintf+1
  9176                           
  9177                           ; BSR set to: 0
  9178  003248  0012               	return		;funcret
  9179  00324A                     __end_of_vfprintf:
  9180                           	opt callstack 0
  9181                           
  9182 ;; *************** function _vfpfcnvrt *****************
  9183 ;; Defined at:
  9184 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  9185 ;; Parameters:    Size  Location     Type
  9186 ;;  fp              2   70[COMRAM] PTR struct _IO_FILE
  9187 ;;		 -> NULL(0), 
  9188 ;;  fmt             2   72[COMRAM] PTR PTR unsigned char 
  9189 ;;		 -> vfprintf@cfmt(2), 
  9190 ;;  ap              2   74[COMRAM] PTR PTR void 
  9191 ;;		 -> printf@ap(2), 
  9192 ;; Auto vars:     Size  Location     Type
  9193 ;;  llu             8   95[COMRAM] unsigned long long 
  9194 ;;  ll              8   80[COMRAM] long long 
  9195 ;;  f               4    0        long long 
  9196 ;;  vp              3    0        PTR void 
  9197 ;;  ct              3    0        unsigned char [3]
  9198 ;;  done            2   90[COMRAM] int 
  9199 ;;  cp              2   88[COMRAM] PTR unsigned char 
  9200 ;;		 -> ?_printf(2), runOp@endTime(3), STR_89(5), STR_88(5), 
  9201 ;;		 -> STR_86(5), STR_85(5), STR_80(5), STR_79(5), 
  9202 ;;  i               2    0        int 
  9203 ;;  c               1   94[COMRAM] unsigned char 
  9204 ;; Return value:  Size  Location     Type
  9205 ;;                  2   70[COMRAM] int 
  9206 ;; Registers used:
  9207 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9208 ;; Tracked objects:
  9209 ;;		On entry : 0/0
  9210 ;;		On exit  : 0/0
  9211 ;;		Unchanged: 0/0
  9212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9213 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9214 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9215 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9216 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9217 ;;Total ram usage:       33 bytes
  9218 ;; Hardware stack levels used:    1
  9219 ;; Hardware stack levels required when called:    9
  9220 ;; This function calls:
  9221 ;;		_atoi
  9222 ;;		_dtoa
  9223 ;;		_fputc
  9224 ;;		_isdigit
  9225 ;;		_stoa
  9226 ;;		_utoa
  9227 ;;		_xtoa
  9228 ;; This function is called by:
  9229 ;;		_vfprintf
  9230 ;; This function uses a non-reentrant model
  9231 ;;
  9232                           
  9233                           	psect	text36
  9234  000854                     __ptext36:
  9235                           	opt callstack 0
  9236  000854                     _vfpfcnvrt:
  9237                           	opt callstack 18
  9238                           
  9239                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  9240                           
  9241                           ; BSR set to: 0
  9242                           ;incstack = 0
  9243  000854  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9244  000858  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9245  00085C  CFDE FFF6          	movff	postinc2,tblptrl
  9246  000860  CFDD FFF7          	movff	postdec2,tblptrh
  9247  000864                     	if	0	;tblptru may be non-zero
  9248  000864                     	endif
  9249  000864                     	if	0	;tblptru may be non-zero
  9250  000864                     	endif
  9251  000864  0008               	tblrd		*
  9252  000866  50F5               	movf	tablat,w,c
  9253  000868  0A25               	xorlw	37
  9254  00086A  A4D8               	btfss	status,2,c
  9255  00086C  D235               	goto	l5026
  9256                           
  9257                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  9258  00086E  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9259  000872  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9260  000876  2ADE               	incf	postinc2,f,c
  9261  000878  0E00               	movlw	0
  9262  00087A  22DD               	addwfc	postdec2,f,c
  9263                           
  9264                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  9265  00087C  0E00               	movlw	0
  9266  00087E  0100               	movlb	0	; () banked
  9267  000880  6FBC               	movwf	(_width+1)& (0+255),b
  9268  000882  0E00               	movlw	0
  9269  000884  6FBB               	movwf	_width& (0+255),b
  9270  000886  C0BB  F0BF         	movff	_width,_flags
  9271  00088A  C0BC  F0C0         	movff	_width+1,_flags+1
  9272                           
  9273                           ; BSR set to: 0
  9274                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  9275  00088E  69BD               	setf	_prec& (0+255),b
  9276  000890  69BE               	setf	(_prec+1)& (0+255),b
  9277                           
  9278                           ; BSR set to: 0
  9279                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
  9280  000892  0E00               	movlw	0
  9281  000894  6E5C               	movwf	vfpfcnvrt@done+1,c
  9282  000896  0E00               	movlw	0
  9283  000898  D019               	goto	L37
  9284  00089A                     l4922:
  9285                           
  9286                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
  9287  00089A  0100               	movlb	0	; () banked
  9288  00089C  81BF               	bsf	_flags& (0+255),0,b
  9289  00089E                     l4924:
  9290                           
  9291                           ; BSR set to: 0
  9292                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
  9293  00089E  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9294  0008A2  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9295  0008A6  2ADE               	incf	postinc2,f,c
  9296  0008A8  0E00               	movlw	0
  9297  0008AA  22DD               	addwfc	postdec2,f,c
  9298                           
  9299                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
  9300  0008AC  D032               	goto	l4948
  9301  0008AE                     l4926:
  9302                           
  9303                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
  9304  0008AE  0100               	movlb	0	; () banked
  9305  0008B0  83BF               	bsf	_flags& (0+255),1,b
  9306  0008B2  D7F5               	goto	l4924
  9307  0008B4                     l4930:
  9308                           
  9309                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
  9310  0008B4  0100               	movlb	0	; () banked
  9311  0008B6  85BF               	bsf	_flags& (0+255),2,b
  9312  0008B8  D7F2               	goto	l4924
  9313  0008BA                     l4934:
  9314                           
  9315                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
  9316  0008BA  0100               	movlb	0	; () banked
  9317  0008BC  87BF               	bsf	_flags& (0+255),3,b
  9318  0008BE  D7EF               	goto	l4924
  9319  0008C0                     l4938:
  9320                           
  9321                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
  9322  0008C0  0100               	movlb	0	; () banked
  9323  0008C2  89BF               	bsf	_flags& (0+255),4,b
  9324  0008C4  D7EC               	goto	l4924
  9325  0008C6                     l4942:
  9326                           
  9327                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
  9328  0008C6  0E00               	movlw	0
  9329  0008C8  6E5C               	movwf	vfpfcnvrt@done+1,c
  9330  0008CA  0E01               	movlw	1
  9331  0008CC                     L37:
  9332  0008CC  6E5B               	movwf	vfpfcnvrt@done,c
  9333                           
  9334                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
  9335  0008CE  D021               	goto	l4948
  9336  0008D0                     l4946:
  9337  0008D0  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9338  0008D4  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9339  0008D8  CFDE FFF6          	movff	postinc2,tblptrl
  9340  0008DC  CFDD FFF7          	movff	postdec2,tblptrh
  9341  0008E0                     	if	0	;tblptru may be non-zero
  9342  0008E0                     	endif
  9343  0008E0                     	if	0	;tblptru may be non-zero
  9344  0008E0                     	endif
  9345  0008E0  0008               	tblrd		*
  9346  0008E2  50F5               	movf	tablat,w,c
  9347  0008E4  6E4D               	movwf	??_vfpfcnvrt& (0+255),c
  9348  0008E6  6A4E               	clrf	(??_vfpfcnvrt+1)& (0+255),c
  9349                           
  9350                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9351                           ; Switch size 1, requested type "simple"
  9352                           ; Number of cases is 1, Range of values is 0 to 0
  9353                           ; switch strategies available:
  9354                           ; Name         Instructions Cycles
  9355                           ; simple_byte            4     3 (average)
  9356                           ;	Chosen strategy is simple_byte
  9357  0008E8  504E               	movf	??_vfpfcnvrt+1,w,c
  9358  0008EA  0A00               	xorlw	0	; case 0
  9359  0008EC  A4D8               	btfss	status,2,c
  9360  0008EE  D7EB               	goto	l4942
  9361                           
  9362                           ; Switch size 1, requested type "simple"
  9363                           ; Number of cases is 5, Range of values is 32 to 48
  9364                           ; switch strategies available:
  9365                           ; Name         Instructions Cycles
  9366                           ; simple_byte           16     9 (average)
  9367                           ;	Chosen strategy is simple_byte
  9368  0008F0  504D               	movf	??_vfpfcnvrt,w,c
  9369  0008F2  0A20               	xorlw	32	; case 32
  9370  0008F4  B4D8               	btfsc	status,2,c
  9371  0008F6  D7E1               	goto	l4934
  9372  0008F8  0A03               	xorlw	3	; case 35
  9373  0008FA  B4D8               	btfsc	status,2,c
  9374  0008FC  D7E1               	goto	l4938
  9375  0008FE  0A08               	xorlw	8	; case 43
  9376  000900  B4D8               	btfsc	status,2,c
  9377  000902  D7D8               	goto	l4930
  9378  000904  0A06               	xorlw	6	; case 45
  9379  000906  B4D8               	btfsc	status,2,c
  9380  000908  D7C8               	goto	l4922
  9381  00090A  0A1D               	xorlw	29	; case 48
  9382  00090C  B4D8               	btfsc	status,2,c
  9383  00090E  D7CF               	goto	l4926
  9384  000910  D7DA               	goto	l4942
  9385  000912                     l4948:
  9386                           
  9387                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  9388  000912  505B               	movf	vfpfcnvrt@done,w,c
  9389  000914  105C               	iorwf	vfpfcnvrt@done+1,w,c
  9390  000916  B4D8               	btfsc	status,2,c
  9391  000918  D7DB               	goto	l4946
  9392                           
  9393                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  9394  00091A  0100               	movlb	0	; () banked
  9395  00091C  B1BF               	btfsc	_flags& (0+255),0,b
  9396                           
  9397                           ; BSR set to: 0
  9398                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  9399  00091E  93BF               	bcf	_flags& (0+255),1,b
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  9403  000920  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9404  000924  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9405  000928  CFDE FFF6          	movff	postinc2,tblptrl
  9406  00092C  CFDD FFF7          	movff	postdec2,tblptrh
  9407  000930                     	if	0	;tblptru may be non-zero
  9408  000930                     	endif
  9409  000930                     	if	0	;tblptru may be non-zero
  9410  000930                     	endif
  9411  000930  0008               	tblrd		*
  9412  000932  50F5               	movf	tablat,w,c
  9413  000934  0A2A               	xorlw	42
  9414  000936  A4D8               	btfss	status,2,c
  9415  000938  D023               	goto	l4960
  9416                           
  9417                           ; BSR set to: 0
  9418                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  9419  00093A  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9420  00093E  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9421  000942  2ADE               	incf	postinc2,f,c
  9422  000944  0E00               	movlw	0
  9423  000946  22DD               	addwfc	postdec2,f,c
  9424                           
  9425                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  9426  000948  C04B  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  9427  00094C  C04C  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  9428  000950  CFDF F04D          	movff	indf2,??_vfpfcnvrt
  9429  000954  0E02               	movlw	2
  9430  000956  26DE               	addwf	postinc2,f,c
  9431  000958  CFDF F04E          	movff	indf2,??_vfpfcnvrt+1
  9432  00095C  0E00               	movlw	0
  9433  00095E  22DD               	addwfc	postdec2,f,c
  9434  000960  C04D  FFD9         	movff	??_vfpfcnvrt,fsr2l
  9435  000964  C04E  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  9436  000968  CFDE F0BB          	movff	postinc2,_width
  9437  00096C  CFDD F0BC          	movff	postdec2,_width+1
  9438                           
  9439                           ; BSR set to: 0
  9440                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  9441  000970  AFBC               	btfss	(_width+1)& (0+255),7,b
  9442  000972  D03F               	goto	u4920
  9443                           
  9444                           ; BSR set to: 0
  9445                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  9446  000974  81BF               	bsf	_flags& (0+255),0,b
  9447                           
  9448                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  9449  000976  6DBB               	negf	_width& (0+255),b
  9450  000978  1FBC               	comf	(_width+1)& (0+255),f,b
  9451  00097A  B0D8               	btfsc	status,0,c
  9452  00097C  2BBC               	incf	(_width+1)& (0+255),f,b
  9453  00097E  D039               	goto	u4920
  9454  000980                     l4960:
  9455                           
  9456                           ; BSR set to: 0
  9457                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  9458  000980  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9459  000984  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9460  000988  CFDE F008          	movff	postinc2,atoi@s
  9461  00098C  CFDD F009          	movff	postdec2,atoi@s+1
  9462  000990  ECAA  F010         	call	_atoi	;wreg free
  9463  000994  C008  F0BB         	movff	?_atoi,_width
  9464  000998  C009  F0BC         	movff	?_atoi+1,_width+1
  9465                           
  9466                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  9467  00099C  D007               	goto	l4964
  9468  00099E                     l4962:
  9469                           
  9470                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  9471  00099E  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9472  0009A2  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9473  0009A6  2ADE               	incf	postinc2,f,c
  9474  0009A8  0E00               	movlw	0
  9475  0009AA  22DD               	addwfc	postdec2,f,c
  9476  0009AC                     l4964:
  9477  0009AC  0ED0               	movlw	208
  9478  0009AE  6E4D               	movwf	??_vfpfcnvrt& (0+255),c
  9479  0009B0  0EFF               	movlw	255
  9480  0009B2  6E4E               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  9481  0009B4  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9482  0009B8  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9483  0009BC  CFDE FFF6          	movff	postinc2,tblptrl
  9484  0009C0  CFDD FFF7          	movff	postdec2,tblptrh
  9485  0009C4                     	if	0	;tblptru may be non-zero
  9486  0009C4                     	endif
  9487  0009C4                     	if	0	;tblptru may be non-zero
  9488  0009C4                     	endif
  9489  0009C4  0008               	tblrd		*
  9490  0009C6  50F5               	movf	tablat,w,c
  9491  0009C8  6E4F               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  9492  0009CA  6A50               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  9493  0009CC  504D               	movf	??_vfpfcnvrt,w,c
  9494  0009CE  264F               	addwf	??_vfpfcnvrt+2,f,c
  9495  0009D0  504E               	movf	??_vfpfcnvrt+1,w,c
  9496  0009D2  2250               	addwfc	??_vfpfcnvrt+3,f,c
  9497  0009D4  5050               	movf	??_vfpfcnvrt+3,w,c
  9498  0009D6  E106               	bnz	u4900
  9499  0009D8  0E0A               	movlw	10
  9500  0009DA  5C4F               	subwf	??_vfpfcnvrt+2,w,c
  9501  0009DC  B0D8               	btfsc	status,0,c
  9502  0009DE  D002               	goto	u4900
  9503  0009E0  0E01               	movlw	1
  9504  0009E2  D001               	goto	u4910
  9505  0009E4                     u4900:
  9506  0009E4  0E00               	movlw	0
  9507  0009E6                     u4910:
  9508  0009E6  6E5D               	movwf	_vfpfcnvrt$1522,c
  9509  0009E8  6A5E               	clrf	_vfpfcnvrt$1522+1,c
  9510  0009EA  505D               	movf	_vfpfcnvrt$1522,w,c
  9511  0009EC  105E               	iorwf	_vfpfcnvrt$1522+1,w,c
  9512  0009EE  A4D8               	btfss	status,2,c
  9513  0009F0  D7D6               	goto	l4962
  9514  0009F2                     u4920:
  9515                           
  9516                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  9517  0009F2  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9518  0009F6  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9519  0009FA  CFDE FFF6          	movff	postinc2,tblptrl
  9520  0009FE  CFDD FFF7          	movff	postdec2,tblptrh
  9521  000A02                     	if	0	;tblptru may be non-zero
  9522  000A02                     	endif
  9523  000A02                     	if	0	;tblptru may be non-zero
  9524  000A02                     	endif
  9525  000A02  0008               	tblrd		*
  9526  000A04  50F5               	movf	tablat,w,c
  9527  000A06  0A64               	xorlw	100
  9528  000A08  B4D8               	btfsc	status,2,c
  9529  000A0A  D00D               	goto	u4940
  9530  000A0C  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9531  000A10  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9532  000A14  CFDE FFF6          	movff	postinc2,tblptrl
  9533  000A18  CFDD FFF7          	movff	postdec2,tblptrh
  9534  000A1C                     	if	0	;tblptru may be non-zero
  9535  000A1C                     	endif
  9536  000A1C                     	if	0	;tblptru may be non-zero
  9537  000A1C                     	endif
  9538  000A1C  0008               	tblrd		*
  9539  000A1E  50F5               	movf	tablat,w,c
  9540  000A20  0A69               	xorlw	105
  9541  000A22  A4D8               	btfss	status,2,c
  9542  000A24  D03F               	goto	l4980
  9543  000A26                     u4940:
  9544                           
  9545                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  9546  000A26  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9547  000A2A  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9548  000A2E  2ADE               	incf	postinc2,f,c
  9549  000A30  0E00               	movlw	0
  9550  000A32  22DD               	addwfc	postdec2,f,c
  9551                           
  9552                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  9553  000A34  C04B  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  9554  000A38  C04C  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  9555  000A3C  CFDF F04D          	movff	indf2,??_vfpfcnvrt
  9556  000A40  0E02               	movlw	2
  9557  000A42  26DE               	addwf	postinc2,f,c
  9558  000A44  CFDF F04E          	movff	indf2,??_vfpfcnvrt+1
  9559  000A48  0E00               	movlw	0
  9560  000A4A  22DD               	addwfc	postdec2,f,c
  9561  000A4C  C04D  FFD9         	movff	??_vfpfcnvrt,fsr2l
  9562  000A50  C04E  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  9563  000A54  CFDE F051          	movff	postinc2,vfpfcnvrt@ll
  9564  000A58  CFDD F052          	movff	postdec2,vfpfcnvrt@ll+1
  9565  000A5C  0E00               	movlw	0
  9566  000A5E  BE52               	btfsc	vfpfcnvrt@ll+1,7,c
  9567  000A60  0EFF               	movlw	-1
  9568  000A62  6E53               	movwf	vfpfcnvrt@ll+2,c
  9569  000A64  6E54               	movwf	vfpfcnvrt@ll+3,c
  9570  000A66  6E55               	movwf	vfpfcnvrt@ll+4,c
  9571  000A68  6E56               	movwf	vfpfcnvrt@ll+5,c
  9572  000A6A  6E57               	movwf	vfpfcnvrt@ll+6,c
  9573  000A6C  6E58               	movwf	vfpfcnvrt@ll+7,c
  9574                           
  9575                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  9576  000A6E  C047  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  9577  000A72  C048  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  9578  000A76  C051  F022         	movff	vfpfcnvrt@ll,dtoa@d
  9579  000A7A  C052  F023         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  9580  000A7E  C053  F024         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  9581  000A82  C054  F025         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  9582  000A86  C055  F026         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  9583  000A8A  C056  F027         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  9584  000A8E  C057  F028         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  9585  000A92  C058  F029         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  9586  000A96  ECE5  F007         	call	_dtoa	;wreg free
  9587  000A9A  C020  F047         	movff	?_dtoa,?_vfpfcnvrt
  9588  000A9E  C021  F048         	movff	?_dtoa+1,?_vfpfcnvrt+1
  9589  000AA2  0012               	return	
  9590  000AA4                     l4980:
  9591                           
  9592                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1149:      
      +                             if (*fmt[0] == 's') {
  9593  000AA4  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9594  000AA8  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9595  000AAC  CFDE FFF6          	movff	postinc2,tblptrl
  9596  000AB0  CFDD FFF7          	movff	postdec2,tblptrh
  9597  000AB4                     	if	0	;tblptru may be non-zero
  9598  000AB4                     	endif
  9599  000AB4                     	if	0	;tblptru may be non-zero
  9600  000AB4                     	endif
  9601  000AB4  0008               	tblrd		*
  9602  000AB6  50F5               	movf	tablat,w,c
  9603  000AB8  0A73               	xorlw	115
  9604  000ABA  A4D8               	btfss	status,2,c
  9605  000ABC  D02A               	goto	l4988
  9606                           
  9607                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1151:      
      +                                 ++*fmt;
  9608  000ABE  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9609  000AC2  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9610  000AC6  2ADE               	incf	postinc2,f,c
  9611  000AC8  0E00               	movlw	0
  9612  000ACA  22DD               	addwfc	postdec2,f,c
  9613                           
  9614                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1152:      
      +                                 cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0));
  9615  000ACC  C04B  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  9616  000AD0  C04C  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  9617  000AD4  CFDF F04D          	movff	indf2,??_vfpfcnvrt
  9618  000AD8  0E02               	movlw	2
  9619  000ADA  26DE               	addwf	postinc2,f,c
  9620  000ADC  CFDF F04E          	movff	indf2,??_vfpfcnvrt+1
  9621  000AE0  0E00               	movlw	0
  9622  000AE2  22DD               	addwfc	postdec2,f,c
  9623  000AE4  C04D  FFD9         	movff	??_vfpfcnvrt,fsr2l
  9624  000AE8  C04E  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  9625  000AEC  CFDE F059          	movff	postinc2,vfpfcnvrt@cp
  9626  000AF0  CFDD F05A          	movff	postdec2,vfpfcnvrt@cp+1
  9627                           
  9628                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1154:      
      +                                 return stoa(fp, cp);
  9629  000AF4  C047  F00E         	movff	vfpfcnvrt@fp,stoa@fp
  9630  000AF8  C048  F00F         	movff	vfpfcnvrt@fp+1,stoa@fp+1
  9631  000AFC  C059  F010         	movff	vfpfcnvrt@cp,stoa@s
  9632  000B00  C05A  F011         	movff	vfpfcnvrt@cp+1,stoa@s+1
  9633  000B04  EC08  F010         	call	_stoa	;wreg free
  9634  000B08  C00E  F047         	movff	?_stoa,?_vfpfcnvrt
  9635  000B0C  C00F  F048         	movff	?_stoa+1,?_vfpfcnvrt+1
  9636  000B10  0012               	return	
  9637  000B12                     l4988:
  9638                           
  9639                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1182:      
      +                             if (*fmt[0] == 'u') {
  9640  000B12  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9641  000B16  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9642  000B1A  CFDE FFF6          	movff	postinc2,tblptrl
  9643  000B1E  CFDD FFF7          	movff	postdec2,tblptrh
  9644  000B22                     	if	0	;tblptru may be non-zero
  9645  000B22                     	endif
  9646  000B22                     	if	0	;tblptru may be non-zero
  9647  000B22                     	endif
  9648  000B22  0008               	tblrd		*
  9649  000B24  50F5               	movf	tablat,w,c
  9650  000B26  0A75               	xorlw	117
  9651  000B28  A4D8               	btfss	status,2,c
  9652  000B2A  D040               	goto	l4996
  9653                           
  9654                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1184:      
      +                                 ++*fmt;
  9655  000B2C  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9656  000B30  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9657  000B34  2ADE               	incf	postinc2,f,c
  9658  000B36  0E00               	movlw	0
  9659  000B38  22DD               	addwfc	postdec2,f,c
  9660                           
  9661                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1185:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  9662  000B3A  C04B  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  9663  000B3E  C04C  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  9664  000B42  CFDF F04D          	movff	indf2,??_vfpfcnvrt
  9665  000B46  0E02               	movlw	2
  9666  000B48  26DE               	addwf	postinc2,f,c
  9667  000B4A  CFDF F04E          	movff	indf2,??_vfpfcnvrt+1
  9668  000B4E  0E00               	movlw	0
  9669  000B50  22DD               	addwfc	postdec2,f,c
  9670  000B52  C04D  FFD9         	movff	??_vfpfcnvrt,fsr2l
  9671  000B56  C04E  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  9672  000B5A  CFDE F04F          	movff	postinc2,??_vfpfcnvrt+2
  9673  000B5E  CFDD F050          	movff	postdec2,??_vfpfcnvrt+3
  9674  000B62  C04F  F060         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  9675  000B66  C050  F061         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  9676  000B6A  6A62               	clrf	vfpfcnvrt@llu+2,c
  9677  000B6C  6A63               	clrf	vfpfcnvrt@llu+3,c
  9678  000B6E  6A64               	clrf	vfpfcnvrt@llu+4,c
  9679  000B70  6A65               	clrf	vfpfcnvrt@llu+5,c
  9680  000B72  6A66               	clrf	vfpfcnvrt@llu+6,c
  9681  000B74  6A67               	clrf	vfpfcnvrt@llu+7,c
  9682                           
  9683                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1187:      
      +                                 return utoa(fp, llu);
  9684  000B76  C047  F020         	movff	vfpfcnvrt@fp,utoa@fp
  9685  000B7A  C048  F021         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  9686  000B7E  C060  F022         	movff	vfpfcnvrt@llu,utoa@d
  9687  000B82  C061  F023         	movff	vfpfcnvrt@llu+1,utoa@d+1
  9688  000B86  C062  F024         	movff	vfpfcnvrt@llu+2,utoa@d+2
  9689  000B8A  C063  F025         	movff	vfpfcnvrt@llu+3,utoa@d+3
  9690  000B8E  C064  F026         	movff	vfpfcnvrt@llu+4,utoa@d+4
  9691  000B92  C065  F027         	movff	vfpfcnvrt@llu+5,utoa@d+5
  9692  000B96  C066  F028         	movff	vfpfcnvrt@llu+6,utoa@d+6
  9693  000B9A  C067  F029         	movff	vfpfcnvrt@llu+7,utoa@d+7
  9694  000B9E  EC37  F00D         	call	_utoa	;wreg free
  9695  000BA2  C020  F047         	movff	?_utoa,?_vfpfcnvrt
  9696  000BA6  C021  F048         	movff	?_utoa+1,?_vfpfcnvrt+1
  9697  000BAA  0012               	return	
  9698  000BAC                     l4996:
  9699                           
  9700                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1274:      
      +                             if ((*fmt[0] == 'x') || (*fmt[0] == 'X')) {
  9701  000BAC  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9702  000BB0  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9703  000BB4  CFDE FFF6          	movff	postinc2,tblptrl
  9704  000BB8  CFDD FFF7          	movff	postdec2,tblptrh
  9705  000BBC                     	if	0	;tblptru may be non-zero
  9706  000BBC                     	endif
  9707  000BBC                     	if	0	;tblptru may be non-zero
  9708  000BBC                     	endif
  9709  000BBC  0008               	tblrd		*
  9710  000BBE  50F5               	movf	tablat,w,c
  9711  000BC0  0A78               	xorlw	120
  9712  000BC2  B4D8               	btfsc	status,2,c
  9713  000BC4  D00D               	goto	u4980
  9714  000BC6  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9715  000BCA  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9716  000BCE  CFDE FFF6          	movff	postinc2,tblptrl
  9717  000BD2  CFDD FFF7          	movff	postdec2,tblptrh
  9718  000BD6                     	if	0	;tblptru may be non-zero
  9719  000BD6                     	endif
  9720  000BD6                     	if	0	;tblptru may be non-zero
  9721  000BD6                     	endif
  9722  000BD6  0008               	tblrd		*
  9723  000BD8  50F5               	movf	tablat,w,c
  9724  000BDA  0A58               	xorlw	88
  9725  000BDC  A4D8               	btfss	status,2,c
  9726  000BDE  D04D               	goto	l5010
  9727  000BE0                     u4980:
  9728                           
  9729                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1276:      
      +                                 c = (*fmt)[0];
  9730  000BE0  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9731  000BE4  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9732  000BE8  CFDE FFF6          	movff	postinc2,tblptrl
  9733  000BEC  CFDD FFF7          	movff	postdec2,tblptrh
  9734  000BF0                     	if	0	;tblptru may be non-zero
  9735  000BF0                     	endif
  9736  000BF0                     	if	0	;tblptru may be non-zero
  9737  000BF0                     	endif
  9738  000BF0  0008               	tblrd		*
  9739  000BF2  CFF5 F05F          	movff	tablat,vfpfcnvrt@c
  9740                           
  9741                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1277:      
      +                                 ++*fmt;
  9742  000BF6  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9743  000BFA  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9744  000BFE  2ADE               	incf	postinc2,f,c
  9745  000C00  0E00               	movlw	0
  9746  000C02  22DD               	addwfc	postdec2,f,c
  9747                           
  9748                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1278:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  9749  000C04  C04B  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  9750  000C08  C04C  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  9751  000C0C  CFDF F04D          	movff	indf2,??_vfpfcnvrt
  9752  000C10  0E02               	movlw	2
  9753  000C12  26DE               	addwf	postinc2,f,c
  9754  000C14  CFDF F04E          	movff	indf2,??_vfpfcnvrt+1
  9755  000C18  0E00               	movlw	0
  9756  000C1A  22DD               	addwfc	postdec2,f,c
  9757  000C1C  C04D  FFD9         	movff	??_vfpfcnvrt,fsr2l
  9758  000C20  C04E  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  9759  000C24  CFDE F04F          	movff	postinc2,??_vfpfcnvrt+2
  9760  000C28  CFDD F050          	movff	postdec2,??_vfpfcnvrt+3
  9761  000C2C  C04F  F060         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  9762  000C30  C050  F061         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  9763  000C34  6A62               	clrf	vfpfcnvrt@llu+2,c
  9764  000C36  6A63               	clrf	vfpfcnvrt@llu+3,c
  9765  000C38  6A64               	clrf	vfpfcnvrt@llu+4,c
  9766  000C3A  6A65               	clrf	vfpfcnvrt@llu+5,c
  9767  000C3C  6A66               	clrf	vfpfcnvrt@llu+6,c
  9768  000C3E  6A67               	clrf	vfpfcnvrt@llu+7,c
  9769                           
  9770                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1280:      
      +                                 return xtoa(fp, llu, c);
  9771  000C40  C047  F020         	movff	vfpfcnvrt@fp,xtoa@fp
  9772  000C44  C048  F021         	movff	vfpfcnvrt@fp+1,xtoa@fp+1
  9773  000C48  C060  F022         	movff	vfpfcnvrt@llu,xtoa@d
  9774  000C4C  C061  F023         	movff	vfpfcnvrt@llu+1,xtoa@d+1
  9775  000C50  C062  F024         	movff	vfpfcnvrt@llu+2,xtoa@d+2
  9776  000C54  C063  F025         	movff	vfpfcnvrt@llu+3,xtoa@d+3
  9777  000C58  C064  F026         	movff	vfpfcnvrt@llu+4,xtoa@d+4
  9778  000C5C  C065  F027         	movff	vfpfcnvrt@llu+5,xtoa@d+5
  9779  000C60  C066  F028         	movff	vfpfcnvrt@llu+6,xtoa@d+6
  9780  000C64  C067  F029         	movff	vfpfcnvrt@llu+7,xtoa@d+7
  9781  000C68  C05F  F02A         	movff	vfpfcnvrt@c,xtoa@x
  9782  000C6C  EC20  F00A         	call	_xtoa	;wreg free
  9783  000C70  C020  F047         	movff	?_xtoa,?_vfpfcnvrt
  9784  000C74  C021  F048         	movff	?_xtoa+1,?_vfpfcnvrt+1
  9785  000C78  0012               	return	
  9786  000C7A                     l5010:
  9787                           
  9788                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  9789  000C7A  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9790  000C7E  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9791  000C82  CFDE FFF6          	movff	postinc2,tblptrl
  9792  000C86  CFDD FFF7          	movff	postdec2,tblptrh
  9793  000C8A                     	if	0	;tblptru may be non-zero
  9794  000C8A                     	endif
  9795  000C8A                     	if	0	;tblptru may be non-zero
  9796  000C8A                     	endif
  9797  000C8A  0008               	tblrd		*
  9798  000C8C  50F5               	movf	tablat,w,c
  9799  000C8E  0A25               	xorlw	37
  9800  000C90  A4D8               	btfss	status,2,c
  9801  000C92  D016               	goto	l5020
  9802                           
  9803                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  9804  000C94  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9805  000C98  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9806  000C9C  2ADE               	incf	postinc2,f,c
  9807  000C9E  0E00               	movlw	0
  9808  000CA0  22DD               	addwfc	postdec2,f,c
  9809                           
  9810                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  9811  000CA2  0E00               	movlw	0
  9812  000CA4  6E06               	movwf	fputc@c+1,c
  9813  000CA6  0E25               	movlw	37
  9814  000CA8  6E05               	movwf	fputc@c,c
  9815  000CAA  C047  F007         	movff	vfpfcnvrt@fp,fputc@fp
  9816  000CAE  C048  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  9817  000CB2  ECD2  F017         	call	_fputc	;wreg free
  9818  000CB6                     l5016:
  9819                           
  9820                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  9821  000CB6  0E00               	movlw	0
  9822  000CB8  6E48               	movwf	?_vfpfcnvrt+1,c
  9823  000CBA  0E01               	movlw	1
  9824  000CBC  6E47               	movwf	?_vfpfcnvrt,c
  9825  000CBE  0012               	return	
  9826  000CC0                     l5020:
  9827                           
  9828                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  9829  000CC0  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9830  000CC4  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9831  000CC8  2ADE               	incf	postinc2,f,c
  9832  000CCA  0E00               	movlw	0
  9833  000CCC  22DD               	addwfc	postdec2,f,c
  9834                           
  9835                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  9836  000CCE  0E00               	movlw	0
  9837  000CD0  6E48               	movwf	?_vfpfcnvrt+1,c
  9838  000CD2  0E00               	movlw	0
  9839  000CD4  6E47               	movwf	?_vfpfcnvrt,c
  9840  000CD6  0012               	return	
  9841  000CD8                     l5026:
  9842                           
  9843                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  9844  000CD8  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9845  000CDC  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9846  000CE0  CFDE FFF6          	movff	postinc2,tblptrl
  9847  000CE4  CFDD FFF7          	movff	postdec2,tblptrh
  9848  000CE8                     	if	0	;tblptru may be non-zero
  9849  000CE8                     	endif
  9850  000CE8                     	if	0	;tblptru may be non-zero
  9851  000CE8                     	endif
  9852  000CE8  0008               	tblrd		*
  9853  000CEA  50F5               	movf	tablat,w,c
  9854  000CEC  6E05               	movwf	fputc@c,c
  9855  000CEE  6A06               	clrf	fputc@c+1,c
  9856  000CF0  C047  F007         	movff	vfpfcnvrt@fp,fputc@fp
  9857  000CF4  C048  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  9858  000CF8  ECD2  F017         	call	_fputc	;wreg free
  9859                           
  9860                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  9861  000CFC  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9862  000D00  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9863  000D04  2ADE               	incf	postinc2,f,c
  9864  000D06  0E00               	movlw	0
  9865  000D08  22DD               	addwfc	postdec2,f,c
  9866  000D0A  D7D5               	goto	l5016
  9867  000D0C                     __end_of_vfpfcnvrt:
  9868                           	opt callstack 0
  9869                           
  9870 ;; *************** function _xtoa *****************
  9871 ;; Defined at:
  9872 ;;		line 623 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  9873 ;; Parameters:    Size  Location     Type
  9874 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  9875 ;;		 -> NULL(0), 
  9876 ;;  d               8   33[COMRAM] unsigned long long 
  9877 ;;  x               1   41[COMRAM] unsigned char 
  9878 ;; Auto vars:     Size  Location     Type
  9879 ;;  n               8   58[COMRAM] unsigned long long 
  9880 ;;  c               2   68[COMRAM] int 
  9881 ;;  i               2   66[COMRAM] int 
  9882 ;;  w               2   56[COMRAM] int 
  9883 ;;  p               2   54[COMRAM] int 
  9884 ;; Return value:  Size  Location     Type
  9885 ;;                  2   31[COMRAM] int 
  9886 ;; Registers used:
  9887 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9888 ;; Tracked objects:
  9889 ;;		On entry : 0/0
  9890 ;;		On exit  : 0/0
  9891 ;;		Unchanged: 0/0
  9892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9893 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9894 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9895 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9896 ;;      Totals:        39       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9897 ;;Total ram usage:       39 bytes
  9898 ;; Hardware stack levels used:    1
  9899 ;; Hardware stack levels required when called:    8
  9900 ;; This function calls:
  9901 ;;		_isalpha
  9902 ;;		_isupper
  9903 ;;		_pad
  9904 ;;		_toupper
  9905 ;; This function is called by:
  9906 ;;		_vfpfcnvrt
  9907 ;; This function uses a non-reentrant model
  9908 ;;
  9909                           
  9910                           	psect	text37
  9911  001440                     __ptext37:
  9912                           	opt callstack 0
  9913  001440                     _xtoa:
  9914                           	opt callstack 18
  9915                           
  9916                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 623: static
      +                           int xtoa(FILE *fp, unsigned long long d, char x);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 624: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 625:     int c, i, p, w;;C:\Program Files (x86)\Microch
      +                          ip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 626:     unsigned long long n;;C:\Program 
      +                          Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 629:     if (!(prec < 0
      +                          )) {
  9917                           
  9918                           ;incstack = 0
  9919  001440  0100               	movlb	0	; () banked
  9920  001442  AFBE               	btfss	(_prec+1)& (0+255),7,b
  9921                           
  9922                           ; BSR set to: 0
  9923                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 630:       
      +                            flags &= ~(1 << 1);
  9924  001444  93BF               	bcf	_flags& (0+255),1,b
  9925                           
  9926                           ; BSR set to: 0
  9927                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 632:     p 
      +                          = (0 < prec) ? prec : 1;
  9928  001446  BFBE               	btfsc	(_prec+1)& (0+255),7,b
  9929  001448  D005               	goto	u4620
  9930  00144A  51BE               	movf	(_prec+1)& (0+255),w,b
  9931  00144C  E108               	bnz	l906
  9932  00144E  05BD               	decf	_prec& (0+255),w,b
  9933  001450  B0D8               	btfsc	status,0,c
  9934  001452  D005               	goto	l906
  9935  001454                     u4620:
  9936                           
  9937                           ; BSR set to: 0
  9938  001454  0E00               	movlw	0
  9939  001456  6E38               	movwf	xtoa@p+1,c
  9940  001458  0E01               	movlw	1
  9941  00145A  6E37               	movwf	xtoa@p,c
  9942  00145C  D004               	goto	l908
  9943  00145E                     l906:
  9944                           
  9945                           ; BSR set to: 0
  9946  00145E  C0BD  F037         	movff	_prec,xtoa@p
  9947  001462  C0BE  F038         	movff	_prec+1,xtoa@p+1
  9948  001466                     l908:
  9949                           
  9950                           ; BSR set to: 0
  9951                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 633:     w 
      +                          = width;
  9952  001466  C0BB  F039         	movff	_width,xtoa@w
  9953  00146A  C0BC  F03A         	movff	_width+1,xtoa@w+1
  9954                           
  9955                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 634:     if
      +                           (flags & (1 << 4)) {
  9956  00146E  A9BF               	btfss	_flags& (0+255),4,b
  9957  001470  D004               	goto	l4814
  9958                           
  9959                           ; BSR set to: 0
  9960                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 635:       
      +                            w -= 2;
  9961  001472  0EFE               	movlw	254
  9962  001474  2639               	addwf	xtoa@w,f,c
  9963  001476  0EFF               	movlw	255
  9964  001478  223A               	addwfc	xtoa@w+1,f,c
  9965  00147A                     l4814:
  9966                           
  9967                           ; BSR set to: 0
  9968                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 639:     n 
      +                          = d;
  9969  00147A  C022  F03B         	movff	xtoa@d,xtoa@n
  9970  00147E  C023  F03C         	movff	xtoa@d+1,xtoa@n+1
  9971  001482  C024  F03D         	movff	xtoa@d+2,xtoa@n+2
  9972  001486  C025  F03E         	movff	xtoa@d+3,xtoa@n+3
  9973  00148A  C026  F03F         	movff	xtoa@d+4,xtoa@n+4
  9974  00148E  C027  F040         	movff	xtoa@d+5,xtoa@n+5
  9975  001492  C028  F041         	movff	xtoa@d+6,xtoa@n+6
  9976  001496  C029  F042         	movff	xtoa@d+7,xtoa@n+7
  9977                           
  9978                           ; BSR set to: 0
  9979                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 640:     i 
      +                          = sizeof(dbuf) - 1;
  9980  00149A  0E00               	movlw	0
  9981  00149C  6E44               	movwf	xtoa@i+1,c
  9982  00149E  0E1F               	movlw	31
  9983  0014A0  6E43               	movwf	xtoa@i,c
  9984                           
  9985                           ; BSR set to: 0
  9986                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 641:     db
      +                          uf[i] = '\0';
  9987  0014A2  0E00               	movlw	0
  9988  0014A4  6FE2               	movwf	(_dbuf+31)& (0+255),b
  9989                           
  9990                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 642:     wh
      +                          ile (!(i < 2) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  9991  0014A6  D093               	goto	l4850
  9992  0014A8                     l4820:
  9993                           
  9994                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 643:       
      +                            --i;
  9995  0014A8  0643               	decf	xtoa@i,f,c
  9996  0014AA  A0D8               	btfss	status,0,c
  9997  0014AC  0644               	decf	xtoa@i+1,f,c
  9998                           
  9999                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 644:       
      +                            c = n & 0x0f;
 10000  0014AE  0E0F               	movlw	15
 10001  0014B0  143B               	andwf	xtoa@n,w,c
 10002  0014B2  6E45               	movwf	xtoa@c,c
 10003  0014B4  6A46               	clrf	xtoa@c+1,c
 10004                           
 10005                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 645:       
      +                            c = (c < 10) ? '0' + c : 'a' + (c - 10);
 10006  0014B6  BE46               	btfsc	xtoa@c+1,7,c
 10007  0014B8  D008               	goto	l4828
 10008  0014BA  5046               	movf	xtoa@c+1,w,c
 10009  0014BC  E104               	bnz	u4640
 10010  0014BE  0E0A               	movlw	10
 10011  0014C0  5C45               	subwf	xtoa@c,w,c
 10012  0014C2  A0D8               	btfss	status,0,c
 10013  0014C4  D002               	goto	l4828
 10014  0014C6                     u4640:
 10015  0014C6  0E57               	movlw	87
 10016  0014C8  D001               	goto	L38
 10017  0014CA                     l4828:
 10018  0014CA  0E30               	movlw	48
 10019  0014CC                     L38:
 10020  0014CC  2445               	addwf	xtoa@c,w,c
 10021  0014CE  6E45               	movwf	xtoa@c,c
 10022  0014D0  0E00               	movlw	0
 10023  0014D2  2046               	addwfc	xtoa@c+1,w,c
 10024  0014D4  6E46               	movwf	xtoa@c+1,c
 10025                           
 10026                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 646:       
      +                            if ((0 ? isupper((int)x) : ((unsigned)((int)x)-'A') < 26) && (0 ? isalpha(c) : (((unsi
      +                          gned)(c)|32)-'a') < 26)) {
 10027  0014D6  0EBF               	movlw	191
 10028  0014D8  6E2B               	movwf	??_xtoa& (0+255),c
 10029  0014DA  0EFF               	movlw	255
 10030  0014DC  6E2C               	movwf	(??_xtoa+1)& (0+255),c
 10031  0014DE  502A               	movf	xtoa@x,w,c
 10032  0014E0  6E2D               	movwf	(??_xtoa+2)& (0+255),c
 10033  0014E2  6A2E               	clrf	(??_xtoa+3)& (0+255),c
 10034  0014E4  502B               	movf	??_xtoa,w,c
 10035  0014E6  262D               	addwf	??_xtoa+2,f,c
 10036  0014E8  502C               	movf	??_xtoa+1,w,c
 10037  0014EA  222E               	addwfc	??_xtoa+3,f,c
 10038  0014EC  502E               	movf	??_xtoa+3,w,c
 10039  0014EE  E106               	bnz	u4650
 10040  0014F0  0E1A               	movlw	26
 10041  0014F2  5C2D               	subwf	??_xtoa+2,w,c
 10042  0014F4  B0D8               	btfsc	status,0,c
 10043  0014F6  D002               	goto	u4650
 10044  0014F8  0E01               	movlw	1
 10045  0014FA  D001               	goto	u4660
 10046  0014FC                     u4650:
 10047  0014FC  0E00               	movlw	0
 10048  0014FE                     u4660:
 10049  0014FE  6E33               	movwf	_xtoa$1507,c
 10050  001500  6A34               	clrf	_xtoa$1507+1,c
 10051  001502  5033               	movf	_xtoa$1507,w,c
 10052  001504  1034               	iorwf	_xtoa$1507+1,w,c
 10053  001506  B4D8               	btfsc	status,2,c
 10054  001508  D027               	goto	l4842
 10055  00150A  0E9F               	movlw	159
 10056  00150C  6E2B               	movwf	??_xtoa& (0+255),c
 10057  00150E  0EFF               	movlw	255
 10058  001510  6E2C               	movwf	(??_xtoa+1)& (0+255),c
 10059  001512  0E20               	movlw	32
 10060  001514  1045               	iorwf	xtoa@c,w,c
 10061  001516  6E2D               	movwf	(??_xtoa+2)& (0+255),c
 10062  001518  0E00               	movlw	0
 10063  00151A  1046               	iorwf	xtoa@c+1,w,c
 10064  00151C  6E2E               	movwf	(??_xtoa+3)& (0+255),c
 10065  00151E  502B               	movf	??_xtoa,w,c
 10066  001520  262D               	addwf	??_xtoa+2,f,c
 10067  001522  502C               	movf	??_xtoa+1,w,c
 10068  001524  222E               	addwfc	??_xtoa+3,f,c
 10069  001526  502E               	movf	??_xtoa+3,w,c
 10070  001528  E106               	bnz	u4680
 10071  00152A  0E1A               	movlw	26
 10072  00152C  5C2D               	subwf	??_xtoa+2,w,c
 10073  00152E  B0D8               	btfsc	status,0,c
 10074  001530  D002               	goto	u4680
 10075  001532  0E01               	movlw	1
 10076  001534  D001               	goto	u4690
 10077  001536                     u4680:
 10078  001536  0E00               	movlw	0
 10079  001538                     u4690:
 10080  001538  6E35               	movwf	_xtoa$1508,c
 10081  00153A  6A36               	clrf	_xtoa$1508+1,c
 10082  00153C  5035               	movf	_xtoa$1508,w,c
 10083  00153E  1036               	iorwf	_xtoa$1508+1,w,c
 10084  001540  B4D8               	btfsc	status,2,c
 10085  001542  D00A               	goto	l4842
 10086                           
 10087                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 647:       
      +                                c = toupper(c);
 10088  001544  C045  F007         	movff	xtoa@c,toupper@c
 10089  001548  C046  F008         	movff	xtoa@c+1,toupper@c+1
 10090  00154C  EC25  F019         	call	_toupper	;wreg free
 10091  001550  C007  F045         	movff	?_toupper,xtoa@c
 10092  001554  C008  F046         	movff	?_toupper+1,xtoa@c+1
 10093  001558                     l4842:
 10094                           
 10095                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 649:       
      +                            dbuf[i] = (char)c;
 10096  001558  0EC3               	movlw	low _dbuf
 10097  00155A  2443               	addwf	xtoa@i,w,c
 10098  00155C  6ED9               	movwf	fsr2l,c
 10099  00155E  0E00               	movlw	high _dbuf
 10100  001560  2044               	addwfc	xtoa@i+1,w,c
 10101  001562  6EDA               	movwf	fsr2h,c
 10102  001564  C045  FFDF         	movff	xtoa@c,indf2
 10103                           
 10104                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 650:       
      +                            --p;
 10105  001568  0637               	decf	xtoa@p,f,c
 10106  00156A  A0D8               	btfss	status,0,c
 10107  00156C  0638               	decf	xtoa@p+1,f,c
 10108                           
 10109                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 651:       
      +                            --w;
 10110  00156E  0639               	decf	xtoa@w,f,c
 10111  001570  A0D8               	btfss	status,0,c
 10112  001572  063A               	decf	xtoa@w+1,f,c
 10113                           
 10114                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 652:       
      +                            n = n >> 4;
 10115  001574  C03B  F02B         	movff	xtoa@n,??_xtoa
 10116  001578  C03C  F02C         	movff	xtoa@n+1,??_xtoa+1
 10117  00157C  C03D  F02D         	movff	xtoa@n+2,??_xtoa+2
 10118  001580  C03E  F02E         	movff	xtoa@n+3,??_xtoa+3
 10119  001584  C03F  F02F         	movff	xtoa@n+4,??_xtoa+4
 10120  001588  C040  F030         	movff	xtoa@n+5,??_xtoa+5
 10121  00158C  C041  F031         	movff	xtoa@n+6,??_xtoa+6
 10122  001590  C042  F032         	movff	xtoa@n+7,??_xtoa+7
 10123  001594  0E05               	movlw	5
 10124  001596  D009               	goto	u4710
 10125  001598                     u4715:
 10126  001598  90D8               	bcf	status,0,c
 10127  00159A  3232               	rrcf	??_xtoa+7,f,c
 10128  00159C  3231               	rrcf	??_xtoa+6,f,c
 10129  00159E  3230               	rrcf	??_xtoa+5,f,c
 10130  0015A0  322F               	rrcf	??_xtoa+4,f,c
 10131  0015A2  322E               	rrcf	??_xtoa+3,f,c
 10132  0015A4  322D               	rrcf	??_xtoa+2,f,c
 10133  0015A6  322C               	rrcf	??_xtoa+1,f,c
 10134  0015A8  322B               	rrcf	??_xtoa,f,c
 10135  0015AA                     u4710:
 10136  0015AA  2EE8               	decfsz	wreg,f,c
 10137  0015AC  D7F5               	goto	u4715
 10138  0015AE  C02B  F03B         	movff	??_xtoa,xtoa@n
 10139  0015B2  C02C  F03C         	movff	??_xtoa+1,xtoa@n+1
 10140  0015B6  C02D  F03D         	movff	??_xtoa+2,xtoa@n+2
 10141  0015BA  C02E  F03E         	movff	??_xtoa+3,xtoa@n+3
 10142  0015BE  C02F  F03F         	movff	??_xtoa+4,xtoa@n+4
 10143  0015C2  C030  F040         	movff	??_xtoa+5,xtoa@n+5
 10144  0015C6  C031  F041         	movff	??_xtoa+6,xtoa@n+6
 10145  0015CA  C032  F042         	movff	??_xtoa+7,xtoa@n+7
 10146  0015CE                     l4850:
 10147                           
 10148                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 642:     wh
      +                          ile (!(i < 2) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 10149  0015CE  BE44               	btfsc	xtoa@i+1,7,c
 10150  0015D0  D021               	goto	u4760
 10151  0015D2  5044               	movf	xtoa@i+1,w,c
 10152  0015D4  E104               	bnz	u4720
 10153  0015D6  0E02               	movlw	2
 10154  0015D8  5C43               	subwf	xtoa@i,w,c
 10155  0015DA  A0D8               	btfss	status,0,c
 10156  0015DC  D01B               	goto	u4760
 10157  0015DE                     u4720:
 10158  0015DE  503B               	movf	xtoa@n,w,c
 10159  0015E0  103C               	iorwf	xtoa@n+1,w,c
 10160  0015E2  103D               	iorwf	xtoa@n+2,w,c
 10161  0015E4  103E               	iorwf	xtoa@n+3,w,c
 10162  0015E6  103F               	iorwf	xtoa@n+4,w,c
 10163  0015E8  1040               	iorwf	xtoa@n+5,w,c
 10164  0015EA  1041               	iorwf	xtoa@n+6,w,c
 10165  0015EC  1042               	iorwf	xtoa@n+7,w,c
 10166  0015EE  A4D8               	btfss	status,2,c
 10167  0015F0  D75B               	goto	l4820
 10168  0015F2  BE38               	btfsc	xtoa@p+1,7,c
 10169  0015F4  D005               	goto	u4740
 10170  0015F6  5038               	movf	xtoa@p+1,w,c
 10171  0015F8  E102               	bnz	u4741
 10172  0015FA  0437               	decf	xtoa@p,w,c
 10173  0015FC  B0D8               	btfsc	status,0,c
 10174  0015FE                     u4741:
 10175  0015FE  D754               	goto	l4820
 10176  001600                     u4740:
 10177  001600  BE3A               	btfsc	xtoa@w+1,7,c
 10178  001602  D008               	goto	u4760
 10179  001604  503A               	movf	xtoa@w+1,w,c
 10180  001606  E103               	bnz	u4750
 10181  001608  0439               	decf	xtoa@w,w,c
 10182  00160A  A0D8               	btfss	status,0,c
 10183  00160C  D003               	goto	u4760
 10184  00160E                     u4750:
 10185  00160E  0100               	movlb	0	; () banked
 10186  001610  B3BF               	btfsc	_flags& (0+255),1,b
 10187  001612  D74A               	goto	l4820
 10188  001614                     u4760:
 10189                           
 10190                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 656:     if
      +                           (flags & (1 << 4)) {
 10191  001614  0100               	movlb	0	; () banked
 10192  001616  A9BF               	btfss	_flags& (0+255),4,b
 10193  001618  D016               	goto	l4866
 10194                           
 10195                           ; BSR set to: 0
 10196                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 657:       
      +                            --i;
 10197  00161A  0643               	decf	xtoa@i,f,c
 10198  00161C  A0D8               	btfss	status,0,c
 10199  00161E  0644               	decf	xtoa@i+1,f,c
 10200                           
 10201                           ; BSR set to: 0
 10202                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 658:       
      +                            dbuf[i] = x;
 10203  001620  0EC3               	movlw	low _dbuf
 10204  001622  2443               	addwf	xtoa@i,w,c
 10205  001624  6ED9               	movwf	fsr2l,c
 10206  001626  0E00               	movlw	high _dbuf
 10207  001628  2044               	addwfc	xtoa@i+1,w,c
 10208  00162A  6EDA               	movwf	fsr2h,c
 10209  00162C  C02A  FFDF         	movff	xtoa@x,indf2
 10210                           
 10211                           ; BSR set to: 0
 10212                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 659:       
      +                            --i;
 10213  001630  0643               	decf	xtoa@i,f,c
 10214  001632  A0D8               	btfss	status,0,c
 10215  001634  0644               	decf	xtoa@i+1,f,c
 10216                           
 10217                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 660:       
      +                            dbuf[i] = '0';
 10218  001636  0EC3               	movlw	low _dbuf
 10219  001638  2443               	addwf	xtoa@i,w,c
 10220  00163A  6ED9               	movwf	fsr2l,c
 10221  00163C  0E00               	movlw	high _dbuf
 10222  00163E  2044               	addwfc	xtoa@i+1,w,c
 10223  001640  6EDA               	movwf	fsr2h,c
 10224  001642  0E30               	movlw	48
 10225  001644  6EDF               	movwf	indf2,c
 10226  001646                     l4866:
 10227                           
 10228                           ; BSR set to: 0
 10229                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 664:     re
      +                          turn pad(fp, &dbuf[i], w);
 10230  001646  C020  F015         	movff	xtoa@fp,pad@fp
 10231  00164A  C021  F016         	movff	xtoa@fp+1,pad@fp+1
 10232  00164E  0EC3               	movlw	low _dbuf
 10233  001650  2443               	addwf	xtoa@i,w,c
 10234  001652  6E17               	movwf	pad@buf,c
 10235  001654  0E00               	movlw	high _dbuf
 10236  001656  2044               	addwfc	xtoa@i+1,w,c
 10237  001658  6E18               	movwf	pad@buf+1,c
 10238  00165A  C039  F019         	movff	xtoa@w,pad@p
 10239  00165E  C03A  F01A         	movff	xtoa@w+1,pad@p+1
 10240  001662  EC50  F016         	call	_pad	;wreg free
 10241  001666  C015  F020         	movff	?_pad,?_xtoa
 10242  00166A  C016  F021         	movff	?_pad+1,?_xtoa+1
 10243  00166E  0012               	return		;funcret
 10244  001670                     __end_of_xtoa:
 10245                           	opt callstack 0
 10246                           
 10247 ;; *************** function _toupper *****************
 10248 ;; Defined at:
 10249 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\toupper.c"
 10250 ;; Parameters:    Size  Location     Type
 10251 ;;  c               2    6[COMRAM] int 
 10252 ;; Auto vars:     Size  Location     Type
 10253 ;;		None
 10254 ;; Return value:  Size  Location     Type
 10255 ;;                  2    6[COMRAM] int 
 10256 ;; Registers used:
 10257 ;;		wreg, status,2, status,0
 10258 ;; Tracked objects:
 10259 ;;		On entry : 0/0
 10260 ;;		On exit  : 0/0
 10261 ;;		Unchanged: 0/0
 10262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10263 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10264 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10265 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10266 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10267 ;;Total ram usage:        8 bytes
 10268 ;; Hardware stack levels used:    1
 10269 ;; Hardware stack levels required when called:    2
 10270 ;; This function calls:
 10271 ;;		_islower
 10272 ;; This function is called by:
 10273 ;;		_xtoa
 10274 ;; This function uses a non-reentrant model
 10275 ;;
 10276                           
 10277                           	psect	text38
 10278  00324A                     __ptext38:
 10279                           	opt callstack 0
 10280  00324A                     _toupper:
 10281                           	opt callstack 23
 10282                           
 10283                           ;incstack = 0
 10284  00324A  0E9F               	movlw	159
 10285  00324C  6E09               	movwf	??_toupper& (0+255),c
 10286  00324E  0EFF               	movlw	255
 10287  003250  6E0A               	movwf	(??_toupper+1)& (0+255),c
 10288  003252  C007  F00B         	movff	toupper@c,??_toupper+2
 10289  003256  C008  F00C         	movff	toupper@c+1,??_toupper+3
 10290  00325A  5009               	movf	??_toupper,w,c
 10291  00325C  260B               	addwf	??_toupper+2,f,c
 10292  00325E  500A               	movf	??_toupper+1,w,c
 10293  003260  220C               	addwfc	??_toupper+3,f,c
 10294  003262  500C               	movf	??_toupper+3,w,c
 10295  003264  E106               	bnz	u4020
 10296  003266  0E1A               	movlw	26
 10297  003268  5C0B               	subwf	??_toupper+2,w,c
 10298  00326A  B0D8               	btfsc	status,0,c
 10299  00326C  D002               	goto	u4020
 10300  00326E  0E01               	movlw	1
 10301  003270  D001               	goto	u4030
 10302  003272                     u4020:
 10303  003272  0E00               	movlw	0
 10304  003274                     u4030:
 10305  003274  6E0D               	movwf	_toupper$2073,c
 10306  003276  6A0E               	clrf	_toupper$2073+1,c
 10307  003278  500D               	movf	_toupper$2073,w,c
 10308  00327A  100E               	iorwf	_toupper$2073+1,w,c
 10309  00327C  B4D8               	btfsc	status,2,c
 10310  00327E  D005               	goto	l1748
 10311  003280  0E5F               	movlw	95
 10312  003282  1407               	andwf	toupper@c,w,c
 10313  003284  6E07               	movwf	?_toupper,c
 10314  003286  6A08               	clrf	?_toupper+1,c
 10315  003288  0012               	return	
 10316  00328A                     l1748:
 10317  00328A  C007  F007         	movff	toupper@c,?_toupper
 10318  00328E  C008  F008         	movff	toupper@c+1,?_toupper+1
 10319  003292  0012               	return		;funcret
 10320  003294                     __end_of_toupper:
 10321                           	opt callstack 0
 10322                           
 10323 ;; *************** function _islower *****************
 10324 ;; Defined at:
 10325 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\islower.c"
 10326 ;; Parameters:    Size  Location     Type
 10327 ;;  c               2    0[COMRAM] int 
 10328 ;; Auto vars:     Size  Location     Type
 10329 ;;		None
 10330 ;; Return value:  Size  Location     Type
 10331 ;;                  2    0[COMRAM] int 
 10332 ;; Registers used:
 10333 ;;		wreg, status,2, status,0
 10334 ;; Tracked objects:
 10335 ;;		On entry : 0/0
 10336 ;;		On exit  : 0/0
 10337 ;;		Unchanged: 0/0
 10338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10339 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10341 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10342 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10343 ;;Total ram usage:        6 bytes
 10344 ;; Hardware stack levels used:    1
 10345 ;; Hardware stack levels required when called:    1
 10346 ;; This function calls:
 10347 ;;		Nothing
 10348 ;; This function is called by:
 10349 ;;		_toupper
 10350 ;; This function uses a non-reentrant model
 10351 ;;
 10352                           
 10353                           	psect	text39
 10354  0033FA                     __ptext39:
 10355                           	opt callstack 0
 10356  0033FA                     _islower:
 10357                           	opt callstack 23
 10358                           
 10359                           ;incstack = 0
 10360  0033FA  0E9F               	movlw	159
 10361  0033FC  6E03               	movwf	??_islower& (0+255),c
 10362  0033FE  0EFF               	movlw	255
 10363  003400  6E04               	movwf	(??_islower+1)& (0+255),c
 10364  003402  C001  F005         	movff	islower@c,??_islower+2
 10365  003406  C002  F006         	movff	islower@c+1,??_islower+3
 10366  00340A  5003               	movf	??_islower,w,c
 10367  00340C  2605               	addwf	??_islower+2,f,c
 10368  00340E  5004               	movf	??_islower+1,w,c
 10369  003410  2206               	addwfc	??_islower+3,f,c
 10370  003412  5006               	movf	??_islower+3,w,c
 10371  003414  E106               	bnz	u3910
 10372  003416  0E1A               	movlw	26
 10373  003418  5C05               	subwf	??_islower+2,w,c
 10374  00341A  B0D8               	btfsc	status,0,c
 10375  00341C  D002               	goto	u3910
 10376  00341E  0E01               	movlw	1
 10377  003420  D001               	goto	u3920
 10378  003422                     u3910:
 10379  003422  0E00               	movlw	0
 10380  003424                     u3920:
 10381  003424  6E01               	movwf	?_islower,c
 10382  003426  6A02               	clrf	?_islower+1,c
 10383  003428  0012               	return		;funcret
 10384  00342A                     __end_of_islower:
 10385                           	opt callstack 0
 10386                           
 10387 ;; *************** function _isupper *****************
 10388 ;; Defined at:
 10389 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isupper.c"
 10390 ;; Parameters:    Size  Location     Type
 10391 ;;  c               2    0[COMRAM] int 
 10392 ;; Auto vars:     Size  Location     Type
 10393 ;;		None
 10394 ;; Return value:  Size  Location     Type
 10395 ;;                  2    0[COMRAM] int 
 10396 ;; Registers used:
 10397 ;;		wreg, status,2, status,0
 10398 ;; Tracked objects:
 10399 ;;		On entry : 0/0
 10400 ;;		On exit  : 0/0
 10401 ;;		Unchanged: 0/0
 10402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10403 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10405 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10406 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10407 ;;Total ram usage:        6 bytes
 10408 ;; Hardware stack levels used:    1
 10409 ;; Hardware stack levels required when called:    1
 10410 ;; This function calls:
 10411 ;;		Nothing
 10412 ;; This function is called by:
 10413 ;;		_xtoa
 10414 ;; This function uses a non-reentrant model
 10415 ;;
 10416                           
 10417                           	psect	text40
 10418  00342A                     __ptext40:
 10419                           	opt callstack 0
 10420  00342A                     _isupper:
 10421                           	opt callstack 24
 10422                           
 10423                           ;incstack = 0
 10424  00342A  0EBF               	movlw	191
 10425  00342C  6E03               	movwf	??_isupper& (0+255),c
 10426  00342E  0EFF               	movlw	255
 10427  003430  6E04               	movwf	(??_isupper+1)& (0+255),c
 10428  003432  C001  F005         	movff	isupper@c,??_isupper+2
 10429  003436  C002  F006         	movff	isupper@c+1,??_isupper+3
 10430  00343A  5003               	movf	??_isupper,w,c
 10431  00343C  2605               	addwf	??_isupper+2,f,c
 10432  00343E  5004               	movf	??_isupper+1,w,c
 10433  003440  2206               	addwfc	??_isupper+3,f,c
 10434  003442  5006               	movf	??_isupper+3,w,c
 10435  003444  E106               	bnz	u3980
 10436  003446  0E1A               	movlw	26
 10437  003448  5C05               	subwf	??_isupper+2,w,c
 10438  00344A  B0D8               	btfsc	status,0,c
 10439  00344C  D002               	goto	u3980
 10440  00344E  0E01               	movlw	1
 10441  003450  D001               	goto	u3990
 10442  003452                     u3980:
 10443  003452  0E00               	movlw	0
 10444  003454                     u3990:
 10445  003454  6E01               	movwf	?_isupper,c
 10446  003456  6A02               	clrf	?_isupper+1,c
 10447  003458  0012               	return		;funcret
 10448  00345A                     __end_of_isupper:
 10449                           	opt callstack 0
 10450                           
 10451 ;; *************** function _isalpha *****************
 10452 ;; Defined at:
 10453 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isalpha.c"
 10454 ;; Parameters:    Size  Location     Type
 10455 ;;  c               2    0[COMRAM] int 
 10456 ;; Auto vars:     Size  Location     Type
 10457 ;;		None
 10458 ;; Return value:  Size  Location     Type
 10459 ;;                  2    0[COMRAM] int 
 10460 ;; Registers used:
 10461 ;;		wreg, status,2, status,0
 10462 ;; Tracked objects:
 10463 ;;		On entry : 0/0
 10464 ;;		On exit  : 0/0
 10465 ;;		Unchanged: 0/0
 10466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10467 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10469 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10470 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10471 ;;Total ram usage:        6 bytes
 10472 ;; Hardware stack levels used:    1
 10473 ;; Hardware stack levels required when called:    1
 10474 ;; This function calls:
 10475 ;;		Nothing
 10476 ;; This function is called by:
 10477 ;;		_xtoa
 10478 ;; This function uses a non-reentrant model
 10479 ;;
 10480                           
 10481                           	psect	text41
 10482  003394                     __ptext41:
 10483                           	opt callstack 0
 10484  003394                     _isalpha:
 10485                           	opt callstack 24
 10486                           
 10487                           ;incstack = 0
 10488  003394  0E9F               	movlw	159
 10489  003396  6E03               	movwf	??_isalpha& (0+255),c
 10490  003398  0EFF               	movlw	255
 10491  00339A  6E04               	movwf	(??_isalpha+1)& (0+255),c
 10492  00339C  0E20               	movlw	32
 10493  00339E  1001               	iorwf	isalpha@c,w,c
 10494  0033A0  6E05               	movwf	(??_isalpha+2)& (0+255),c
 10495  0033A2  0E00               	movlw	0
 10496  0033A4  1002               	iorwf	isalpha@c+1,w,c
 10497  0033A6  6E06               	movwf	(??_isalpha+3)& (0+255),c
 10498  0033A8  5003               	movf	??_isalpha,w,c
 10499  0033AA  2605               	addwf	??_isalpha+2,f,c
 10500  0033AC  5004               	movf	??_isalpha+1,w,c
 10501  0033AE  2206               	addwfc	??_isalpha+3,f,c
 10502  0033B0  5006               	movf	??_isalpha+3,w,c
 10503  0033B2  E106               	bnz	u4000
 10504  0033B4  0E1A               	movlw	26
 10505  0033B6  5C05               	subwf	??_isalpha+2,w,c
 10506  0033B8  B0D8               	btfsc	status,0,c
 10507  0033BA  D002               	goto	u4000
 10508  0033BC  0E01               	movlw	1
 10509  0033BE  D001               	goto	u4010
 10510  0033C0                     u4000:
 10511  0033C0  0E00               	movlw	0
 10512  0033C2                     u4010:
 10513  0033C2  6E01               	movwf	?_isalpha,c
 10514  0033C4  6A02               	clrf	?_isalpha+1,c
 10515  0033C6  0012               	return		;funcret
 10516  0033C8                     __end_of_isalpha:
 10517                           	opt callstack 0
 10518                           
 10519 ;; *************** function _utoa *****************
 10520 ;; Defined at:
 10521 ;;		line 593 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 10522 ;; Parameters:    Size  Location     Type
 10523 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
 10524 ;;		 -> NULL(0), 
 10525 ;;  d               8   33[COMRAM] unsigned long long 
 10526 ;; Auto vars:     Size  Location     Type
 10527 ;;  n               8   53[COMRAM] unsigned long long 
 10528 ;;  i               2   61[COMRAM] int 
 10529 ;;  w               2   51[COMRAM] int 
 10530 ;;  p               2   49[COMRAM] int 
 10531 ;; Return value:  Size  Location     Type
 10532 ;;                  2   31[COMRAM] int 
 10533 ;; Registers used:
 10534 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10535 ;; Tracked objects:
 10536 ;;		On entry : 0/0
 10537 ;;		On exit  : 0/0
 10538 ;;		Unchanged: 0/0
 10539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10540 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10541 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10542 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10543 ;;      Totals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;Total ram usage:       32 bytes
 10545 ;; Hardware stack levels used:    1
 10546 ;; Hardware stack levels required when called:    8
 10547 ;; This function calls:
 10548 ;;		___lodiv
 10549 ;;		___lomod
 10550 ;;		_pad
 10551 ;; This function is called by:
 10552 ;;		_vfpfcnvrt
 10553 ;; This function uses a non-reentrant model
 10554 ;;
 10555                           
 10556                           	psect	text42
 10557  001A6E                     __ptext42:
 10558                           	opt callstack 0
 10559  001A6E                     _utoa:
 10560                           	opt callstack 18
 10561                           
 10562                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 593: static
      +                           int utoa(FILE *fp, unsigned long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic
      +                          \sources\c99\common\doprnt.c: 594: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c99\common\doprnt.c: 595:     int i, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 596:     unsigned long long n;;C:\Program Files (x86)
      +                          \Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 599:     if (!(prec < 0)) {
 10563                           
 10564                           ;incstack = 0
 10565  001A6E  0100               	movlb	0	; () banked
 10566  001A70  AFBE               	btfss	(_prec+1)& (0+255),7,b
 10567                           
 10568                           ; BSR set to: 0
 10569                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 600:       
      +                            flags &= ~(1 << 1);
 10570  001A72  93BF               	bcf	_flags& (0+255),1,b
 10571                           
 10572                           ; BSR set to: 0
 10573                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 602:     p 
      +                          = (0 < prec) ? prec : 1;
 10574  001A74  BFBE               	btfsc	(_prec+1)& (0+255),7,b
 10575  001A76  D005               	goto	u4550
 10576  001A78  51BE               	movf	(_prec+1)& (0+255),w,b
 10577  001A7A  E108               	bnz	l891
 10578  001A7C  05BD               	decf	_prec& (0+255),w,b
 10579  001A7E  B0D8               	btfsc	status,0,c
 10580  001A80  D005               	goto	l891
 10581  001A82                     u4550:
 10582                           
 10583                           ; BSR set to: 0
 10584  001A82  0E00               	movlw	0
 10585  001A84  6E33               	movwf	utoa@p+1,c
 10586  001A86  0E01               	movlw	1
 10587  001A88  6E32               	movwf	utoa@p,c
 10588  001A8A  D004               	goto	l893
 10589  001A8C                     l891:
 10590                           
 10591                           ; BSR set to: 0
 10592  001A8C  C0BD  F032         	movff	_prec,utoa@p
 10593  001A90  C0BE  F033         	movff	_prec+1,utoa@p+1
 10594  001A94                     l893:
 10595                           
 10596                           ; BSR set to: 0
 10597                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 603:     w 
      +                          = width;
 10598  001A94  C0BB  F034         	movff	_width,utoa@w
 10599  001A98  C0BC  F035         	movff	_width+1,utoa@w+1
 10600                           
 10601                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 606:     n 
      +                          = d;
 10602  001A9C  C022  F036         	movff	utoa@d,utoa@n
 10603  001AA0  C023  F037         	movff	utoa@d+1,utoa@n+1
 10604  001AA4  C024  F038         	movff	utoa@d+2,utoa@n+2
 10605  001AA8  C025  F039         	movff	utoa@d+3,utoa@n+3
 10606  001AAC  C026  F03A         	movff	utoa@d+4,utoa@n+4
 10607  001AB0  C027  F03B         	movff	utoa@d+5,utoa@n+5
 10608  001AB4  C028  F03C         	movff	utoa@d+6,utoa@n+6
 10609  001AB8  C029  F03D         	movff	utoa@d+7,utoa@n+7
 10610                           
 10611                           ; BSR set to: 0
 10612                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 607:     i 
      +                          = sizeof(dbuf) - 1;
 10613  001ABC  0E00               	movlw	0
 10614  001ABE  6E3F               	movwf	utoa@i+1,c
 10615  001AC0  0E1F               	movlw	31
 10616  001AC2  6E3E               	movwf	utoa@i,c
 10617                           
 10618                           ; BSR set to: 0
 10619                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 608:     db
      +                          uf[i] = '\0';
 10620  001AC4  0E00               	movlw	0
 10621  001AC6  6FE2               	movwf	(_dbuf+31)& (0+255),b
 10622                           
 10623                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 10624  001AC8  D076               	goto	l4790
 10625  001ACA                     l4780:
 10626                           
 10627                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 610:       
      +                            --i;
 10628  001ACA  063E               	decf	utoa@i,f,c
 10629  001ACC  A0D8               	btfss	status,0,c
 10630  001ACE  063F               	decf	utoa@i+1,f,c
 10631                           
 10632                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 611:       
      +                            dbuf[i] = '0' + (n % 10);
 10633  001AD0  0EC3               	movlw	low _dbuf
 10634  001AD2  243E               	addwf	utoa@i,w,c
 10635  001AD4  6ED9               	movwf	fsr2l,c
 10636  001AD6  0E00               	movlw	high _dbuf
 10637  001AD8  203F               	addwfc	utoa@i+1,w,c
 10638  001ADA  6EDA               	movwf	fsr2h,c
 10639  001ADC  C036  F001         	movff	utoa@n,___lomod@dividend
 10640  001AE0  C037  F002         	movff	utoa@n+1,___lomod@dividend+1
 10641  001AE4  C038  F003         	movff	utoa@n+2,___lomod@dividend+2
 10642  001AE8  C039  F004         	movff	utoa@n+3,___lomod@dividend+3
 10643  001AEC  C03A  F005         	movff	utoa@n+4,___lomod@dividend+4
 10644  001AF0  C03B  F006         	movff	utoa@n+5,___lomod@dividend+5
 10645  001AF4  C03C  F007         	movff	utoa@n+6,___lomod@dividend+6
 10646  001AF8  C03D  F008         	movff	utoa@n+7,___lomod@dividend+7
 10647  001AFC  0E0A               	movlw	10
 10648  001AFE  6E09               	movwf	___lomod@divisor,c
 10649  001B00  0E00               	movlw	0
 10650  001B02  6E0A               	movwf	___lomod@divisor+1,c
 10651  001B04  0E00               	movlw	0
 10652  001B06  6E0B               	movwf	___lomod@divisor+2,c
 10653  001B08  0E00               	movlw	0
 10654  001B0A  6E0C               	movwf	___lomod@divisor+3,c
 10655  001B0C  0E00               	movlw	0
 10656  001B0E  6E0D               	movwf	___lomod@divisor+4,c
 10657  001B10  0E00               	movlw	0
 10658  001B12  6E0E               	movwf	___lomod@divisor+5,c
 10659  001B14  0E00               	movlw	0
 10660  001B16  6E0F               	movwf	___lomod@divisor+6,c
 10661  001B18  0E00               	movlw	0
 10662  001B1A  6E10               	movwf	___lomod@divisor+7,c
 10663  001B1C  ECA4  F015         	call	___lomod	;wreg free
 10664  001B20  C001  F02A         	movff	?___lomod,??_utoa
 10665  001B24  C002  F02B         	movff	?___lomod+1,??_utoa+1
 10666  001B28  C003  F02C         	movff	?___lomod+2,??_utoa+2
 10667  001B2C  C004  F02D         	movff	?___lomod+3,??_utoa+3
 10668  001B30  C005  F02E         	movff	?___lomod+4,??_utoa+4
 10669  001B34  C006  F02F         	movff	?___lomod+5,??_utoa+5
 10670  001B38  C007  F030         	movff	?___lomod+6,??_utoa+6
 10671  001B3C  C008  F031         	movff	?___lomod+7,??_utoa+7
 10672  001B40  502A               	movf	??_utoa,w,c
 10673  001B42  0F30               	addlw	48
 10674  001B44  6EDF               	movwf	indf2,c
 10675                           
 10676                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 612:       
      +                            --p;
 10677  001B46  0632               	decf	utoa@p,f,c
 10678  001B48  A0D8               	btfss	status,0,c
 10679  001B4A  0633               	decf	utoa@p+1,f,c
 10680                           
 10681                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 613:       
      +                            --w;
 10682  001B4C  0634               	decf	utoa@w,f,c
 10683  001B4E  A0D8               	btfss	status,0,c
 10684  001B50  0635               	decf	utoa@w+1,f,c
 10685                           
 10686                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 614:       
      +                            n = n / 10;
 10687  001B52  C036  F001         	movff	utoa@n,___lodiv@dividend
 10688  001B56  C037  F002         	movff	utoa@n+1,___lodiv@dividend+1
 10689  001B5A  C038  F003         	movff	utoa@n+2,___lodiv@dividend+2
 10690  001B5E  C039  F004         	movff	utoa@n+3,___lodiv@dividend+3
 10691  001B62  C03A  F005         	movff	utoa@n+4,___lodiv@dividend+4
 10692  001B66  C03B  F006         	movff	utoa@n+5,___lodiv@dividend+5
 10693  001B6A  C03C  F007         	movff	utoa@n+6,___lodiv@dividend+6
 10694  001B6E  C03D  F008         	movff	utoa@n+7,___lodiv@dividend+7
 10695  001B72  0E0A               	movlw	10
 10696  001B74  6E09               	movwf	___lodiv@divisor,c
 10697  001B76  0E00               	movlw	0
 10698  001B78  6E0A               	movwf	___lodiv@divisor+1,c
 10699  001B7A  0E00               	movlw	0
 10700  001B7C  6E0B               	movwf	___lodiv@divisor+2,c
 10701  001B7E  0E00               	movlw	0
 10702  001B80  6E0C               	movwf	___lodiv@divisor+3,c
 10703  001B82  0E00               	movlw	0
 10704  001B84  6E0D               	movwf	___lodiv@divisor+4,c
 10705  001B86  0E00               	movlw	0
 10706  001B88  6E0E               	movwf	___lodiv@divisor+5,c
 10707  001B8A  0E00               	movlw	0
 10708  001B8C  6E0F               	movwf	___lodiv@divisor+6,c
 10709  001B8E  0E00               	movlw	0
 10710  001B90  6E10               	movwf	___lodiv@divisor+7,c
 10711  001B92  ECDD  F014         	call	___lodiv	;wreg free
 10712  001B96  C001  F036         	movff	?___lodiv,utoa@n
 10713  001B9A  C002  F037         	movff	?___lodiv+1,utoa@n+1
 10714  001B9E  C003  F038         	movff	?___lodiv+2,utoa@n+2
 10715  001BA2  C004  F039         	movff	?___lodiv+3,utoa@n+3
 10716  001BA6  C005  F03A         	movff	?___lodiv+4,utoa@n+4
 10717  001BAA  C006  F03B         	movff	?___lodiv+5,utoa@n+5
 10718  001BAE  C007  F03C         	movff	?___lodiv+6,utoa@n+6
 10719  001BB2  C008  F03D         	movff	?___lodiv+7,utoa@n+7
 10720  001BB6                     l4790:
 10721                           
 10722                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 10723  001BB6  503E               	movf	utoa@i,w,c
 10724  001BB8  103F               	iorwf	utoa@i+1,w,c
 10725  001BBA  B4D8               	btfsc	status,2,c
 10726  001BBC  D01B               	goto	u4600
 10727  001BBE  5036               	movf	utoa@n,w,c
 10728  001BC0  1037               	iorwf	utoa@n+1,w,c
 10729  001BC2  1038               	iorwf	utoa@n+2,w,c
 10730  001BC4  1039               	iorwf	utoa@n+3,w,c
 10731  001BC6  103A               	iorwf	utoa@n+4,w,c
 10732  001BC8  103B               	iorwf	utoa@n+5,w,c
 10733  001BCA  103C               	iorwf	utoa@n+6,w,c
 10734  001BCC  103D               	iorwf	utoa@n+7,w,c
 10735  001BCE  A4D8               	btfss	status,2,c
 10736  001BD0  D77C               	goto	l4780
 10737  001BD2  BE33               	btfsc	utoa@p+1,7,c
 10738  001BD4  D005               	goto	u4580
 10739  001BD6  5033               	movf	utoa@p+1,w,c
 10740  001BD8  E102               	bnz	u4581
 10741  001BDA  0432               	decf	utoa@p,w,c
 10742  001BDC  B0D8               	btfsc	status,0,c
 10743  001BDE                     u4581:
 10744  001BDE  D775               	goto	l4780
 10745  001BE0                     u4580:
 10746  001BE0  BE35               	btfsc	utoa@w+1,7,c
 10747  001BE2  D008               	goto	u4600
 10748  001BE4  5035               	movf	utoa@w+1,w,c
 10749  001BE6  E103               	bnz	u4590
 10750  001BE8  0434               	decf	utoa@w,w,c
 10751  001BEA  A0D8               	btfss	status,0,c
 10752  001BEC  D003               	goto	u4600
 10753  001BEE                     u4590:
 10754  001BEE  0100               	movlb	0	; () banked
 10755  001BF0  B3BF               	btfsc	_flags& (0+255),1,b
 10756  001BF2  D76B               	goto	l4780
 10757  001BF4                     u4600:
 10758                           
 10759                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 618:     re
      +                          turn pad(fp, &dbuf[i], w);
 10760  001BF4  C020  F015         	movff	utoa@fp,pad@fp
 10761  001BF8  C021  F016         	movff	utoa@fp+1,pad@fp+1
 10762  001BFC  0EC3               	movlw	low _dbuf
 10763  001BFE  243E               	addwf	utoa@i,w,c
 10764  001C00  6E17               	movwf	pad@buf,c
 10765  001C02  0E00               	movlw	high _dbuf
 10766  001C04  203F               	addwfc	utoa@i+1,w,c
 10767  001C06  6E18               	movwf	pad@buf+1,c
 10768  001C08  C034  F019         	movff	utoa@w,pad@p
 10769  001C0C  C035  F01A         	movff	utoa@w+1,pad@p+1
 10770  001C10  EC50  F016         	call	_pad	;wreg free
 10771  001C14  C015  F020         	movff	?_pad,?_utoa
 10772  001C18  C016  F021         	movff	?_pad+1,?_utoa+1
 10773  001C1C  0012               	return		;funcret
 10774  001C1E                     __end_of_utoa:
 10775                           	opt callstack 0
 10776                           
 10777 ;; *************** function ___lomod *****************
 10778 ;; Defined at:
 10779 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lomod.c"
 10780 ;; Parameters:    Size  Location     Type
 10781 ;;  dividend        8    0[COMRAM] unsigned long long 
 10782 ;;  divisor         8    8[COMRAM] unsigned long long 
 10783 ;; Auto vars:     Size  Location     Type
 10784 ;;  counter         1   16[COMRAM] unsigned char 
 10785 ;; Return value:  Size  Location     Type
 10786 ;;                  8    0[COMRAM] unsigned long long 
 10787 ;; Registers used:
 10788 ;;		wreg, status,2, status,0
 10789 ;; Tracked objects:
 10790 ;;		On entry : 0/0
 10791 ;;		On exit  : 0/0
 10792 ;;		Unchanged: 0/0
 10793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10794 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10797 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10798 ;;Total ram usage:       17 bytes
 10799 ;; Hardware stack levels used:    1
 10800 ;; Hardware stack levels required when called:    1
 10801 ;; This function calls:
 10802 ;;		Nothing
 10803 ;; This function is called by:
 10804 ;;		_utoa
 10805 ;; This function uses a non-reentrant model
 10806 ;;
 10807                           
 10808                           	psect	text43
 10809  002B48                     __ptext43:
 10810                           	opt callstack 0
 10811  002B48                     ___lomod:
 10812                           	opt callstack 24
 10813                           
 10814                           ;incstack = 0
 10815  002B48  5009               	movf	___lomod@divisor,w,c
 10816  002B4A  100A               	iorwf	___lomod@divisor+1,w,c
 10817  002B4C  100B               	iorwf	___lomod@divisor+2,w,c
 10818  002B4E  100C               	iorwf	___lomod@divisor+3,w,c
 10819  002B50  100D               	iorwf	___lomod@divisor+4,w,c
 10820  002B52  100E               	iorwf	___lomod@divisor+5,w,c
 10821  002B54  100F               	iorwf	___lomod@divisor+6,w,c
 10822  002B56  1010               	iorwf	___lomod@divisor+7,w,c
 10823  002B58  B4D8               	btfsc	status,2,c
 10824  002B5A  D03C               	goto	l1423
 10825  002B5C  0E01               	movlw	1
 10826  002B5E  6E11               	movwf	___lomod@counter,c
 10827  002B60  D00A               	goto	l4642
 10828  002B62                     l4640:
 10829  002B62  90D8               	bcf	status,0,c
 10830  002B64  3609               	rlcf	___lomod@divisor,f,c
 10831  002B66  360A               	rlcf	___lomod@divisor+1,f,c
 10832  002B68  360B               	rlcf	___lomod@divisor+2,f,c
 10833  002B6A  360C               	rlcf	___lomod@divisor+3,f,c
 10834  002B6C  360D               	rlcf	___lomod@divisor+4,f,c
 10835  002B6E  360E               	rlcf	___lomod@divisor+5,f,c
 10836  002B70  360F               	rlcf	___lomod@divisor+6,f,c
 10837  002B72  3610               	rlcf	___lomod@divisor+7,f,c
 10838  002B74  2A11               	incf	___lomod@counter,f,c
 10839  002B76                     l4642:
 10840  002B76  AE10               	btfss	___lomod@divisor+7,7,c
 10841  002B78  D7F4               	goto	l4640
 10842  002B7A                     u4250:
 10843  002B7A  5009               	movf	___lomod@divisor,w,c
 10844  002B7C  5C01               	subwf	___lomod@dividend,w,c
 10845  002B7E  500A               	movf	___lomod@divisor+1,w,c
 10846  002B80  5802               	subwfb	___lomod@dividend+1,w,c
 10847  002B82  500B               	movf	___lomod@divisor+2,w,c
 10848  002B84  5803               	subwfb	___lomod@dividend+2,w,c
 10849  002B86  500C               	movf	___lomod@divisor+3,w,c
 10850  002B88  5804               	subwfb	___lomod@dividend+3,w,c
 10851  002B8A  500D               	movf	___lomod@divisor+4,w,c
 10852  002B8C  5805               	subwfb	___lomod@dividend+4,w,c
 10853  002B8E  500E               	movf	___lomod@divisor+5,w,c
 10854  002B90  5806               	subwfb	___lomod@dividend+5,w,c
 10855  002B92  500F               	movf	___lomod@divisor+6,w,c
 10856  002B94  5807               	subwfb	___lomod@dividend+6,w,c
 10857  002B96  5010               	movf	___lomod@divisor+7,w,c
 10858  002B98  5808               	subwfb	___lomod@dividend+7,w,c
 10859  002B9A  A0D8               	btfss	status,0,c
 10860  002B9C  D010               	goto	l4648
 10861  002B9E  5009               	movf	___lomod@divisor,w,c
 10862  002BA0  5E01               	subwf	___lomod@dividend,f,c
 10863  002BA2  500A               	movf	___lomod@divisor+1,w,c
 10864  002BA4  5A02               	subwfb	___lomod@dividend+1,f,c
 10865  002BA6  500B               	movf	___lomod@divisor+2,w,c
 10866  002BA8  5A03               	subwfb	___lomod@dividend+2,f,c
 10867  002BAA  500C               	movf	___lomod@divisor+3,w,c
 10868  002BAC  5A04               	subwfb	___lomod@dividend+3,f,c
 10869  002BAE  500D               	movf	___lomod@divisor+4,w,c
 10870  002BB0  5A05               	subwfb	___lomod@dividend+4,f,c
 10871  002BB2  500E               	movf	___lomod@divisor+5,w,c
 10872  002BB4  5A06               	subwfb	___lomod@dividend+5,f,c
 10873  002BB6  500F               	movf	___lomod@divisor+6,w,c
 10874  002BB8  5A07               	subwfb	___lomod@dividend+6,f,c
 10875  002BBA  5010               	movf	___lomod@divisor+7,w,c
 10876  002BBC  5A08               	subwfb	___lomod@dividend+7,f,c
 10877  002BBE                     l4648:
 10878  002BBE  90D8               	bcf	status,0,c
 10879  002BC0  3210               	rrcf	___lomod@divisor+7,f,c
 10880  002BC2  320F               	rrcf	___lomod@divisor+6,f,c
 10881  002BC4  320E               	rrcf	___lomod@divisor+5,f,c
 10882  002BC6  320D               	rrcf	___lomod@divisor+4,f,c
 10883  002BC8  320C               	rrcf	___lomod@divisor+3,f,c
 10884  002BCA  320B               	rrcf	___lomod@divisor+2,f,c
 10885  002BCC  320A               	rrcf	___lomod@divisor+1,f,c
 10886  002BCE  3209               	rrcf	___lomod@divisor,f,c
 10887  002BD0  2E11               	decfsz	___lomod@counter,f,c
 10888  002BD2  D7D3               	goto	u4250
 10889  002BD4                     l1423:
 10890  002BD4  C001  F001         	movff	___lomod@dividend,?___lomod
 10891  002BD8  C002  F002         	movff	___lomod@dividend+1,?___lomod+1
 10892  002BDC  C003  F003         	movff	___lomod@dividend+2,?___lomod+2
 10893  002BE0  C004  F004         	movff	___lomod@dividend+3,?___lomod+3
 10894  002BE4  C005  F005         	movff	___lomod@dividend+4,?___lomod+4
 10895  002BE8  C006  F006         	movff	___lomod@dividend+5,?___lomod+5
 10896  002BEC  C007  F007         	movff	___lomod@dividend+6,?___lomod+6
 10897  002BF0  C008  F008         	movff	___lomod@dividend+7,?___lomod+7
 10898  002BF4  0012               	return		;funcret
 10899  002BF6                     __end_of___lomod:
 10900                           	opt callstack 0
 10901                           
 10902 ;; *************** function ___lodiv *****************
 10903 ;; Defined at:
 10904 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lodiv.c"
 10905 ;; Parameters:    Size  Location     Type
 10906 ;;  dividend        8    0[COMRAM] unsigned long long 
 10907 ;;  divisor         8    8[COMRAM] unsigned long long 
 10908 ;; Auto vars:     Size  Location     Type
 10909 ;;  quotient        8   16[COMRAM] unsigned long long 
 10910 ;;  counter         1   24[COMRAM] unsigned char 
 10911 ;; Return value:  Size  Location     Type
 10912 ;;                  8    0[COMRAM] unsigned long long 
 10913 ;; Registers used:
 10914 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10915 ;; Tracked objects:
 10916 ;;		On entry : 0/0
 10917 ;;		On exit  : 0/0
 10918 ;;		Unchanged: 0/0
 10919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10920 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10921 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10923 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10924 ;;Total ram usage:       25 bytes
 10925 ;; Hardware stack levels used:    1
 10926 ;; Hardware stack levels required when called:    1
 10927 ;; This function calls:
 10928 ;;		Nothing
 10929 ;; This function is called by:
 10930 ;;		_utoa
 10931 ;; This function uses a non-reentrant model
 10932 ;;
 10933                           
 10934                           	psect	text44
 10935  0029BA                     __ptext44:
 10936                           	opt callstack 0
 10937  0029BA                     ___lodiv:
 10938                           	opt callstack 24
 10939                           
 10940                           ;incstack = 0
 10941  0029BA  EE20  F011         	lfsr	2,___lodiv@quotient
 10942  0029BE  0E07               	movlw	7
 10943  0029C0                     u4201:
 10944  0029C0  6ADE               	clrf	postinc2,c
 10945  0029C2  06E8               	decf	wreg,f,c
 10946  0029C4  E2FD               	bc	u4201
 10947  0029C6  5009               	movf	___lodiv@divisor,w,c
 10948  0029C8  100A               	iorwf	___lodiv@divisor+1,w,c
 10949  0029CA  100B               	iorwf	___lodiv@divisor+2,w,c
 10950  0029CC  100C               	iorwf	___lodiv@divisor+3,w,c
 10951  0029CE  100D               	iorwf	___lodiv@divisor+4,w,c
 10952  0029D0  100E               	iorwf	___lodiv@divisor+5,w,c
 10953  0029D2  100F               	iorwf	___lodiv@divisor+6,w,c
 10954  0029D4  1010               	iorwf	___lodiv@divisor+7,w,c
 10955  0029D6  B4D8               	btfsc	status,2,c
 10956  0029D8  D046               	goto	l1413
 10957  0029DA  0E01               	movlw	1
 10958  0029DC  6E19               	movwf	___lodiv@counter,c
 10959  0029DE  D00A               	goto	l4622
 10960  0029E0                     l4620:
 10961  0029E0  90D8               	bcf	status,0,c
 10962  0029E2  3609               	rlcf	___lodiv@divisor,f,c
 10963  0029E4  360A               	rlcf	___lodiv@divisor+1,f,c
 10964  0029E6  360B               	rlcf	___lodiv@divisor+2,f,c
 10965  0029E8  360C               	rlcf	___lodiv@divisor+3,f,c
 10966  0029EA  360D               	rlcf	___lodiv@divisor+4,f,c
 10967  0029EC  360E               	rlcf	___lodiv@divisor+5,f,c
 10968  0029EE  360F               	rlcf	___lodiv@divisor+6,f,c
 10969  0029F0  3610               	rlcf	___lodiv@divisor+7,f,c
 10970  0029F2  2A19               	incf	___lodiv@counter,f,c
 10971  0029F4                     l4622:
 10972  0029F4  AE10               	btfss	___lodiv@divisor+7,7,c
 10973  0029F6  D7F4               	goto	l4620
 10974  0029F8                     u4220:
 10975  0029F8  90D8               	bcf	status,0,c
 10976  0029FA  3611               	rlcf	___lodiv@quotient,f,c
 10977  0029FC  3612               	rlcf	___lodiv@quotient+1,f,c
 10978  0029FE  3613               	rlcf	___lodiv@quotient+2,f,c
 10979  002A00  3614               	rlcf	___lodiv@quotient+3,f,c
 10980  002A02  3615               	rlcf	___lodiv@quotient+4,f,c
 10981  002A04  3616               	rlcf	___lodiv@quotient+5,f,c
 10982  002A06  3617               	rlcf	___lodiv@quotient+6,f,c
 10983  002A08  3618               	rlcf	___lodiv@quotient+7,f,c
 10984  002A0A  5009               	movf	___lodiv@divisor,w,c
 10985  002A0C  5C01               	subwf	___lodiv@dividend,w,c
 10986  002A0E  500A               	movf	___lodiv@divisor+1,w,c
 10987  002A10  5802               	subwfb	___lodiv@dividend+1,w,c
 10988  002A12  500B               	movf	___lodiv@divisor+2,w,c
 10989  002A14  5803               	subwfb	___lodiv@dividend+2,w,c
 10990  002A16  500C               	movf	___lodiv@divisor+3,w,c
 10991  002A18  5804               	subwfb	___lodiv@dividend+3,w,c
 10992  002A1A  500D               	movf	___lodiv@divisor+4,w,c
 10993  002A1C  5805               	subwfb	___lodiv@dividend+4,w,c
 10994  002A1E  500E               	movf	___lodiv@divisor+5,w,c
 10995  002A20  5806               	subwfb	___lodiv@dividend+5,w,c
 10996  002A22  500F               	movf	___lodiv@divisor+6,w,c
 10997  002A24  5807               	subwfb	___lodiv@dividend+6,w,c
 10998  002A26  5010               	movf	___lodiv@divisor+7,w,c
 10999  002A28  5808               	subwfb	___lodiv@dividend+7,w,c
 11000  002A2A  A0D8               	btfss	status,0,c
 11001  002A2C  D011               	goto	l4632
 11002  002A2E  5009               	movf	___lodiv@divisor,w,c
 11003  002A30  5E01               	subwf	___lodiv@dividend,f,c
 11004  002A32  500A               	movf	___lodiv@divisor+1,w,c
 11005  002A34  5A02               	subwfb	___lodiv@dividend+1,f,c
 11006  002A36  500B               	movf	___lodiv@divisor+2,w,c
 11007  002A38  5A03               	subwfb	___lodiv@dividend+2,f,c
 11008  002A3A  500C               	movf	___lodiv@divisor+3,w,c
 11009  002A3C  5A04               	subwfb	___lodiv@dividend+3,f,c
 11010  002A3E  500D               	movf	___lodiv@divisor+4,w,c
 11011  002A40  5A05               	subwfb	___lodiv@dividend+4,f,c
 11012  002A42  500E               	movf	___lodiv@divisor+5,w,c
 11013  002A44  5A06               	subwfb	___lodiv@dividend+5,f,c
 11014  002A46  500F               	movf	___lodiv@divisor+6,w,c
 11015  002A48  5A07               	subwfb	___lodiv@dividend+6,f,c
 11016  002A4A  5010               	movf	___lodiv@divisor+7,w,c
 11017  002A4C  5A08               	subwfb	___lodiv@dividend+7,f,c
 11018  002A4E  8011               	bsf	___lodiv@quotient,0,c
 11019  002A50                     l4632:
 11020  002A50  90D8               	bcf	status,0,c
 11021  002A52  3210               	rrcf	___lodiv@divisor+7,f,c
 11022  002A54  320F               	rrcf	___lodiv@divisor+6,f,c
 11023  002A56  320E               	rrcf	___lodiv@divisor+5,f,c
 11024  002A58  320D               	rrcf	___lodiv@divisor+4,f,c
 11025  002A5A  320C               	rrcf	___lodiv@divisor+3,f,c
 11026  002A5C  320B               	rrcf	___lodiv@divisor+2,f,c
 11027  002A5E  320A               	rrcf	___lodiv@divisor+1,f,c
 11028  002A60  3209               	rrcf	___lodiv@divisor,f,c
 11029  002A62  2E19               	decfsz	___lodiv@counter,f,c
 11030  002A64  D7C9               	goto	u4220
 11031  002A66                     l1413:
 11032  002A66  C011  F001         	movff	___lodiv@quotient,?___lodiv
 11033  002A6A  C012  F002         	movff	___lodiv@quotient+1,?___lodiv+1
 11034  002A6E  C013  F003         	movff	___lodiv@quotient+2,?___lodiv+2
 11035  002A72  C014  F004         	movff	___lodiv@quotient+3,?___lodiv+3
 11036  002A76  C015  F005         	movff	___lodiv@quotient+4,?___lodiv+4
 11037  002A7A  C016  F006         	movff	___lodiv@quotient+5,?___lodiv+5
 11038  002A7E  C017  F007         	movff	___lodiv@quotient+6,?___lodiv+6
 11039  002A82  C018  F008         	movff	___lodiv@quotient+7,?___lodiv+7
 11040  002A86  0012               	return		;funcret
 11041  002A88                     __end_of___lodiv:
 11042                           	opt callstack 0
 11043                           
 11044 ;; *************** function _stoa *****************
 11045 ;; Defined at:
 11046 ;;		line 546 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 11047 ;; Parameters:    Size  Location     Type
 11048 ;;  fp              2   13[COMRAM] PTR struct _IO_FILE
 11049 ;;		 -> NULL(0), 
 11050 ;;  s               2   15[COMRAM] PTR unsigned char 
 11051 ;;		 -> ?_printf(2), runOp@endTime(3), STR_89(5), STR_88(5), 
 11052 ;;		 -> STR_86(5), STR_85(5), STR_80(5), STR_79(5), 
 11053 ;; Auto vars:     Size  Location     Type
 11054 ;;  nuls            7   18[COMRAM] unsigned char [7]
 11055 ;;  l               2   33[COMRAM] int 
 11056 ;;  p               2   31[COMRAM] int 
 11057 ;;  cp              2   29[COMRAM] PTR unsigned char 
 11058 ;;		 -> ?_printf(2), stoa@nuls(7), runOp@endTime(3), STR_89(5), 
 11059 ;;		 -> STR_88(5), STR_86(5), STR_85(5), STR_80(5), 
 11060 ;;		 -> STR_79(5), 
 11061 ;;  w               2   27[COMRAM] int 
 11062 ;;  i               2   25[COMRAM] int 
 11063 ;; Return value:  Size  Location     Type
 11064 ;;                  2   13[COMRAM] int 
 11065 ;; Registers used:
 11066 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11067 ;; Tracked objects:
 11068 ;;		On entry : 0/0
 11069 ;;		On exit  : 0/0
 11070 ;;		Unchanged: 0/0
 11071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11072 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11073 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11074 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11075 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11076 ;;Total ram usage:       22 bytes
 11077 ;; Hardware stack levels used:    1
 11078 ;; Hardware stack levels required when called:    6
 11079 ;; This function calls:
 11080 ;;		_fputc
 11081 ;;		_strlen
 11082 ;; This function is called by:
 11083 ;;		_vfpfcnvrt
 11084 ;; This function uses a non-reentrant model
 11085 ;;
 11086                           
 11087                           	psect	text45
 11088  002010                     __ptext45:
 11089                           	opt callstack 0
 11090  002010                     _stoa:
 11091                           	opt callstack 20
 11092                           
 11093                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 546: static
      +                           int stoa(FILE *fp, char *s);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\
      +                          common\doprnt.c: 547: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\commo
      +                          n\doprnt.c: 548:     char *cp, nuls[] = "(null)";
 11094                           
 11095                           ;incstack = 0
 11096  002010  EE20  F0E9         	lfsr	2,stoa@F1139
 11097  002014  EE10  F013         	lfsr	1,stoa@nuls
 11098  002018  0E06               	movlw	6
 11099  00201A                     u4441:
 11100  00201A  CFDB FFE3          	movff	plusw2,plusw1
 11101  00201E  06E8               	decf	wreg,f,c
 11102  002020  E2FC               	bc	u4441
 11103                           
 11104                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 549:     in
      +                          t i, l, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c
      +                          : 552:     cp = s;
 11105  002022  C010  F01E         	movff	stoa@s,stoa@cp
 11106  002026  C011  F01F         	movff	stoa@s+1,stoa@cp+1
 11107                           
 11108                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 553:     if
      +                           (!cp) {
 11109  00202A  501E               	movf	stoa@cp,w,c
 11110  00202C  101F               	iorwf	stoa@cp+1,w,c
 11111  00202E  A4D8               	btfss	status,2,c
 11112  002030  D004               	goto	l4734
 11113                           
 11114                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 554:       
      +                            cp = nuls;
 11115  002032  0E13               	movlw	low stoa@nuls
 11116  002034  6E1E               	movwf	stoa@cp,c
 11117  002036  0E00               	movlw	high stoa@nuls
 11118  002038  6E1F               	movwf	stoa@cp+1,c
 11119  00203A                     l4734:
 11120                           
 11121                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 558:     l 
      +                          = strlen(cp);
 11122  00203A  C01E  F001         	movff	stoa@cp,strlen@s
 11123  00203E  C01F  F002         	movff	stoa@cp+1,strlen@s+1
 11124  002042  EC6D  F019         	call	_strlen	;wreg free
 11125  002046  C001  F022         	movff	?_strlen,stoa@l
 11126  00204A  C002  F023         	movff	?_strlen+1,stoa@l+1
 11127                           
 11128                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 559:     p 
      +                          = prec;
 11129  00204E  C0BD  F020         	movff	_prec,stoa@p
 11130  002052  C0BE  F021         	movff	_prec+1,stoa@p+1
 11131                           
 11132                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 560:     l 
      +                          = (!(p < 0) && (p < l)) ? p : l;
 11133  002056  BE21               	btfsc	stoa@p+1,7,c
 11134  002058  D00E               	goto	l872
 11135  00205A  5022               	movf	stoa@l,w,c
 11136  00205C  5C20               	subwf	stoa@p,w,c
 11137  00205E  5021               	movf	stoa@p+1,w,c
 11138  002060  0A80               	xorlw	128
 11139  002062  6E12               	movwf	??_stoa& (0+255),c
 11140  002064  5023               	movf	stoa@l+1,w,c
 11141  002066  0A80               	xorlw	128
 11142  002068  5812               	subwfb	??_stoa& (0+255),w,c
 11143  00206A  B0D8               	btfsc	status,0,c
 11144  00206C  D004               	goto	l872
 11145  00206E  C020  F022         	movff	stoa@p,stoa@l
 11146  002072  C021  F023         	movff	stoa@p+1,stoa@l+1
 11147  002076                     l872:
 11148                           
 11149                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 561:     p 
      +                          = l;
 11150  002076  C022  F020         	movff	stoa@l,stoa@p
 11151  00207A  C023  F021         	movff	stoa@l+1,stoa@p+1
 11152                           
 11153                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 562:     w 
      +                          = width;
 11154  00207E  C0BB  F01C         	movff	_width,stoa@w
 11155  002082  C0BC  F01D         	movff	_width+1,stoa@w+1
 11156                           
 11157                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 565:     if
      +                           (!(flags & (1 << 0))) {
 11158  002086  0100               	movlb	0	; () banked
 11159  002088  A1BF               	btfss	_flags& (0+255),0,b
 11160  00208A  D00D               	goto	l4748
 11161  00208C  D016               	goto	u4490
 11162  00208E                     l4744:
 11163                           
 11164                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 567:       
      +                                fputc(' ', fp);
 11165  00208E  0E00               	movlw	0
 11166  002090  6E06               	movwf	fputc@c+1,c
 11167  002092  0E20               	movlw	32
 11168  002094  6E05               	movwf	fputc@c,c
 11169  002096  C00E  F007         	movff	stoa@fp,fputc@fp
 11170  00209A  C00F  F008         	movff	stoa@fp+1,fputc@fp+1
 11171  00209E  ECD2  F017         	call	_fputc	;wreg free
 11172                           
 11173                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 568:       
      +                                ++l;
 11174  0020A2  4A22               	infsnz	stoa@l,f,c
 11175  0020A4  2A23               	incf	stoa@l+1,f,c
 11176  0020A6                     l4748:
 11177                           
 11178                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 566:       
      +                            while (l < w) {
 11179  0020A6  501C               	movf	stoa@w,w,c
 11180  0020A8  5C22               	subwf	stoa@l,w,c
 11181  0020AA  5023               	movf	stoa@l+1,w,c
 11182  0020AC  0A80               	xorlw	128
 11183  0020AE  6E12               	movwf	??_stoa& (0+255),c
 11184  0020B0  501D               	movf	stoa@w+1,w,c
 11185  0020B2  0A80               	xorlw	128
 11186  0020B4  5812               	subwfb	??_stoa& (0+255),w,c
 11187  0020B6  A0D8               	btfss	status,0,c
 11188  0020B8  D7EA               	goto	l4744
 11189  0020BA                     u4490:
 11190                           
 11191                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 573:     i 
      +                          = 0;
 11192  0020BA  0E00               	movlw	0
 11193  0020BC  6E1B               	movwf	stoa@i+1,c
 11194  0020BE  0E00               	movlw	0
 11195  0020C0  6E1A               	movwf	stoa@i,c
 11196                           
 11197                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
 11198  0020C2  D01F               	goto	l4758
 11199  0020C4                     l4752:
 11200                           
 11201                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 575:       
      +                            fputc(*cp, fp);
 11202  0020C4  C01E  FFF6         	movff	stoa@cp,tblptrl
 11203  0020C8  C01F  FFF7         	movff	stoa@cp+1,tblptrh
 11204  0020CC  0E00               	movlw	low (__mediumconst shr (0+16))
 11205  0020CE  6EF8               	movwf	tblptru,c
 11206  0020D0  0E0F               	movlw	(high __ramtop+-1)
 11207  0020D2  64F7               	cpfsgt	tblptrh,c
 11208  0020D4  D003               	bra	u4507
 11209  0020D6  0008               	tblrd		*
 11210  0020D8  50F5               	movf	tablat,w,c
 11211  0020DA  D005               	bra	u4500
 11212  0020DC                     u4507:
 11213  0020DC  CFF6 FFE1          	movff	tblptrl,fsr1l
 11214  0020E0  CFF7 FFE2          	movff	tblptrh,fsr1h
 11215  0020E4  50E7               	movf	indf1,w,c
 11216  0020E6                     u4500:
 11217  0020E6  6E12               	movwf	??_stoa& (0+255),c
 11218  0020E8  5012               	movf	??_stoa,w,c
 11219  0020EA  6E05               	movwf	fputc@c,c
 11220  0020EC  6A06               	clrf	fputc@c+1,c
 11221  0020EE  C00E  F007         	movff	stoa@fp,fputc@fp
 11222  0020F2  C00F  F008         	movff	stoa@fp+1,fputc@fp+1
 11223  0020F6  ECD2  F017         	call	_fputc	;wreg free
 11224                           
 11225                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 576:       
      +                            ++cp;
 11226  0020FA  4A1E               	infsnz	stoa@cp,f,c
 11227  0020FC  2A1F               	incf	stoa@cp+1,f,c
 11228                           
 11229                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 577:       
      +                            ++i;
 11230  0020FE  4A1A               	infsnz	stoa@i,f,c
 11231  002100  2A1B               	incf	stoa@i+1,f,c
 11232  002102                     l4758:
 11233                           
 11234                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
 11235  002102  5020               	movf	stoa@p,w,c
 11236  002104  5C1A               	subwf	stoa@i,w,c
 11237  002106  501B               	movf	stoa@i+1,w,c
 11238  002108  0A80               	xorlw	128
 11239  00210A  6E12               	movwf	??_stoa& (0+255),c
 11240  00210C  5021               	movf	stoa@p+1,w,c
 11241  00210E  0A80               	xorlw	128
 11242  002110  5812               	subwfb	??_stoa& (0+255),w,c
 11243  002112  A0D8               	btfss	status,0,c
 11244  002114  D7D7               	goto	l4752
 11245                           
 11246                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 581:     if
      +                           (flags & (1 << 0)) {
 11247  002116  0100               	movlb	0	; () banked
 11248  002118  B1BF               	btfsc	_flags& (0+255),0,b
 11249  00211A  D00D               	goto	l4766
 11250  00211C  D016               	goto	u4530
 11251  00211E                     l4762:
 11252                           
 11253                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 583:       
      +                                fputc(' ', fp);
 11254  00211E  0E00               	movlw	0
 11255  002120  6E06               	movwf	fputc@c+1,c
 11256  002122  0E20               	movlw	32
 11257  002124  6E05               	movwf	fputc@c,c
 11258  002126  C00E  F007         	movff	stoa@fp,fputc@fp
 11259  00212A  C00F  F008         	movff	stoa@fp+1,fputc@fp+1
 11260  00212E  ECD2  F017         	call	_fputc	;wreg free
 11261                           
 11262                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 584:       
      +                                ++l;
 11263  002132  4A22               	infsnz	stoa@l,f,c
 11264  002134  2A23               	incf	stoa@l+1,f,c
 11265  002136                     l4766:
 11266                           
 11267                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 582:       
      +                            while (l < w) {
 11268  002136  501C               	movf	stoa@w,w,c
 11269  002138  5C22               	subwf	stoa@l,w,c
 11270  00213A  5023               	movf	stoa@l+1,w,c
 11271  00213C  0A80               	xorlw	128
 11272  00213E  6E12               	movwf	??_stoa& (0+255),c
 11273  002140  501D               	movf	stoa@w+1,w,c
 11274  002142  0A80               	xorlw	128
 11275  002144  5812               	subwfb	??_stoa& (0+255),w,c
 11276  002146  A0D8               	btfss	status,0,c
 11277  002148  D7EA               	goto	l4762
 11278  00214A                     u4530:
 11279                           
 11280                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 588:     re
      +                          turn l;
 11281                           
 11282                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 586:     }
 11283  00214A  C022  F00E         	movff	stoa@l,?_stoa
 11284  00214E  C023  F00F         	movff	stoa@l+1,?_stoa+1
 11285  002152  0012               	return		;funcret
 11286  002154                     __end_of_stoa:
 11287                           	opt callstack 0
 11288                           
 11289 ;; *************** function _dtoa *****************
 11290 ;; Defined at:
 11291 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 11292 ;; Parameters:    Size  Location     Type
 11293 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
 11294 ;;		 -> NULL(0), 
 11295 ;;  d               8   33[COMRAM] long long 
 11296 ;; Auto vars:     Size  Location     Type
 11297 ;;  n               8   57[COMRAM] long long 
 11298 ;;  i               2   65[COMRAM] int 
 11299 ;;  s               2   55[COMRAM] int 
 11300 ;;  w               2   53[COMRAM] int 
 11301 ;;  p               2   51[COMRAM] int 
 11302 ;; Return value:  Size  Location     Type
 11303 ;;                  2   31[COMRAM] int 
 11304 ;; Registers used:
 11305 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11306 ;; Tracked objects:
 11307 ;;		On entry : 0/0
 11308 ;;		On exit  : 0/0
 11309 ;;		Unchanged: 0/0
 11310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11311 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11312 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11313 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11314 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11315 ;;Total ram usage:       36 bytes
 11316 ;; Hardware stack levels used:    1
 11317 ;; Hardware stack levels required when called:    8
 11318 ;; This function calls:
 11319 ;;		___aodiv
 11320 ;;		___aomod
 11321 ;;		_abs
 11322 ;;		_pad
 11323 ;; This function is called by:
 11324 ;;		_vfpfcnvrt
 11325 ;; This function uses a non-reentrant model
 11326 ;;
 11327                           
 11328                           	psect	text46
 11329  000FCA                     __ptext46:
 11330                           	opt callstack 0
 11331  000FCA                     _dtoa:
 11332                           	opt callstack 18
 11333                           
 11334                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
 11335                           
 11336                           ;incstack = 0
 11337  000FCA  C022  F03A         	movff	dtoa@d,dtoa@n
 11338  000FCE  C023  F03B         	movff	dtoa@d+1,dtoa@n+1
 11339  000FD2  C024  F03C         	movff	dtoa@d+2,dtoa@n+2
 11340  000FD6  C025  F03D         	movff	dtoa@d+3,dtoa@n+3
 11341  000FDA  C026  F03E         	movff	dtoa@d+4,dtoa@n+4
 11342  000FDE  C027  F03F         	movff	dtoa@d+5,dtoa@n+5
 11343  000FE2  C028  F040         	movff	dtoa@d+6,dtoa@n+6
 11344  000FE6  C029  F041         	movff	dtoa@d+7,dtoa@n+7
 11345                           
 11346                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
 11347  000FEA  AE41               	btfss	dtoa@n+7,7,c
 11348  000FEC  D002               	goto	u4290
 11349  000FEE  0E01               	movlw	1
 11350  000FF0  D001               	goto	u4300
 11351  000FF2                     u4290:
 11352  000FF2  0E00               	movlw	0
 11353  000FF4                     u4300:
 11354  000FF4  6E38               	movwf	dtoa@s,c
 11355  000FF6  6A39               	clrf	dtoa@s+1,c
 11356                           
 11357                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
 11358  000FF8  5038               	movf	dtoa@s,w,c
 11359  000FFA  1039               	iorwf	dtoa@s+1,w,c
 11360  000FFC  B4D8               	btfsc	status,2,c
 11361  000FFE  D010               	goto	l4670
 11362                           
 11363                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
 11364  001000  1E41               	comf	dtoa@n+7,f,c
 11365  001002  1E40               	comf	dtoa@n+6,f,c
 11366  001004  1E3F               	comf	dtoa@n+5,f,c
 11367  001006  1E3E               	comf	dtoa@n+4,f,c
 11368  001008  1E3D               	comf	dtoa@n+3,f,c
 11369  00100A  1E3C               	comf	dtoa@n+2,f,c
 11370  00100C  1E3B               	comf	dtoa@n+1,f,c
 11371  00100E  6C3A               	negf	dtoa@n,c
 11372  001010  0E00               	movlw	0
 11373  001012  223B               	addwfc	dtoa@n+1,f,c
 11374  001014  223C               	addwfc	dtoa@n+2,f,c
 11375  001016  223D               	addwfc	dtoa@n+3,f,c
 11376  001018  223E               	addwfc	dtoa@n+4,f,c
 11377  00101A  223F               	addwfc	dtoa@n+5,f,c
 11378  00101C  2240               	addwfc	dtoa@n+6,f,c
 11379  00101E  2241               	addwfc	dtoa@n+7,f,c
 11380  001020                     l4670:
 11381                           
 11382                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
 11383  001020  0100               	movlb	0	; () banked
 11384  001022  AFBE               	btfss	(_prec+1)& (0+255),7,b
 11385                           
 11386                           ; BSR set to: 0
 11387                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
 11388  001024  93BF               	bcf	_flags& (0+255),1,b
 11389                           
 11390                           ; BSR set to: 0
 11391                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
 11392  001026  BFBE               	btfsc	(_prec+1)& (0+255),7,b
 11393  001028  D005               	goto	u4330
 11394  00102A  51BE               	movf	(_prec+1)& (0+255),w,b
 11395  00102C  E108               	bnz	l843
 11396  00102E  05BD               	decf	_prec& (0+255),w,b
 11397  001030  B0D8               	btfsc	status,0,c
 11398  001032  D005               	goto	l843
 11399  001034                     u4330:
 11400                           
 11401                           ; BSR set to: 0
 11402  001034  0E00               	movlw	0
 11403  001036  6E35               	movwf	dtoa@p+1,c
 11404  001038  0E01               	movlw	1
 11405  00103A  6E34               	movwf	dtoa@p,c
 11406  00103C  D004               	goto	l845
 11407  00103E                     l843:
 11408                           
 11409                           ; BSR set to: 0
 11410  00103E  C0BD  F034         	movff	_prec,dtoa@p
 11411  001042  C0BE  F035         	movff	_prec+1,dtoa@p+1
 11412  001046                     l845:
 11413                           
 11414                           ; BSR set to: 0
 11415                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
 11416  001046  C0BB  F036         	movff	_width,dtoa@w
 11417  00104A  C0BC  F037         	movff	_width+1,dtoa@w+1
 11418                           
 11419                           ; BSR set to: 0
 11420                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
 11421  00104E  5038               	movf	dtoa@s,w,c
 11422  001050  1039               	iorwf	dtoa@s+1,w,c
 11423  001052  A4D8               	btfss	status,2,c
 11424  001054  D002               	goto	u4350
 11425                           
 11426                           ; BSR set to: 0
 11427  001056  A5BF               	btfss	_flags& (0+255),2,b
 11428  001058  D003               	goto	l4684
 11429  00105A                     u4350:
 11430                           
 11431                           ; BSR set to: 0
 11432                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
 11433  00105A  0636               	decf	dtoa@w,f,c
 11434  00105C  A0D8               	btfss	status,0,c
 11435  00105E  0637               	decf	dtoa@w+1,f,c
 11436  001060                     l4684:
 11437                           
 11438                           ; BSR set to: 0
 11439                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
 11440  001060  0E00               	movlw	0
 11441  001062  6E43               	movwf	dtoa@i+1,c
 11442  001064  0E1F               	movlw	31
 11443  001066  6E42               	movwf	dtoa@i,c
 11444                           
 11445                           ; BSR set to: 0
 11446                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
 11447  001068  0E00               	movlw	0
 11448  00106A  6FE2               	movwf	(_dbuf+31)& (0+255),b
 11449                           
 11450                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 11451  00106C  D07C               	goto	l4698
 11452  00106E                     l4688:
 11453                           
 11454                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
 11455  00106E  0642               	decf	dtoa@i,f,c
 11456  001070  A0D8               	btfss	status,0,c
 11457  001072  0643               	decf	dtoa@i+1,f,c
 11458                           
 11459                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
 11460  001074  0EC3               	movlw	low _dbuf
 11461  001076  2442               	addwf	dtoa@i,w,c
 11462  001078  6ED9               	movwf	fsr2l,c
 11463  00107A  0E00               	movlw	high _dbuf
 11464  00107C  2043               	addwfc	dtoa@i+1,w,c
 11465  00107E  6EDA               	movwf	fsr2h,c
 11466  001080  C03A  F001         	movff	dtoa@n,___aomod@dividend
 11467  001084  C03B  F002         	movff	dtoa@n+1,___aomod@dividend+1
 11468  001088  C03C  F003         	movff	dtoa@n+2,___aomod@dividend+2
 11469  00108C  C03D  F004         	movff	dtoa@n+3,___aomod@dividend+3
 11470  001090  C03E  F005         	movff	dtoa@n+4,___aomod@dividend+4
 11471  001094  C03F  F006         	movff	dtoa@n+5,___aomod@dividend+5
 11472  001098  C040  F007         	movff	dtoa@n+6,___aomod@dividend+6
 11473  00109C  C041  F008         	movff	dtoa@n+7,___aomod@dividend+7
 11474  0010A0  0E0A               	movlw	10
 11475  0010A2  6E09               	movwf	___aomod@divisor,c
 11476  0010A4  0E00               	movlw	0
 11477  0010A6  6E0A               	movwf	___aomod@divisor+1,c
 11478  0010A8  0E00               	movlw	0
 11479  0010AA  6E0B               	movwf	___aomod@divisor+2,c
 11480  0010AC  0E00               	movlw	0
 11481  0010AE  6E0C               	movwf	___aomod@divisor+3,c
 11482  0010B0  0E00               	movlw	0
 11483  0010B2  6E0D               	movwf	___aomod@divisor+4,c
 11484  0010B4  0E00               	movlw	0
 11485  0010B6  6E0E               	movwf	___aomod@divisor+5,c
 11486  0010B8  0E00               	movlw	0
 11487  0010BA  6E0F               	movwf	___aomod@divisor+6,c
 11488  0010BC  0E00               	movlw	0
 11489  0010BE  6E10               	movwf	___aomod@divisor+7,c
 11490  0010C0  ECE6  F011         	call	___aomod	;wreg free
 11491  0010C4  C001  F02A         	movff	?___aomod,??_dtoa
 11492  0010C8  C002  F02B         	movff	?___aomod+1,??_dtoa+1
 11493  0010CC  C003  F02C         	movff	?___aomod+2,??_dtoa+2
 11494  0010D0  C004  F02D         	movff	?___aomod+3,??_dtoa+3
 11495  0010D4  C005  F02E         	movff	?___aomod+4,??_dtoa+4
 11496  0010D8  C006  F02F         	movff	?___aomod+5,??_dtoa+5
 11497  0010DC  C007  F030         	movff	?___aomod+6,??_dtoa+6
 11498  0010E0  C008  F031         	movff	?___aomod+7,??_dtoa+7
 11499  0010E4  C02A  F013         	movff	??_dtoa,abs@a
 11500  0010E8  C02C  F014         	movff	??_dtoa+2,abs@a+1
 11501  0010EC  ECE4  F019         	call	_abs	;wreg free
 11502  0010F0  5013               	movf	?_abs,w,c
 11503  0010F2  0F30               	addlw	48
 11504  0010F4  6EDF               	movwf	indf2,c
 11505                           
 11506                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
 11507  0010F6  0634               	decf	dtoa@p,f,c
 11508  0010F8  A0D8               	btfss	status,0,c
 11509  0010FA  0635               	decf	dtoa@p+1,f,c
 11510                           
 11511                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
 11512  0010FC  0636               	decf	dtoa@w,f,c
 11513  0010FE  A0D8               	btfss	status,0,c
 11514  001100  0637               	decf	dtoa@w+1,f,c
 11515                           
 11516                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
 11517  001102  C03A  F001         	movff	dtoa@n,___aodiv@dividend
 11518  001106  C03B  F002         	movff	dtoa@n+1,___aodiv@dividend+1
 11519  00110A  C03C  F003         	movff	dtoa@n+2,___aodiv@dividend+2
 11520  00110E  C03D  F004         	movff	dtoa@n+3,___aodiv@dividend+3
 11521  001112  C03E  F005         	movff	dtoa@n+4,___aodiv@dividend+4
 11522  001116  C03F  F006         	movff	dtoa@n+5,___aodiv@dividend+5
 11523  00111A  C040  F007         	movff	dtoa@n+6,___aodiv@dividend+6
 11524  00111E  C041  F008         	movff	dtoa@n+7,___aodiv@dividend+7
 11525  001122  0E0A               	movlw	10
 11526  001124  6E09               	movwf	___aodiv@divisor,c
 11527  001126  0E00               	movlw	0
 11528  001128  6E0A               	movwf	___aodiv@divisor+1,c
 11529  00112A  0E00               	movlw	0
 11530  00112C  6E0B               	movwf	___aodiv@divisor+2,c
 11531  00112E  0E00               	movlw	0
 11532  001130  6E0C               	movwf	___aodiv@divisor+3,c
 11533  001132  0E00               	movlw	0
 11534  001134  6E0D               	movwf	___aodiv@divisor+4,c
 11535  001136  0E00               	movlw	0
 11536  001138  6E0E               	movwf	___aodiv@divisor+5,c
 11537  00113A  0E00               	movlw	0
 11538  00113C  6E0F               	movwf	___aodiv@divisor+6,c
 11539  00113E  0E00               	movlw	0
 11540  001140  6E10               	movwf	___aodiv@divisor+7,c
 11541  001142  ECC1  F00E         	call	___aodiv	;wreg free
 11542  001146  C001  F03A         	movff	?___aodiv,dtoa@n
 11543  00114A  C002  F03B         	movff	?___aodiv+1,dtoa@n+1
 11544  00114E  C003  F03C         	movff	?___aodiv+2,dtoa@n+2
 11545  001152  C004  F03D         	movff	?___aodiv+3,dtoa@n+3
 11546  001156  C005  F03E         	movff	?___aodiv+4,dtoa@n+4
 11547  00115A  C006  F03F         	movff	?___aodiv+5,dtoa@n+5
 11548  00115E  C007  F040         	movff	?___aodiv+6,dtoa@n+6
 11549  001162  C008  F041         	movff	?___aodiv+7,dtoa@n+7
 11550  001166                     l4698:
 11551                           
 11552                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 11553  001166  BE43               	btfsc	dtoa@i+1,7,c
 11554  001168  D020               	goto	u4400
 11555  00116A  5043               	movf	dtoa@i+1,w,c
 11556  00116C  E103               	bnz	u4360
 11557  00116E  0442               	decf	dtoa@i,w,c
 11558  001170  A0D8               	btfss	status,0,c
 11559  001172  D01B               	goto	u4400
 11560  001174                     u4360:
 11561  001174  503A               	movf	dtoa@n,w,c
 11562  001176  103B               	iorwf	dtoa@n+1,w,c
 11563  001178  103C               	iorwf	dtoa@n+2,w,c
 11564  00117A  103D               	iorwf	dtoa@n+3,w,c
 11565  00117C  103E               	iorwf	dtoa@n+4,w,c
 11566  00117E  103F               	iorwf	dtoa@n+5,w,c
 11567  001180  1040               	iorwf	dtoa@n+6,w,c
 11568  001182  1041               	iorwf	dtoa@n+7,w,c
 11569  001184  A4D8               	btfss	status,2,c
 11570  001186  D773               	goto	l4688
 11571  001188  BE35               	btfsc	dtoa@p+1,7,c
 11572  00118A  D005               	goto	u4380
 11573  00118C  5035               	movf	dtoa@p+1,w,c
 11574  00118E  E102               	bnz	u4381
 11575  001190  0434               	decf	dtoa@p,w,c
 11576  001192  B0D8               	btfsc	status,0,c
 11577  001194                     u4381:
 11578  001194  D76C               	goto	l4688
 11579  001196                     u4380:
 11580  001196  BE37               	btfsc	dtoa@w+1,7,c
 11581  001198  D008               	goto	u4400
 11582  00119A  5037               	movf	dtoa@w+1,w,c
 11583  00119C  E103               	bnz	u4390
 11584  00119E  0436               	decf	dtoa@w,w,c
 11585  0011A0  A0D8               	btfss	status,0,c
 11586  0011A2  D003               	goto	u4400
 11587  0011A4                     u4390:
 11588  0011A4  0100               	movlb	0	; () banked
 11589  0011A6  B3BF               	btfsc	_flags& (0+255),1,b
 11590  0011A8  D762               	goto	l4688
 11591  0011AA                     u4400:
 11592                           
 11593                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
 11594  0011AA  5038               	movf	dtoa@s,w,c
 11595  0011AC  1039               	iorwf	dtoa@s+1,w,c
 11596  0011AE  A4D8               	btfss	status,2,c
 11597  0011B0  D003               	goto	u4420
 11598  0011B2  0100               	movlb	0	; () banked
 11599  0011B4  A5BF               	btfss	_flags& (0+255),2,b
 11600  0011B6  D017               	goto	l4722
 11601  0011B8                     u4420:
 11602                           
 11603                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
 11604  0011B8  0642               	decf	dtoa@i,f,c
 11605  0011BA  A0D8               	btfss	status,0,c
 11606  0011BC  0643               	decf	dtoa@i+1,f,c
 11607                           
 11608                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
 11609  0011BE  5038               	movf	dtoa@s,w,c
 11610  0011C0  1039               	iorwf	dtoa@s+1,w,c
 11611  0011C2  A4D8               	btfss	status,2,c
 11612  0011C4  D004               	goto	l4718
 11613  0011C6  0E00               	movlw	0
 11614  0011C8  6E33               	movwf	_dtoa$1478+1,c
 11615  0011CA  0E2B               	movlw	43
 11616  0011CC  D003               	goto	L39
 11617  0011CE                     l4718:
 11618  0011CE  0E00               	movlw	0
 11619  0011D0  6E33               	movwf	_dtoa$1478+1,c
 11620  0011D2  0E2D               	movlw	45
 11621  0011D4                     L39:
 11622  0011D4  6E32               	movwf	_dtoa$1478,c
 11623  0011D6  0EC3               	movlw	low _dbuf
 11624  0011D8  2442               	addwf	dtoa@i,w,c
 11625  0011DA  6ED9               	movwf	fsr2l,c
 11626  0011DC  0E00               	movlw	high _dbuf
 11627  0011DE  2043               	addwfc	dtoa@i+1,w,c
 11628  0011E0  6EDA               	movwf	fsr2h,c
 11629  0011E2  C032  FFDF         	movff	_dtoa$1478,indf2
 11630  0011E6                     l4722:
 11631                           
 11632                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
 11633  0011E6  C020  F015         	movff	dtoa@fp,pad@fp
 11634  0011EA  C021  F016         	movff	dtoa@fp+1,pad@fp+1
 11635  0011EE  0EC3               	movlw	low _dbuf
 11636  0011F0  2442               	addwf	dtoa@i,w,c
 11637  0011F2  6E17               	movwf	pad@buf,c
 11638  0011F4  0E00               	movlw	high _dbuf
 11639  0011F6  2043               	addwfc	dtoa@i+1,w,c
 11640  0011F8  6E18               	movwf	pad@buf+1,c
 11641  0011FA  C036  F019         	movff	dtoa@w,pad@p
 11642  0011FE  C037  F01A         	movff	dtoa@w+1,pad@p+1
 11643  001202  EC50  F016         	call	_pad	;wreg free
 11644  001206  C015  F020         	movff	?_pad,?_dtoa
 11645  00120A  C016  F021         	movff	?_pad+1,?_dtoa+1
 11646  00120E  0012               	return		;funcret
 11647  001210                     __end_of_dtoa:
 11648                           	opt callstack 0
 11649                           
 11650 ;; *************** function _pad *****************
 11651 ;; Defined at:
 11652 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 11653 ;; Parameters:    Size  Location     Type
 11654 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
 11655 ;;		 -> NULL(0), 
 11656 ;;  buf             2   22[COMRAM] PTR unsigned char 
 11657 ;;		 -> dbuf(32), 
 11658 ;;  p               2   24[COMRAM] int 
 11659 ;; Auto vars:     Size  Location     Type
 11660 ;;  w               2   29[COMRAM] int 
 11661 ;;  i               2   27[COMRAM] int 
 11662 ;; Return value:  Size  Location     Type
 11663 ;;                  2   20[COMRAM] int 
 11664 ;; Registers used:
 11665 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11666 ;; Tracked objects:
 11667 ;;		On entry : 0/0
 11668 ;;		On exit  : 0/0
 11669 ;;		Unchanged: 0/0
 11670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11671 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11672 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11673 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11674 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11675 ;;Total ram usage:       11 bytes
 11676 ;; Hardware stack levels used:    1
 11677 ;; Hardware stack levels required when called:    7
 11678 ;; This function calls:
 11679 ;;		_fputc
 11680 ;;		_fputs
 11681 ;;		_strlen
 11682 ;; This function is called by:
 11683 ;;		_dtoa
 11684 ;;		_utoa
 11685 ;;		_xtoa
 11686 ;; This function uses a non-reentrant model
 11687 ;;
 11688                           
 11689                           	psect	text47
 11690  002CA0                     __ptext47:
 11691                           	opt callstack 0
 11692  002CA0                     _pad:
 11693                           	opt callstack 18
 11694                           
 11695                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
 11696                           
 11697                           ;incstack = 0
 11698  002CA0  0100               	movlb	0	; () banked
 11699  002CA2  A1BF               	btfss	_flags& (0+255),0,b
 11700  002CA4  D00A               	goto	l4484
 11701                           
 11702                           ; BSR set to: 0
 11703                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
 11704  002CA6  C017  F00E         	movff	pad@buf,fputs@s
 11705  002CAA  C018  F00F         	movff	pad@buf+1,fputs@s+1
 11706  002CAE  C015  F010         	movff	pad@fp,fputs@fp
 11707  002CB2  C016  F011         	movff	pad@fp+1,fputs@fp+1
 11708  002CB6  ECAE  F019         	call	_fputs	;wreg free
 11709  002CBA                     l4484:
 11710                           
 11711                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
 11712  002CBA  BE1A               	btfsc	pad@p+1,7,c
 11713  002CBC  D005               	goto	l4488
 11714  002CBE  C019  F01E         	movff	pad@p,pad@w
 11715  002CC2  C01A  F01F         	movff	pad@p+1,pad@w+1
 11716  002CC6  D004               	goto	l832
 11717  002CC8                     l4488:
 11718  002CC8  0E00               	movlw	0
 11719  002CCA  6E1F               	movwf	pad@w+1,c
 11720  002CCC  0E00               	movlw	0
 11721  002CCE  6E1E               	movwf	pad@w,c
 11722  002CD0                     l832:
 11723                           
 11724                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
 11725  002CD0  0E00               	movlw	0
 11726  002CD2  6E1D               	movwf	pad@i+1,c
 11727  002CD4  0E00               	movlw	0
 11728  002CD6  6E1C               	movwf	pad@i,c
 11729                           
 11730                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 11731  002CD8  D00C               	goto	l4494
 11732  002CDA                     l4490:
 11733                           
 11734                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
 11735  002CDA  0E00               	movlw	0
 11736  002CDC  6E06               	movwf	fputc@c+1,c
 11737  002CDE  0E20               	movlw	32
 11738  002CE0  6E05               	movwf	fputc@c,c
 11739  002CE2  C015  F007         	movff	pad@fp,fputc@fp
 11740  002CE6  C016  F008         	movff	pad@fp+1,fputc@fp+1
 11741  002CEA  ECD2  F017         	call	_fputc	;wreg free
 11742                           
 11743                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
 11744  002CEE  4A1C               	infsnz	pad@i,f,c
 11745  002CF0  2A1D               	incf	pad@i+1,f,c
 11746  002CF2                     l4494:
 11747                           
 11748                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 11749  002CF2  501E               	movf	pad@w,w,c
 11750  002CF4  5C1C               	subwf	pad@i,w,c
 11751  002CF6  501D               	movf	pad@i+1,w,c
 11752  002CF8  0A80               	xorlw	128
 11753  002CFA  6E1B               	movwf	??_pad& (0+255),c
 11754  002CFC  501F               	movf	pad@w+1,w,c
 11755  002CFE  0A80               	xorlw	128
 11756  002D00  581B               	subwfb	??_pad& (0+255),w,c
 11757  002D02  A0D8               	btfss	status,0,c
 11758  002D04  D7EA               	goto	l4490
 11759                           
 11760                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
 11761  002D06  0100               	movlb	0	; () banked
 11762  002D08  B1BF               	btfsc	_flags& (0+255),0,b
 11763  002D0A  D00A               	goto	l4498
 11764                           
 11765                           ; BSR set to: 0
 11766                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
 11767  002D0C  C017  F00E         	movff	pad@buf,fputs@s
 11768  002D10  C018  F00F         	movff	pad@buf+1,fputs@s+1
 11769  002D14  C015  F010         	movff	pad@fp,fputs@fp
 11770  002D18  C016  F011         	movff	pad@fp+1,fputs@fp+1
 11771  002D1C  ECAE  F019         	call	_fputs	;wreg free
 11772  002D20                     l4498:
 11773                           
 11774                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 11775  002D20  C017  F001         	movff	pad@buf,strlen@s
 11776  002D24  C018  F002         	movff	pad@buf+1,strlen@s+1
 11777  002D28  EC6D  F019         	call	_strlen	;wreg free
 11778  002D2C  501E               	movf	pad@w,w,c
 11779  002D2E  2401               	addwf	?_strlen,w,c
 11780  002D30  6E15               	movwf	?_pad,c
 11781  002D32  501F               	movf	pad@w+1,w,c
 11782  002D34  2002               	addwfc	?_strlen+1,w,c
 11783  002D36  6E16               	movwf	?_pad+1,c
 11784  002D38  0012               	return		;funcret
 11785  002D3A                     __end_of_pad:
 11786                           	opt callstack 0
 11787                           
 11788 ;; *************** function _strlen *****************
 11789 ;; Defined at:
 11790 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 11791 ;; Parameters:    Size  Location     Type
 11792 ;;  s               2    0[COMRAM] PTR const unsigned char 
 11793 ;;		 -> ?_printf(2), stoa@nuls(7), dbuf(32), runOp@endTime(3), 
 11794 ;;		 -> STR_89(5), STR_88(5), STR_86(5), STR_85(5), 
 11795 ;;		 -> STR_80(5), STR_79(5), 
 11796 ;; Auto vars:     Size  Location     Type
 11797 ;;  a               2    2[COMRAM] PTR const unsigned char 
 11798 ;;		 -> ?_printf(2), stoa@nuls(7), dbuf(32), runOp@endTime(3), 
 11799 ;;		 -> STR_89(5), STR_88(5), STR_86(5), STR_85(5), 
 11800 ;;		 -> STR_80(5), STR_79(5), 
 11801 ;; Return value:  Size  Location     Type
 11802 ;;                  2    0[COMRAM] unsigned int 
 11803 ;; Registers used:
 11804 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
 11805 ;; Tracked objects:
 11806 ;;		On entry : 0/0
 11807 ;;		On exit  : 0/0
 11808 ;;		Unchanged: 0/0
 11809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11810 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11811 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11813 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11814 ;;Total ram usage:        4 bytes
 11815 ;; Hardware stack levels used:    1
 11816 ;; Hardware stack levels required when called:    1
 11817 ;; This function calls:
 11818 ;;		Nothing
 11819 ;; This function is called by:
 11820 ;;		_pad
 11821 ;;		_stoa
 11822 ;; This function uses a non-reentrant model
 11823 ;;
 11824                           
 11825                           	psect	text48
 11826  0032DA                     __ptext48:
 11827                           	opt callstack 0
 11828  0032DA                     _strlen:
 11829                           	opt callstack 23
 11830                           
 11831                           ;incstack = 0
 11832  0032DA  C001  F003         	movff	strlen@s,strlen@a
 11833  0032DE  C002  F004         	movff	strlen@s+1,strlen@a+1
 11834  0032E2  D002               	goto	l4470
 11835  0032E4                     l4468:
 11836  0032E4  4A01               	infsnz	strlen@s,f,c
 11837  0032E6  2A02               	incf	strlen@s+1,f,c
 11838  0032E8                     l4470:
 11839  0032E8  C001  FFF6         	movff	strlen@s,tblptrl
 11840  0032EC  C002  FFF7         	movff	strlen@s+1,tblptrh
 11841  0032F0  0E00               	movlw	low (__mediumconst shr (0+16))
 11842  0032F2  6EF8               	movwf	tblptru,c
 11843  0032F4  0E0F               	movlw	(high __ramtop+-1)
 11844  0032F6  64F7               	cpfsgt	tblptrh,c
 11845  0032F8  D003               	bra	u3897
 11846  0032FA  0008               	tblrd		*
 11847  0032FC  50F5               	movf	tablat,w,c
 11848  0032FE  D005               	bra	u3890
 11849  003300                     u3897:
 11850  003300  CFF6 FFE1          	movff	tblptrl,fsr1l
 11851  003304  CFF7 FFE2          	movff	tblptrh,fsr1h
 11852  003308  50E7               	movf	indf1,w,c
 11853  00330A                     u3890:
 11854  00330A  0900               	iorlw	0
 11855  00330C  A4D8               	btfss	status,2,c
 11856  00330E  D7EA               	goto	l4468
 11857  003310  5003               	movf	strlen@a,w,c
 11858  003312  5C01               	subwf	strlen@s,w,c
 11859  003314  6E01               	movwf	?_strlen,c
 11860  003316  5004               	movf	strlen@a+1,w,c
 11861  003318  5802               	subwfb	strlen@s+1,w,c
 11862  00331A  6E02               	movwf	?_strlen+1,c
 11863  00331C  0012               	return		;funcret
 11864  00331E                     __end_of_strlen:
 11865                           	opt callstack 0
 11866                           
 11867 ;; *************** function _fputs *****************
 11868 ;; Defined at:
 11869 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
 11870 ;; Parameters:    Size  Location     Type
 11871 ;;  s               2   13[COMRAM] PTR const unsigned char 
 11872 ;;		 -> dbuf(32), 
 11873 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
 11874 ;;		 -> NULL(0), 
 11875 ;; Auto vars:     Size  Location     Type
 11876 ;;  i               2   18[COMRAM] int 
 11877 ;;  c               1   17[COMRAM] unsigned char 
 11878 ;; Return value:  Size  Location     Type
 11879 ;;                  2   13[COMRAM] int 
 11880 ;; Registers used:
 11881 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11882 ;; Tracked objects:
 11883 ;;		On entry : 0/0
 11884 ;;		On exit  : 0/0
 11885 ;;		Unchanged: 0/0
 11886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11887 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11888 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11890 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11891 ;;Total ram usage:        7 bytes
 11892 ;; Hardware stack levels used:    1
 11893 ;; Hardware stack levels required when called:    6
 11894 ;; This function calls:
 11895 ;;		_fputc
 11896 ;; This function is called by:
 11897 ;;		_pad
 11898 ;; This function uses a non-reentrant model
 11899 ;;
 11900                           
 11901                           	psect	text49
 11902  00335C                     __ptext49:
 11903                           	opt callstack 0
 11904  00335C                     _fputs:
 11905                           	opt callstack 18
 11906                           
 11907                           ;incstack = 0
 11908  00335C  0E00               	movlw	0
 11909  00335E  6E14               	movwf	fputs@i+1,c
 11910  003360  0E00               	movlw	0
 11911  003362  6E13               	movwf	fputs@i,c
 11912  003364  D00B               	goto	l4464
 11913  003366                     l4460:
 11914  003366  C012  F005         	movff	fputs@c,fputc@c
 11915  00336A  6A06               	clrf	fputc@c+1,c
 11916  00336C  C010  F007         	movff	fputs@fp,fputc@fp
 11917  003370  C011  F008         	movff	fputs@fp+1,fputc@fp+1
 11918  003374  ECD2  F017         	call	_fputc	;wreg free
 11919  003378  4A13               	infsnz	fputs@i,f,c
 11920  00337A  2A14               	incf	fputs@i+1,f,c
 11921  00337C                     l4464:
 11922  00337C  5013               	movf	fputs@i,w,c
 11923  00337E  240E               	addwf	fputs@s,w,c
 11924  003380  6ED9               	movwf	fsr2l,c
 11925  003382  5014               	movf	fputs@i+1,w,c
 11926  003384  200F               	addwfc	fputs@s+1,w,c
 11927  003386  6EDA               	movwf	fsr2h,c
 11928  003388  50DF               	movf	indf2,w,c
 11929  00338A  6E12               	movwf	fputs@c,c
 11930  00338C  5012               	movf	fputs@c,w,c
 11931  00338E  B4D8               	btfsc	status,2,c
 11932  003390  0012               	return	
 11933  003392  D7E9               	goto	l4460
 11934  003394                     __end_of_fputs:
 11935                           	opt callstack 0
 11936                           
 11937 ;; *************** function _fputc *****************
 11938 ;; Defined at:
 11939 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
 11940 ;; Parameters:    Size  Location     Type
 11941 ;;  c               2    4[COMRAM] int 
 11942 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
 11943 ;;		 -> NULL(0), 
 11944 ;; Auto vars:     Size  Location     Type
 11945 ;;		None
 11946 ;; Return value:  Size  Location     Type
 11947 ;;                  2    4[COMRAM] int 
 11948 ;; Registers used:
 11949 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11950 ;; Tracked objects:
 11951 ;;		On entry : 0/0
 11952 ;;		On exit  : 0/0
 11953 ;;		Unchanged: 0/0
 11954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11955 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11957 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11958 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11959 ;;Total ram usage:        9 bytes
 11960 ;; Hardware stack levels used:    1
 11961 ;; Hardware stack levels required when called:    5
 11962 ;; This function calls:
 11963 ;;		_putch
 11964 ;; This function is called by:
 11965 ;;		_pad
 11966 ;;		_stoa
 11967 ;;		_vfpfcnvrt
 11968 ;;		_fputs
 11969 ;; This function uses a non-reentrant model
 11970 ;;
 11971                           
 11972                           	psect	text50
 11973  002FA4                     __ptext50:
 11974                           	opt callstack 0
 11975  002FA4                     _fputc:
 11976                           	opt callstack 18
 11977                           
 11978                           ;incstack = 0
 11979  002FA4  5007               	movf	fputc@fp,w,c
 11980  002FA6  1008               	iorwf	fputc@fp+1,w,c
 11981  002FA8  B4D8               	btfsc	status,2,c
 11982  002FAA  D004               	goto	u3850
 11983  002FAC  5007               	movf	fputc@fp,w,c
 11984  002FAE  1008               	iorwf	fputc@fp+1,w,c
 11985  002FB0  A4D8               	btfss	status,2,c
 11986  002FB2  D004               	goto	l4450
 11987  002FB4                     u3850:
 11988  002FB4  5005               	movf	fputc@c,w,c
 11989  002FB6  ECF7  F01A         	call	_putch
 11990  002FBA  0012               	return	
 11991  002FBC                     l4450:
 11992  002FBC  EE20 F004          	lfsr	2,4
 11993  002FC0  5007               	movf	fputc@fp,w,c
 11994  002FC2  26D9               	addwf	fsr2l,f,c
 11995  002FC4  5008               	movf	fputc@fp+1,w,c
 11996  002FC6  22DA               	addwfc	fsr2h,f,c
 11997  002FC8  50DE               	movf	postinc2,w,c
 11998  002FCA  10DE               	iorwf	postinc2,w,c
 11999  002FCC  B4D8               	btfsc	status,2,c
 12000  002FCE  D016               	goto	u3870
 12001  002FD0  EE20 F004          	lfsr	2,4
 12002  002FD4  5007               	movf	fputc@fp,w,c
 12003  002FD6  26D9               	addwf	fsr2l,f,c
 12004  002FD8  5008               	movf	fputc@fp+1,w,c
 12005  002FDA  22DA               	addwfc	fsr2h,f,c
 12006  002FDC  EE10 F002          	lfsr	1,2
 12007  002FE0  5007               	movf	fputc@fp,w,c
 12008  002FE2  26E1               	addwf	fsr1l,f,c
 12009  002FE4  5008               	movf	fputc@fp+1,w,c
 12010  002FE6  22E2               	addwfc	fsr1h,f,c
 12011  002FE8  50DE               	movf	postinc2,w,c
 12012  002FEA  5CE6               	subwf	postinc1,w,c
 12013  002FEC  50E6               	movf	postinc1,w,c
 12014  002FEE  0A80               	xorlw	128
 12015  002FF0  6E0D               	movwf	(??_fputc+4)& (0+255),c
 12016  002FF2  50DE               	movf	postinc2,w,c
 12017  002FF4  0A80               	xorlw	128
 12018  002FF6  580D               	subwfb	(??_fputc+4)& (0+255),w,c
 12019  002FF8  B0D8               	btfsc	status,0,c
 12020  002FFA  0012               	return	
 12021  002FFC                     u3870:
 12022  002FFC  EE20 F002          	lfsr	2,2
 12023  003000  5007               	movf	fputc@fp,w,c
 12024  003002  26D9               	addwf	fsr2l,f,c
 12025  003004  5008               	movf	fputc@fp+1,w,c
 12026  003006  22DA               	addwfc	fsr2h,f,c
 12027  003008  2ADE               	incf	postinc2,f,c
 12028  00300A  0E00               	movlw	0
 12029  00300C  22DD               	addwfc	postdec2,f,c
 12030  00300E  0012               	return		;funcret
 12031  003010                     __end_of_fputc:
 12032                           	opt callstack 0
 12033                           
 12034 ;; *************** function _putch *****************
 12035 ;; Defined at:
 12036 ;;		line 102 in file "lcd.c"
 12037 ;; Parameters:    Size  Location     Type
 12038 ;;  data            1    wreg     unsigned char 
 12039 ;; Auto vars:     Size  Location     Type
 12040 ;;  data            1    3[COMRAM] unsigned char 
 12041 ;; Return value:  Size  Location     Type
 12042 ;;                  1    wreg      void 
 12043 ;; Registers used:
 12044 ;;		wreg, status,2, status,0, cstack
 12045 ;; Tracked objects:
 12046 ;;		On entry : 0/0
 12047 ;;		On exit  : 0/0
 12048 ;;		Unchanged: 0/0
 12049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12051 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12053 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12054 ;;Total ram usage:        1 bytes
 12055 ;; Hardware stack levels used:    1
 12056 ;; Hardware stack levels required when called:    4
 12057 ;; This function calls:
 12058 ;;		_send_byte
 12059 ;; This function is called by:
 12060 ;;		_fputc
 12061 ;; This function uses a non-reentrant model
 12062 ;;
 12063                           
 12064                           	psect	text51
 12065  0035EE                     __ptext51:
 12066                           	opt callstack 0
 12067  0035EE                     _putch:
 12068                           	opt callstack 18
 12069                           
 12070                           ;incstack = 0
 12071                           ;putch@data stored from wreg
 12072  0035EE  6E04               	movwf	putch@data,c
 12073                           
 12074                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
 12075  0035F0  848C               	bsf	3980,2,c	;volatile
 12076                           
 12077                           ;lcd.c: 104:     send_byte((unsigned char)data);
 12078  0035F2  5004               	movf	putch@data,w,c
 12079  0035F4  ECE8  F01A         	call	_send_byte
 12080  0035F8  0012               	return		;funcret
 12081  0035FA                     __end_of_putch:
 12082                           	opt callstack 0
 12083                           
 12084 ;; *************** function _abs *****************
 12085 ;; Defined at:
 12086 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 12087 ;; Parameters:    Size  Location     Type
 12088 ;;  a               2   18[COMRAM] int 
 12089 ;; Auto vars:     Size  Location     Type
 12090 ;;		None
 12091 ;; Return value:  Size  Location     Type
 12092 ;;                  2   18[COMRAM] int 
 12093 ;; Registers used:
 12094 ;;		wreg, status,2, status,0
 12095 ;; Tracked objects:
 12096 ;;		On entry : 0/0
 12097 ;;		On exit  : 0/0
 12098 ;;		Unchanged: 0/0
 12099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12100 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12102 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12103 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12104 ;;Total ram usage:        4 bytes
 12105 ;; Hardware stack levels used:    1
 12106 ;; Hardware stack levels required when called:    1
 12107 ;; This function calls:
 12108 ;;		Nothing
 12109 ;; This function is called by:
 12110 ;;		_dtoa
 12111 ;; This function uses a non-reentrant model
 12112 ;;
 12113                           
 12114                           	psect	text52
 12115  0033C8                     __ptext52:
 12116                           	opt callstack 0
 12117  0033C8                     _abs:
 12118                           	opt callstack 24
 12119                           
 12120                           ;incstack = 0
 12121  0033C8  BE14               	btfsc	abs@a+1,7,c
 12122  0033CA  D005               	goto	u3970
 12123  0033CC  5014               	movf	abs@a+1,w,c
 12124  0033CE  E110               	bnz	l1650
 12125  0033D0  0413               	decf	abs@a,w,c
 12126  0033D2  B0D8               	btfsc	status,0,c
 12127  0033D4  D00D               	goto	l1650
 12128  0033D6                     u3970:
 12129  0033D6  C013  F015         	movff	abs@a,??_abs
 12130  0033DA  C014  F016         	movff	abs@a+1,??_abs+1
 12131  0033DE  1E15               	comf	??_abs,f,c
 12132  0033E0  1E16               	comf	??_abs+1,f,c
 12133  0033E2  4A15               	infsnz	??_abs,f,c
 12134  0033E4  2A16               	incf	??_abs+1,f,c
 12135  0033E6  C015  F013         	movff	??_abs,?_abs
 12136  0033EA  C016  F014         	movff	??_abs+1,?_abs+1
 12137  0033EE  0012               	return	
 12138  0033F0                     l1650:
 12139  0033F0  C013  F013         	movff	abs@a,?_abs
 12140  0033F4  C014  F014         	movff	abs@a+1,?_abs+1
 12141  0033F8  0012               	return		;funcret
 12142  0033FA                     __end_of_abs:
 12143                           	opt callstack 0
 12144                           
 12145 ;; *************** function ___aomod *****************
 12146 ;; Defined at:
 12147 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
 12148 ;; Parameters:    Size  Location     Type
 12149 ;;  dividend        8    0[COMRAM] long long 
 12150 ;;  divisor         8    8[COMRAM] long long 
 12151 ;; Auto vars:     Size  Location     Type
 12152 ;;  sign            1   17[COMRAM] unsigned char 
 12153 ;;  counter         1   16[COMRAM] unsigned char 
 12154 ;; Return value:  Size  Location     Type
 12155 ;;                  8    0[COMRAM] long long 
 12156 ;; Registers used:
 12157 ;;		wreg, status,2, status,0
 12158 ;; Tracked objects:
 12159 ;;		On entry : 0/0
 12160 ;;		On exit  : 0/0
 12161 ;;		Unchanged: 0/0
 12162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12163 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12164 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12166 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12167 ;;Total ram usage:       18 bytes
 12168 ;; Hardware stack levels used:    1
 12169 ;; Hardware stack levels required when called:    1
 12170 ;; This function calls:
 12171 ;;		Nothing
 12172 ;; This function is called by:
 12173 ;;		_dtoa
 12174 ;; This function uses a non-reentrant model
 12175 ;;
 12176                           
 12177                           	psect	text53
 12178  0023CC                     __ptext53:
 12179                           	opt callstack 0
 12180  0023CC                     ___aomod:
 12181                           	opt callstack 24
 12182                           
 12183                           ;incstack = 0
 12184  0023CC  0E00               	movlw	0
 12185  0023CE  6E12               	movwf	___aomod@sign,c
 12186  0023D0  AE08               	btfss	___aomod@dividend+7,7,c
 12187  0023D2  D012               	goto	l4586
 12188  0023D4  1E08               	comf	___aomod@dividend+7,f,c
 12189  0023D6  1E07               	comf	___aomod@dividend+6,f,c
 12190  0023D8  1E06               	comf	___aomod@dividend+5,f,c
 12191  0023DA  1E05               	comf	___aomod@dividend+4,f,c
 12192  0023DC  1E04               	comf	___aomod@dividend+3,f,c
 12193  0023DE  1E03               	comf	___aomod@dividend+2,f,c
 12194  0023E0  1E02               	comf	___aomod@dividend+1,f,c
 12195  0023E2  6C01               	negf	___aomod@dividend,c
 12196  0023E4  0E00               	movlw	0
 12197  0023E6  2202               	addwfc	___aomod@dividend+1,f,c
 12198  0023E8  2203               	addwfc	___aomod@dividend+2,f,c
 12199  0023EA  2204               	addwfc	___aomod@dividend+3,f,c
 12200  0023EC  2205               	addwfc	___aomod@dividend+4,f,c
 12201  0023EE  2206               	addwfc	___aomod@dividend+5,f,c
 12202  0023F0  2207               	addwfc	___aomod@dividend+6,f,c
 12203  0023F2  2208               	addwfc	___aomod@dividend+7,f,c
 12204  0023F4  0E01               	movlw	1
 12205  0023F6  6E12               	movwf	___aomod@sign,c
 12206  0023F8                     l4586:
 12207  0023F8  AE10               	btfss	___aomod@divisor+7,7,c
 12208  0023FA  D010               	goto	l4590
 12209  0023FC  1E10               	comf	___aomod@divisor+7,f,c
 12210  0023FE  1E0F               	comf	___aomod@divisor+6,f,c
 12211  002400  1E0E               	comf	___aomod@divisor+5,f,c
 12212  002402  1E0D               	comf	___aomod@divisor+4,f,c
 12213  002404  1E0C               	comf	___aomod@divisor+3,f,c
 12214  002406  1E0B               	comf	___aomod@divisor+2,f,c
 12215  002408  1E0A               	comf	___aomod@divisor+1,f,c
 12216  00240A  6C09               	negf	___aomod@divisor,c
 12217  00240C  0E00               	movlw	0
 12218  00240E  220A               	addwfc	___aomod@divisor+1,f,c
 12219  002410  220B               	addwfc	___aomod@divisor+2,f,c
 12220  002412  220C               	addwfc	___aomod@divisor+3,f,c
 12221  002414  220D               	addwfc	___aomod@divisor+4,f,c
 12222  002416  220E               	addwfc	___aomod@divisor+5,f,c
 12223  002418  220F               	addwfc	___aomod@divisor+6,f,c
 12224  00241A  2210               	addwfc	___aomod@divisor+7,f,c
 12225  00241C                     l4590:
 12226  00241C  5009               	movf	___aomod@divisor,w,c
 12227  00241E  100A               	iorwf	___aomod@divisor+1,w,c
 12228  002420  100B               	iorwf	___aomod@divisor+2,w,c
 12229  002422  100C               	iorwf	___aomod@divisor+3,w,c
 12230  002424  100D               	iorwf	___aomod@divisor+4,w,c
 12231  002426  100E               	iorwf	___aomod@divisor+5,w,c
 12232  002428  100F               	iorwf	___aomod@divisor+6,w,c
 12233  00242A  1010               	iorwf	___aomod@divisor+7,w,c
 12234  00242C  B4D8               	btfsc	status,2,c
 12235  00242E  D03C               	goto	l4606
 12236  002430  0E01               	movlw	1
 12237  002432  6E11               	movwf	___aomod@counter,c
 12238  002434  D00A               	goto	l4596
 12239  002436                     l4594:
 12240  002436  90D8               	bcf	status,0,c
 12241  002438  3609               	rlcf	___aomod@divisor,f,c
 12242  00243A  360A               	rlcf	___aomod@divisor+1,f,c
 12243  00243C  360B               	rlcf	___aomod@divisor+2,f,c
 12244  00243E  360C               	rlcf	___aomod@divisor+3,f,c
 12245  002440  360D               	rlcf	___aomod@divisor+4,f,c
 12246  002442  360E               	rlcf	___aomod@divisor+5,f,c
 12247  002444  360F               	rlcf	___aomod@divisor+6,f,c
 12248  002446  3610               	rlcf	___aomod@divisor+7,f,c
 12249  002448  2A11               	incf	___aomod@counter,f,c
 12250  00244A                     l4596:
 12251  00244A  AE10               	btfss	___aomod@divisor+7,7,c
 12252  00244C  D7F4               	goto	l4594
 12253  00244E                     u4170:
 12254  00244E  5009               	movf	___aomod@divisor,w,c
 12255  002450  5C01               	subwf	___aomod@dividend,w,c
 12256  002452  500A               	movf	___aomod@divisor+1,w,c
 12257  002454  5802               	subwfb	___aomod@dividend+1,w,c
 12258  002456  500B               	movf	___aomod@divisor+2,w,c
 12259  002458  5803               	subwfb	___aomod@dividend+2,w,c
 12260  00245A  500C               	movf	___aomod@divisor+3,w,c
 12261  00245C  5804               	subwfb	___aomod@dividend+3,w,c
 12262  00245E  500D               	movf	___aomod@divisor+4,w,c
 12263  002460  5805               	subwfb	___aomod@dividend+4,w,c
 12264  002462  500E               	movf	___aomod@divisor+5,w,c
 12265  002464  5806               	subwfb	___aomod@dividend+5,w,c
 12266  002466  500F               	movf	___aomod@divisor+6,w,c
 12267  002468  5807               	subwfb	___aomod@dividend+6,w,c
 12268  00246A  5010               	movf	___aomod@divisor+7,w,c
 12269  00246C  5808               	subwfb	___aomod@dividend+7,w,c
 12270  00246E  A0D8               	btfss	status,0,c
 12271  002470  D010               	goto	l4602
 12272  002472  5009               	movf	___aomod@divisor,w,c
 12273  002474  5E01               	subwf	___aomod@dividend,f,c
 12274  002476  500A               	movf	___aomod@divisor+1,w,c
 12275  002478  5A02               	subwfb	___aomod@dividend+1,f,c
 12276  00247A  500B               	movf	___aomod@divisor+2,w,c
 12277  00247C  5A03               	subwfb	___aomod@dividend+2,f,c
 12278  00247E  500C               	movf	___aomod@divisor+3,w,c
 12279  002480  5A04               	subwfb	___aomod@dividend+3,f,c
 12280  002482  500D               	movf	___aomod@divisor+4,w,c
 12281  002484  5A05               	subwfb	___aomod@dividend+4,f,c
 12282  002486  500E               	movf	___aomod@divisor+5,w,c
 12283  002488  5A06               	subwfb	___aomod@dividend+5,f,c
 12284  00248A  500F               	movf	___aomod@divisor+6,w,c
 12285  00248C  5A07               	subwfb	___aomod@dividend+6,f,c
 12286  00248E  5010               	movf	___aomod@divisor+7,w,c
 12287  002490  5A08               	subwfb	___aomod@dividend+7,f,c
 12288  002492                     l4602:
 12289  002492  90D8               	bcf	status,0,c
 12290  002494  3210               	rrcf	___aomod@divisor+7,f,c
 12291  002496  320F               	rrcf	___aomod@divisor+6,f,c
 12292  002498  320E               	rrcf	___aomod@divisor+5,f,c
 12293  00249A  320D               	rrcf	___aomod@divisor+4,f,c
 12294  00249C  320C               	rrcf	___aomod@divisor+3,f,c
 12295  00249E  320B               	rrcf	___aomod@divisor+2,f,c
 12296  0024A0  320A               	rrcf	___aomod@divisor+1,f,c
 12297  0024A2  3209               	rrcf	___aomod@divisor,f,c
 12298  0024A4  2E11               	decfsz	___aomod@counter,f,c
 12299  0024A6  D7D3               	goto	u4170
 12300  0024A8                     l4606:
 12301  0024A8  5012               	movf	___aomod@sign,w,c
 12302  0024AA  B4D8               	btfsc	status,2,c
 12303  0024AC  D010               	goto	l4610
 12304  0024AE  1E08               	comf	___aomod@dividend+7,f,c
 12305  0024B0  1E07               	comf	___aomod@dividend+6,f,c
 12306  0024B2  1E06               	comf	___aomod@dividend+5,f,c
 12307  0024B4  1E05               	comf	___aomod@dividend+4,f,c
 12308  0024B6  1E04               	comf	___aomod@dividend+3,f,c
 12309  0024B8  1E03               	comf	___aomod@dividend+2,f,c
 12310  0024BA  1E02               	comf	___aomod@dividend+1,f,c
 12311  0024BC  6C01               	negf	___aomod@dividend,c
 12312  0024BE  0E00               	movlw	0
 12313  0024C0  2202               	addwfc	___aomod@dividend+1,f,c
 12314  0024C2  2203               	addwfc	___aomod@dividend+2,f,c
 12315  0024C4  2204               	addwfc	___aomod@dividend+3,f,c
 12316  0024C6  2205               	addwfc	___aomod@dividend+4,f,c
 12317  0024C8  2206               	addwfc	___aomod@dividend+5,f,c
 12318  0024CA  2207               	addwfc	___aomod@dividend+6,f,c
 12319  0024CC  2208               	addwfc	___aomod@dividend+7,f,c
 12320  0024CE                     l4610:
 12321  0024CE  C001  F001         	movff	___aomod@dividend,?___aomod
 12322  0024D2  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
 12323  0024D6  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
 12324  0024DA  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
 12325  0024DE  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
 12326  0024E2  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
 12327  0024E6  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
 12328  0024EA  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
 12329  0024EE  0012               	return		;funcret
 12330  0024F0                     __end_of___aomod:
 12331                           	opt callstack 0
 12332                           
 12333 ;; *************** function ___aodiv *****************
 12334 ;; Defined at:
 12335 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
 12336 ;; Parameters:    Size  Location     Type
 12337 ;;  dividend        8    0[COMRAM] long long 
 12338 ;;  divisor         8    8[COMRAM] long long 
 12339 ;; Auto vars:     Size  Location     Type
 12340 ;;  quotient        8   18[COMRAM] long long 
 12341 ;;  sign            1   17[COMRAM] unsigned char 
 12342 ;;  counter         1   16[COMRAM] unsigned char 
 12343 ;; Return value:  Size  Location     Type
 12344 ;;                  8    0[COMRAM] long long 
 12345 ;; Registers used:
 12346 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12347 ;; Tracked objects:
 12348 ;;		On entry : 0/0
 12349 ;;		On exit  : 0/0
 12350 ;;		Unchanged: 0/0
 12351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12352 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12353 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12355 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12356 ;;Total ram usage:       26 bytes
 12357 ;; Hardware stack levels used:    1
 12358 ;; Hardware stack levels required when called:    1
 12359 ;; This function calls:
 12360 ;;		Nothing
 12361 ;; This function is called by:
 12362 ;;		_dtoa
 12363 ;; This function uses a non-reentrant model
 12364 ;;
 12365                           
 12366                           	psect	text54
 12367  001D82                     __ptext54:
 12368                           	opt callstack 0
 12369  001D82                     ___aodiv:
 12370                           	opt callstack 24
 12371                           
 12372                           ;incstack = 0
 12373  001D82  0E00               	movlw	0
 12374  001D84  6E12               	movwf	___aodiv@sign,c
 12375  001D86  AE10               	btfss	___aodiv@divisor+7,7,c
 12376  001D88  D012               	goto	l4542
 12377  001D8A  1E10               	comf	___aodiv@divisor+7,f,c
 12378  001D8C  1E0F               	comf	___aodiv@divisor+6,f,c
 12379  001D8E  1E0E               	comf	___aodiv@divisor+5,f,c
 12380  001D90  1E0D               	comf	___aodiv@divisor+4,f,c
 12381  001D92  1E0C               	comf	___aodiv@divisor+3,f,c
 12382  001D94  1E0B               	comf	___aodiv@divisor+2,f,c
 12383  001D96  1E0A               	comf	___aodiv@divisor+1,f,c
 12384  001D98  6C09               	negf	___aodiv@divisor,c
 12385  001D9A  0E00               	movlw	0
 12386  001D9C  220A               	addwfc	___aodiv@divisor+1,f,c
 12387  001D9E  220B               	addwfc	___aodiv@divisor+2,f,c
 12388  001DA0  220C               	addwfc	___aodiv@divisor+3,f,c
 12389  001DA2  220D               	addwfc	___aodiv@divisor+4,f,c
 12390  001DA4  220E               	addwfc	___aodiv@divisor+5,f,c
 12391  001DA6  220F               	addwfc	___aodiv@divisor+6,f,c
 12392  001DA8  2210               	addwfc	___aodiv@divisor+7,f,c
 12393  001DAA  0E01               	movlw	1
 12394  001DAC  6E12               	movwf	___aodiv@sign,c
 12395  001DAE                     l4542:
 12396  001DAE  AE08               	btfss	___aodiv@dividend+7,7,c
 12397  001DB0  D012               	goto	l4548
 12398  001DB2  1E08               	comf	___aodiv@dividend+7,f,c
 12399  001DB4  1E07               	comf	___aodiv@dividend+6,f,c
 12400  001DB6  1E06               	comf	___aodiv@dividend+5,f,c
 12401  001DB8  1E05               	comf	___aodiv@dividend+4,f,c
 12402  001DBA  1E04               	comf	___aodiv@dividend+3,f,c
 12403  001DBC  1E03               	comf	___aodiv@dividend+2,f,c
 12404  001DBE  1E02               	comf	___aodiv@dividend+1,f,c
 12405  001DC0  6C01               	negf	___aodiv@dividend,c
 12406  001DC2  0E00               	movlw	0
 12407  001DC4  2202               	addwfc	___aodiv@dividend+1,f,c
 12408  001DC6  2203               	addwfc	___aodiv@dividend+2,f,c
 12409  001DC8  2204               	addwfc	___aodiv@dividend+3,f,c
 12410  001DCA  2205               	addwfc	___aodiv@dividend+4,f,c
 12411  001DCC  2206               	addwfc	___aodiv@dividend+5,f,c
 12412  001DCE  2207               	addwfc	___aodiv@dividend+6,f,c
 12413  001DD0  2208               	addwfc	___aodiv@dividend+7,f,c
 12414  001DD2  0E01               	movlw	1
 12415  001DD4  1A12               	xorwf	___aodiv@sign,f,c
 12416  001DD6                     l4548:
 12417  001DD6  EE20  F013         	lfsr	2,___aodiv@quotient
 12418  001DDA  0E07               	movlw	7
 12419  001DDC                     u4091:
 12420  001DDC  6ADE               	clrf	postinc2,c
 12421  001DDE  06E8               	decf	wreg,f,c
 12422  001DE0  E2FD               	bc	u4091
 12423  001DE2  5009               	movf	___aodiv@divisor,w,c
 12424  001DE4  100A               	iorwf	___aodiv@divisor+1,w,c
 12425  001DE6  100B               	iorwf	___aodiv@divisor+2,w,c
 12426  001DE8  100C               	iorwf	___aodiv@divisor+3,w,c
 12427  001DEA  100D               	iorwf	___aodiv@divisor+4,w,c
 12428  001DEC  100E               	iorwf	___aodiv@divisor+5,w,c
 12429  001DEE  100F               	iorwf	___aodiv@divisor+6,w,c
 12430  001DF0  1010               	iorwf	___aodiv@divisor+7,w,c
 12431  001DF2  B4D8               	btfsc	status,2,c
 12432  001DF4  D046               	goto	l4570
 12433  001DF6  0E01               	movlw	1
 12434  001DF8  6E11               	movwf	___aodiv@counter,c
 12435  001DFA  D00A               	goto	l4556
 12436  001DFC                     l4554:
 12437  001DFC  90D8               	bcf	status,0,c
 12438  001DFE  3609               	rlcf	___aodiv@divisor,f,c
 12439  001E00  360A               	rlcf	___aodiv@divisor+1,f,c
 12440  001E02  360B               	rlcf	___aodiv@divisor+2,f,c
 12441  001E04  360C               	rlcf	___aodiv@divisor+3,f,c
 12442  001E06  360D               	rlcf	___aodiv@divisor+4,f,c
 12443  001E08  360E               	rlcf	___aodiv@divisor+5,f,c
 12444  001E0A  360F               	rlcf	___aodiv@divisor+6,f,c
 12445  001E0C  3610               	rlcf	___aodiv@divisor+7,f,c
 12446  001E0E  2A11               	incf	___aodiv@counter,f,c
 12447  001E10                     l4556:
 12448  001E10  AE10               	btfss	___aodiv@divisor+7,7,c
 12449  001E12  D7F4               	goto	l4554
 12450  001E14                     u4110:
 12451  001E14  90D8               	bcf	status,0,c
 12452  001E16  3613               	rlcf	___aodiv@quotient,f,c
 12453  001E18  3614               	rlcf	___aodiv@quotient+1,f,c
 12454  001E1A  3615               	rlcf	___aodiv@quotient+2,f,c
 12455  001E1C  3616               	rlcf	___aodiv@quotient+3,f,c
 12456  001E1E  3617               	rlcf	___aodiv@quotient+4,f,c
 12457  001E20  3618               	rlcf	___aodiv@quotient+5,f,c
 12458  001E22  3619               	rlcf	___aodiv@quotient+6,f,c
 12459  001E24  361A               	rlcf	___aodiv@quotient+7,f,c
 12460  001E26  5009               	movf	___aodiv@divisor,w,c
 12461  001E28  5C01               	subwf	___aodiv@dividend,w,c
 12462  001E2A  500A               	movf	___aodiv@divisor+1,w,c
 12463  001E2C  5802               	subwfb	___aodiv@dividend+1,w,c
 12464  001E2E  500B               	movf	___aodiv@divisor+2,w,c
 12465  001E30  5803               	subwfb	___aodiv@dividend+2,w,c
 12466  001E32  500C               	movf	___aodiv@divisor+3,w,c
 12467  001E34  5804               	subwfb	___aodiv@dividend+3,w,c
 12468  001E36  500D               	movf	___aodiv@divisor+4,w,c
 12469  001E38  5805               	subwfb	___aodiv@dividend+4,w,c
 12470  001E3A  500E               	movf	___aodiv@divisor+5,w,c
 12471  001E3C  5806               	subwfb	___aodiv@dividend+5,w,c
 12472  001E3E  500F               	movf	___aodiv@divisor+6,w,c
 12473  001E40  5807               	subwfb	___aodiv@dividend+6,w,c
 12474  001E42  5010               	movf	___aodiv@divisor+7,w,c
 12475  001E44  5808               	subwfb	___aodiv@dividend+7,w,c
 12476  001E46  A0D8               	btfss	status,0,c
 12477  001E48  D011               	goto	l4566
 12478  001E4A  5009               	movf	___aodiv@divisor,w,c
 12479  001E4C  5E01               	subwf	___aodiv@dividend,f,c
 12480  001E4E  500A               	movf	___aodiv@divisor+1,w,c
 12481  001E50  5A02               	subwfb	___aodiv@dividend+1,f,c
 12482  001E52  500B               	movf	___aodiv@divisor+2,w,c
 12483  001E54  5A03               	subwfb	___aodiv@dividend+2,f,c
 12484  001E56  500C               	movf	___aodiv@divisor+3,w,c
 12485  001E58  5A04               	subwfb	___aodiv@dividend+3,f,c
 12486  001E5A  500D               	movf	___aodiv@divisor+4,w,c
 12487  001E5C  5A05               	subwfb	___aodiv@dividend+4,f,c
 12488  001E5E  500E               	movf	___aodiv@divisor+5,w,c
 12489  001E60  5A06               	subwfb	___aodiv@dividend+5,f,c
 12490  001E62  500F               	movf	___aodiv@divisor+6,w,c
 12491  001E64  5A07               	subwfb	___aodiv@dividend+6,f,c
 12492  001E66  5010               	movf	___aodiv@divisor+7,w,c
 12493  001E68  5A08               	subwfb	___aodiv@dividend+7,f,c
 12494  001E6A  8013               	bsf	___aodiv@quotient,0,c
 12495  001E6C                     l4566:
 12496  001E6C  90D8               	bcf	status,0,c
 12497  001E6E  3210               	rrcf	___aodiv@divisor+7,f,c
 12498  001E70  320F               	rrcf	___aodiv@divisor+6,f,c
 12499  001E72  320E               	rrcf	___aodiv@divisor+5,f,c
 12500  001E74  320D               	rrcf	___aodiv@divisor+4,f,c
 12501  001E76  320C               	rrcf	___aodiv@divisor+3,f,c
 12502  001E78  320B               	rrcf	___aodiv@divisor+2,f,c
 12503  001E7A  320A               	rrcf	___aodiv@divisor+1,f,c
 12504  001E7C  3209               	rrcf	___aodiv@divisor,f,c
 12505  001E7E  2E11               	decfsz	___aodiv@counter,f,c
 12506  001E80  D7C9               	goto	u4110
 12507  001E82                     l4570:
 12508  001E82  5012               	movf	___aodiv@sign,w,c
 12509  001E84  B4D8               	btfsc	status,2,c
 12510  001E86  D010               	goto	l4574
 12511  001E88  1E1A               	comf	___aodiv@quotient+7,f,c
 12512  001E8A  1E19               	comf	___aodiv@quotient+6,f,c
 12513  001E8C  1E18               	comf	___aodiv@quotient+5,f,c
 12514  001E8E  1E17               	comf	___aodiv@quotient+4,f,c
 12515  001E90  1E16               	comf	___aodiv@quotient+3,f,c
 12516  001E92  1E15               	comf	___aodiv@quotient+2,f,c
 12517  001E94  1E14               	comf	___aodiv@quotient+1,f,c
 12518  001E96  6C13               	negf	___aodiv@quotient,c
 12519  001E98  0E00               	movlw	0
 12520  001E9A  2214               	addwfc	___aodiv@quotient+1,f,c
 12521  001E9C  2215               	addwfc	___aodiv@quotient+2,f,c
 12522  001E9E  2216               	addwfc	___aodiv@quotient+3,f,c
 12523  001EA0  2217               	addwfc	___aodiv@quotient+4,f,c
 12524  001EA2  2218               	addwfc	___aodiv@quotient+5,f,c
 12525  001EA4  2219               	addwfc	___aodiv@quotient+6,f,c
 12526  001EA6  221A               	addwfc	___aodiv@quotient+7,f,c
 12527  001EA8                     l4574:
 12528  001EA8  C013  F001         	movff	___aodiv@quotient,?___aodiv
 12529  001EAC  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
 12530  001EB0  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
 12531  001EB4  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
 12532  001EB8  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
 12533  001EBC  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
 12534  001EC0  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
 12535  001EC4  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
 12536  001EC8  0012               	return		;funcret
 12537  001ECA                     __end_of___aodiv:
 12538                           	opt callstack 0
 12539                           
 12540 ;; *************** function _atoi *****************
 12541 ;; Defined at:
 12542 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
 12543 ;; Parameters:    Size  Location     Type
 12544 ;;  s               2    7[COMRAM] PTR const unsigned char 
 12545 ;;		 -> STR_91(15), STR_90(17), STR_87(16), STR_84(16), 
 12546 ;;		 -> STR_83(17), STR_82(17), STR_81(5), STR_78(16), 
 12547 ;;		 -> STR_77(17), STR_76(17), STR_75(19), STR_74(19), 
 12548 ;;		 -> STR_73(23), STR_72(17), STR_71(17), STR_70(17), 
 12549 ;;		 -> STR_69(17), STR_68(17), STR_67(18), STR_66(18), 
 12550 ;;		 -> STR_65(18), STR_64(17), STR_63(18), STR_62(18), 
 12551 ;;		 -> STR_61(17), STR_60(17), STR_59(18), STR_58(18), 
 12552 ;;		 -> STR_57(18), STR_56(17), STR_55(17), STR_54(17), 
 12553 ;;		 -> STR_53(17), STR_52(17), STR_51(18), STR_50(18), 
 12554 ;;		 -> STR_49(18), STR_48(17), STR_47(17), STR_46(17), 
 12555 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 12556 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 12557 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 12558 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 12559 ;;		 -> STR_29(17), STR_28(17), STR_27(17), STR_26(17), 
 12560 ;;		 -> STR_25(17), STR_24(17), STR_23(17), STR_22(17), 
 12561 ;;		 -> STR_21(17), STR_20(17), STR_19(17), STR_18(17), 
 12562 ;;		 -> STR_17(17), STR_16(17), STR_15(19), STR_14(19), 
 12563 ;;		 -> STR_13(23), STR_12(17), STR_11(18), STR_10(18), 
 12564 ;;		 -> STR_9(17), STR_8(17), STR_7(17), STR_6(17), 
 12565 ;;		 -> STR_5(17), STR_4(17), STR_3(23), STR_2(23), 
 12566 ;;		 -> STR_1(17), 
 12567 ;; Auto vars:     Size  Location     Type
 12568 ;;  n               2   20[COMRAM] int 
 12569 ;;  neg             2   13[COMRAM] int 
 12570 ;; Return value:  Size  Location     Type
 12571 ;;                  2    7[COMRAM] int 
 12572 ;; Registers used:
 12573 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12574 ;; Tracked objects:
 12575 ;;		On entry : 0/0
 12576 ;;		On exit  : 0/0
 12577 ;;		Unchanged: 0/0
 12578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12579 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12580 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12581 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12582 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12583 ;;Total ram usage:       15 bytes
 12584 ;; Hardware stack levels used:    1
 12585 ;; Hardware stack levels required when called:    2
 12586 ;; This function calls:
 12587 ;;		___wmul
 12588 ;;		_isdigit
 12589 ;;		_isspace
 12590 ;; This function is called by:
 12591 ;;		_vfpfcnvrt
 12592 ;; This function uses a non-reentrant model
 12593 ;;
 12594                           
 12595                           	psect	text55
 12596  002154                     __ptext55:
 12597                           	opt callstack 0
 12598  002154                     _atoi:
 12599                           	opt callstack 24
 12600                           
 12601                           ;incstack = 0
 12602  002154  0E00               	movlw	0
 12603  002156  6E16               	movwf	atoi@n+1,c
 12604  002158  0E00               	movlw	0
 12605  00215A  6E15               	movwf	atoi@n,c
 12606  00215C  0E00               	movlw	0
 12607  00215E  6E0F               	movwf	atoi@neg+1,c
 12608  002160  0E00               	movlw	0
 12609  002162  6E0E               	movwf	atoi@neg,c
 12610  002164  D002               	goto	l4874
 12611  002166                     l4872:
 12612  002166  4A08               	infsnz	atoi@s,f,c
 12613  002168  2A09               	incf	atoi@s+1,f,c
 12614  00216A                     l4874:
 12615  00216A  0E01               	movlw	1
 12616  00216C  6E14               	movwf	_atoi$1983,c
 12617  00216E  C008  FFF6         	movff	atoi@s,tblptrl
 12618  002172  C009  FFF7         	movff	atoi@s+1,tblptrh
 12619  002176                     	if	0	;tblptru may be non-zero
 12620  002176                     	endif
 12621  002176                     	if	0	;tblptru may be non-zero
 12622  002176                     	endif
 12623  002176  0008               	tblrd		*
 12624  002178  50F5               	movf	tablat,w,c
 12625  00217A  0A20               	xorlw	32
 12626  00217C  B4D8               	btfsc	status,2,c
 12627  00217E  D018               	goto	l4882
 12628  002180  0EF7               	movlw	247
 12629  002182  6E0A               	movwf	??_atoi& (0+255),c
 12630  002184  0EFF               	movlw	255
 12631  002186  6E0B               	movwf	(??_atoi+1)& (0+255),c
 12632  002188  C008  FFF6         	movff	atoi@s,tblptrl
 12633  00218C  C009  FFF7         	movff	atoi@s+1,tblptrh
 12634  002190                     	if	0	;tblptru may be non-zero
 12635  002190                     	endif
 12636  002190                     	if	0	;tblptru may be non-zero
 12637  002190                     	endif
 12638  002190  0008               	tblrd		*
 12639  002192  50F5               	movf	tablat,w,c
 12640  002194  6E0C               	movwf	(??_atoi+2)& (0+255),c
 12641  002196  6A0D               	clrf	(??_atoi+3)& (0+255),c
 12642  002198  500A               	movf	??_atoi,w,c
 12643  00219A  260C               	addwf	??_atoi+2,f,c
 12644  00219C  500B               	movf	??_atoi+1,w,c
 12645  00219E  220D               	addwfc	??_atoi+3,f,c
 12646  0021A0  500D               	movf	??_atoi+3,w,c
 12647  0021A2  E104               	bnz	u4790
 12648  0021A4  0E05               	movlw	5
 12649  0021A6  5C0C               	subwf	??_atoi+2,w,c
 12650  0021A8  A0D8               	btfss	status,0,c
 12651  0021AA  D002               	goto	l4882
 12652  0021AC                     u4790:
 12653  0021AC  0E00               	movlw	0
 12654  0021AE  6E14               	movwf	_atoi$1983,c
 12655  0021B0                     l4882:
 12656  0021B0  C014  F010         	movff	_atoi$1983,_atoi$1982
 12657  0021B4  6A11               	clrf	_atoi$1982+1,c
 12658  0021B6  5010               	movf	_atoi$1982,w,c
 12659  0021B8  1011               	iorwf	_atoi$1982+1,w,c
 12660  0021BA  B4D8               	btfsc	status,2,c
 12661  0021BC  D008               	goto	l4892
 12662  0021BE  D7D3               	goto	l4872
 12663  0021C0                     l4888:
 12664  0021C0  0E00               	movlw	0
 12665  0021C2  6E0F               	movwf	atoi@neg+1,c
 12666  0021C4  0E01               	movlw	1
 12667  0021C6  6E0E               	movwf	atoi@neg,c
 12668  0021C8                     l4890:
 12669  0021C8  4A08               	infsnz	atoi@s,f,c
 12670  0021CA  2A09               	incf	atoi@s+1,f,c
 12671  0021CC  D02E               	goto	l4898
 12672  0021CE                     l4892:
 12673  0021CE  C008  FFF6         	movff	atoi@s,tblptrl
 12674  0021D2  C009  FFF7         	movff	atoi@s+1,tblptrh
 12675  0021D6                     	if	0	;tblptru may be non-zero
 12676  0021D6                     	endif
 12677  0021D6                     	if	0	;tblptru may be non-zero
 12678  0021D6                     	endif
 12679  0021D6  0008               	tblrd		*
 12680  0021D8  50F5               	movf	tablat,w,c
 12681  0021DA  6E0A               	movwf	??_atoi& (0+255),c
 12682  0021DC  6A0B               	clrf	(??_atoi+1)& (0+255),c
 12683                           
 12684                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12685                           ; Switch size 1, requested type "simple"
 12686                           ; Number of cases is 1, Range of values is 0 to 0
 12687                           ; switch strategies available:
 12688                           ; Name         Instructions Cycles
 12689                           ; simple_byte            4     3 (average)
 12690                           ;	Chosen strategy is simple_byte
 12691  0021DE  500B               	movf	??_atoi+1,w,c
 12692  0021E0  0A00               	xorlw	0	; case 0
 12693  0021E2  A4D8               	btfss	status,2,c
 12694  0021E4  D022               	goto	l4898
 12695                           
 12696                           ; Switch size 1, requested type "simple"
 12697                           ; Number of cases is 2, Range of values is 43 to 45
 12698                           ; switch strategies available:
 12699                           ; Name         Instructions Cycles
 12700                           ; simple_byte            7     4 (average)
 12701                           ;	Chosen strategy is simple_byte
 12702  0021E6  500A               	movf	??_atoi,w,c
 12703  0021E8  0A2B               	xorlw	43	; case 43
 12704  0021EA  B4D8               	btfsc	status,2,c
 12705  0021EC  D7ED               	goto	l4890
 12706  0021EE  0A06               	xorlw	6	; case 45
 12707  0021F0  B4D8               	btfsc	status,2,c
 12708  0021F2  D7E6               	goto	l4888
 12709  0021F4  D01A               	goto	l4898
 12710  0021F6                     l4894:
 12711  0021F6  C015  F001         	movff	atoi@n,___wmul@multiplier
 12712  0021FA  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
 12713  0021FE  0E00               	movlw	0
 12714  002200  6E04               	movwf	___wmul@multiplicand+1,c
 12715  002202  0E0A               	movlw	10
 12716  002204  6E03               	movwf	___wmul@multiplicand,c
 12717  002206  EC95  F01A         	call	___wmul	;wreg free
 12718  00220A  C008  FFF6         	movff	atoi@s,tblptrl
 12719  00220E  C009  FFF7         	movff	atoi@s+1,tblptrh
 12720  002212                     	if	0	;tblptru may be non-zero
 12721  002212                     	endif
 12722  002212                     	if	0	;tblptru may be non-zero
 12723  002212                     	endif
 12724  002212  0008               	tblrd		*
 12725  002214  50F5               	movf	tablat,w,c
 12726  002216  5E01               	subwf	?___wmul,f,c
 12727  002218  0E00               	movlw	0
 12728  00221A  5A02               	subwfb	?___wmul+1,f,c
 12729  00221C  0E30               	movlw	48
 12730  00221E  2401               	addwf	?___wmul,w,c
 12731  002220  6E15               	movwf	atoi@n,c
 12732  002222  0E00               	movlw	0
 12733  002224  2002               	addwfc	?___wmul+1,w,c
 12734  002226  6E16               	movwf	atoi@n+1,c
 12735  002228  D7CF               	goto	l4890
 12736  00222A                     l4898:
 12737  00222A  0ED0               	movlw	208
 12738  00222C  6E0A               	movwf	??_atoi& (0+255),c
 12739  00222E  0EFF               	movlw	255
 12740  002230  6E0B               	movwf	(??_atoi+1)& (0+255),c
 12741  002232  C008  FFF6         	movff	atoi@s,tblptrl
 12742  002236  C009  FFF7         	movff	atoi@s+1,tblptrh
 12743  00223A                     	if	0	;tblptru may be non-zero
 12744  00223A                     	endif
 12745  00223A                     	if	0	;tblptru may be non-zero
 12746  00223A                     	endif
 12747  00223A  0008               	tblrd		*
 12748  00223C  50F5               	movf	tablat,w,c
 12749  00223E  6E0C               	movwf	(??_atoi+2)& (0+255),c
 12750  002240  6A0D               	clrf	(??_atoi+3)& (0+255),c
 12751  002242  500A               	movf	??_atoi,w,c
 12752  002244  260C               	addwf	??_atoi+2,f,c
 12753  002246  500B               	movf	??_atoi+1,w,c
 12754  002248  220D               	addwfc	??_atoi+3,f,c
 12755  00224A  500D               	movf	??_atoi+3,w,c
 12756  00224C  E106               	bnz	u4810
 12757  00224E  0E0A               	movlw	10
 12758  002250  5C0C               	subwf	??_atoi+2,w,c
 12759  002252  B0D8               	btfsc	status,0,c
 12760  002254  D002               	goto	u4810
 12761  002256  0E01               	movlw	1
 12762  002258  D001               	goto	u4820
 12763  00225A                     u4810:
 12764  00225A  0E00               	movlw	0
 12765  00225C                     u4820:
 12766  00225C  6E12               	movwf	_atoi$1984,c
 12767  00225E  6A13               	clrf	_atoi$1984+1,c
 12768  002260  5012               	movf	_atoi$1984,w,c
 12769  002262  1013               	iorwf	_atoi$1984+1,w,c
 12770  002264  A4D8               	btfss	status,2,c
 12771  002266  D7C7               	goto	l4894
 12772  002268  500E               	movf	atoi@neg,w,c
 12773  00226A  100F               	iorwf	atoi@neg+1,w,c
 12774  00226C  A4D8               	btfss	status,2,c
 12775  00226E  D00D               	goto	l1681
 12776  002270  C015  F00A         	movff	atoi@n,??_atoi
 12777  002274  C016  F00B         	movff	atoi@n+1,??_atoi+1
 12778  002278  1E0A               	comf	??_atoi,f,c
 12779  00227A  1E0B               	comf	??_atoi+1,f,c
 12780  00227C  4A0A               	infsnz	??_atoi,f,c
 12781  00227E  2A0B               	incf	??_atoi+1,f,c
 12782  002280  C00A  F008         	movff	??_atoi,?_atoi
 12783  002284  C00B  F009         	movff	??_atoi+1,?_atoi+1
 12784  002288  0012               	return	
 12785  00228A                     l1681:
 12786  00228A  C015  F008         	movff	atoi@n,?_atoi
 12787  00228E  C016  F009         	movff	atoi@n+1,?_atoi+1
 12788  002292  0012               	return		;funcret
 12789  002294                     __end_of_atoi:
 12790                           	opt callstack 0
 12791                           
 12792 ;; *************** function _isspace *****************
 12793 ;; Defined at:
 12794 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
 12795 ;; Parameters:    Size  Location     Type
 12796 ;;  c               2    0[COMRAM] int 
 12797 ;; Auto vars:     Size  Location     Type
 12798 ;;		None
 12799 ;; Return value:  Size  Location     Type
 12800 ;;                  2    0[COMRAM] int 
 12801 ;; Registers used:
 12802 ;;		wreg, status,2, status,0
 12803 ;; Tracked objects:
 12804 ;;		On entry : 0/0
 12805 ;;		On exit  : 0/0
 12806 ;;		Unchanged: 0/0
 12807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12808 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12809 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12810 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12811 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12812 ;;Total ram usage:        7 bytes
 12813 ;; Hardware stack levels used:    1
 12814 ;; Hardware stack levels required when called:    1
 12815 ;; This function calls:
 12816 ;;		Nothing
 12817 ;; This function is called by:
 12818 ;;		_atoi
 12819 ;; This function uses a non-reentrant model
 12820 ;;
 12821                           
 12822                           	psect	text56
 12823  00331E                     __ptext56:
 12824                           	opt callstack 0
 12825  00331E                     _isspace:
 12826                           	opt callstack 24
 12827                           
 12828                           ;incstack = 0
 12829  00331E  0E01               	movlw	1
 12830  003320  6E07               	movwf	_isspace$2009,c
 12831  003322  0E20               	movlw	32
 12832  003324  1801               	xorwf	isspace@c,w,c
 12833  003326  1002               	iorwf	isspace@c+1,w,c
 12834  003328  B4D8               	btfsc	status,2,c
 12835  00332A  D014               	goto	l4660
 12836  00332C  0EF7               	movlw	247
 12837  00332E  6E03               	movwf	??_isspace& (0+255),c
 12838  003330  0EFF               	movlw	255
 12839  003332  6E04               	movwf	(??_isspace+1)& (0+255),c
 12840  003334  C001  F005         	movff	isspace@c,??_isspace+2
 12841  003338  C002  F006         	movff	isspace@c+1,??_isspace+3
 12842  00333C  5003               	movf	??_isspace,w,c
 12843  00333E  2605               	addwf	??_isspace+2,f,c
 12844  003340  5004               	movf	??_isspace+1,w,c
 12845  003342  2206               	addwfc	??_isspace+3,f,c
 12846  003344  5006               	movf	??_isspace+3,w,c
 12847  003346  E104               	bnz	u4280
 12848  003348  0E05               	movlw	5
 12849  00334A  5C05               	subwf	??_isspace+2,w,c
 12850  00334C  A0D8               	btfss	status,0,c
 12851  00334E  D002               	goto	l4660
 12852  003350                     u4280:
 12853  003350  0E00               	movlw	0
 12854  003352  6E07               	movwf	_isspace$2009,c
 12855  003354                     l4660:
 12856  003354  C007  F001         	movff	_isspace$2009,?_isspace
 12857  003358  6A02               	clrf	?_isspace+1,c
 12858  00335A  0012               	return		;funcret
 12859  00335C                     __end_of_isspace:
 12860                           	opt callstack 0
 12861                           
 12862 ;; *************** function _isdigit *****************
 12863 ;; Defined at:
 12864 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
 12865 ;; Parameters:    Size  Location     Type
 12866 ;;  c               2    0[COMRAM] int 
 12867 ;; Auto vars:     Size  Location     Type
 12868 ;;		None
 12869 ;; Return value:  Size  Location     Type
 12870 ;;                  2    0[COMRAM] int 
 12871 ;; Registers used:
 12872 ;;		wreg, status,2, status,0
 12873 ;; Tracked objects:
 12874 ;;		On entry : 0/0
 12875 ;;		On exit  : 0/0
 12876 ;;		Unchanged: 0/0
 12877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12878 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12880 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12881 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12882 ;;Total ram usage:        6 bytes
 12883 ;; Hardware stack levels used:    1
 12884 ;; Hardware stack levels required when called:    1
 12885 ;; This function calls:
 12886 ;;		Nothing
 12887 ;; This function is called by:
 12888 ;;		_vfpfcnvrt
 12889 ;;		_atoi
 12890 ;; This function uses a non-reentrant model
 12891 ;;
 12892                           
 12893                           	psect	text57
 12894  00345A                     __ptext57:
 12895                           	opt callstack 0
 12896  00345A                     _isdigit:
 12897                           	opt callstack 25
 12898                           
 12899                           ;incstack = 0
 12900  00345A  0ED0               	movlw	208
 12901  00345C  6E03               	movwf	??_isdigit& (0+255),c
 12902  00345E  0EFF               	movlw	255
 12903  003460  6E04               	movwf	(??_isdigit+1)& (0+255),c
 12904  003462  C001  F005         	movff	isdigit@c,??_isdigit+2
 12905  003466  C002  F006         	movff	isdigit@c+1,??_isdigit+3
 12906  00346A  5003               	movf	??_isdigit,w,c
 12907  00346C  2605               	addwf	??_isdigit+2,f,c
 12908  00346E  5004               	movf	??_isdigit+1,w,c
 12909  003470  2206               	addwfc	??_isdigit+3,f,c
 12910  003472  5006               	movf	??_isdigit+3,w,c
 12911  003474  E106               	bnz	u4050
 12912  003476  0E0A               	movlw	10
 12913  003478  5C05               	subwf	??_isdigit+2,w,c
 12914  00347A  B0D8               	btfsc	status,0,c
 12915  00347C  D002               	goto	u4050
 12916  00347E  0E01               	movlw	1
 12917  003480  D001               	goto	u4060
 12918  003482                     u4050:
 12919  003482  0E00               	movlw	0
 12920  003484                     u4060:
 12921  003484  6E01               	movwf	?_isdigit,c
 12922  003486  6A02               	clrf	?_isdigit+1,c
 12923  003488  0012               	return		;funcret
 12924  00348A                     __end_of_isdigit:
 12925                           	opt callstack 0
 12926                           
 12927 ;; *************** function ___wmul *****************
 12928 ;; Defined at:
 12929 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 12930 ;; Parameters:    Size  Location     Type
 12931 ;;  multiplier      2    0[COMRAM] unsigned int 
 12932 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12933 ;; Auto vars:     Size  Location     Type
 12934 ;;  product         2    4[COMRAM] unsigned int 
 12935 ;; Return value:  Size  Location     Type
 12936 ;;                  2    0[COMRAM] unsigned int 
 12937 ;; Registers used:
 12938 ;;		wreg, status,2, status,0, prodl, prodh
 12939 ;; Tracked objects:
 12940 ;;		On entry : 0/0
 12941 ;;		On exit  : 0/0
 12942 ;;		Unchanged: 0/0
 12943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12944 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12945 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12947 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12948 ;;Total ram usage:        6 bytes
 12949 ;; Hardware stack levels used:    1
 12950 ;; Hardware stack levels required when called:    1
 12951 ;; This function calls:
 12952 ;;		Nothing
 12953 ;; This function is called by:
 12954 ;;		_scrDonePoleDet
 12955 ;;		_atoi
 12956 ;; This function uses a non-reentrant model
 12957 ;;
 12958                           
 12959                           	psect	text58
 12960  00352A                     __ptext58:
 12961                           	opt callstack 0
 12962  00352A                     ___wmul:
 12963                           	opt callstack 24
 12964                           
 12965                           ;incstack = 0
 12966  00352A  5001               	movf	___wmul@multiplier,w,c
 12967  00352C  0203               	mulwf	___wmul@multiplicand,c
 12968  00352E  CFF3 F005          	movff	prodl,___wmul@product
 12969  003532  CFF4 F006          	movff	prodh,___wmul@product+1
 12970  003536  5001               	movf	___wmul@multiplier,w,c
 12971  003538  0204               	mulwf	___wmul@multiplicand+1,c
 12972  00353A  50F3               	movf	prodl,w,c
 12973  00353C  2606               	addwf	___wmul@product+1,f,c
 12974  00353E  5002               	movf	___wmul@multiplier+1,w,c
 12975  003540  0203               	mulwf	___wmul@multiplicand,c
 12976  003542  50F3               	movf	prodl,w,c
 12977  003544  2606               	addwf	___wmul@product+1,f,c
 12978  003546  C005  F001         	movff	___wmul@product,?___wmul
 12979  00354A  C006  F002         	movff	___wmul@product+1,?___wmul+1
 12980  00354E  0012               	return		;funcret
 12981  003550                     __end_of___wmul:
 12982                           	opt callstack 0
 12983                           
 12984 ;; *************** function _lcdInst *****************
 12985 ;; Defined at:
 12986 ;;		line 64 in file "lcd.c"
 12987 ;; Parameters:    Size  Location     Type
 12988 ;;  data            1    wreg     unsigned char 
 12989 ;; Auto vars:     Size  Location     Type
 12990 ;;  data            1    3[COMRAM] unsigned char 
 12991 ;; Return value:  Size  Location     Type
 12992 ;;                  1    wreg      void 
 12993 ;; Registers used:
 12994 ;;		wreg, status,2, status,0, cstack
 12995 ;; Tracked objects:
 12996 ;;		On entry : 0/0
 12997 ;;		On exit  : 0/0
 12998 ;;		Unchanged: 0/0
 12999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13003 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13004 ;;Total ram usage:        1 bytes
 13005 ;; Hardware stack levels used:    1
 13006 ;; Hardware stack levels required when called:    4
 13007 ;; This function calls:
 13008 ;;		_send_byte
 13009 ;; This function is called by:
 13010 ;;		_initLCD
 13011 ;;		_showTime
 13012 ;;		_scrDoneMain
 13013 ;;		_scrDoneGen
 13014 ;;		_scrDonePoleDet
 13015 ;;		_dispProcMode
 13016 ;;		_dispShowLogs
 13017 ;;		_dispLogMain
 13018 ;;		_dispLogGen
 13019 ;;		_dispLogPoleDet
 13020 ;;		_dispSMrun
 13021 ;;		_runOp
 13022 ;;		_lcd_shift_cursor
 13023 ;;		_lcd_shift_display
 13024 ;;		_dispOpProg
 13025 ;;		_detectFeedback
 13026 ;;		_tooManyTires
 13027 ;;		_lcdNorm
 13028 ;;		_dispSMsrun
 13029 ;; This function uses a non-reentrant model
 13030 ;;
 13031                           
 13032                           	psect	text59
 13033  0035FA                     __ptext59:
 13034                           	opt callstack 0
 13035  0035FA                     _lcdInst:
 13036                           	opt callstack 25
 13037                           
 13038                           ;incstack = 0
 13039                           ;lcdInst@data stored from wreg
 13040  0035FA  6E04               	movwf	lcdInst@data,c
 13041                           
 13042                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
 13043  0035FC  948C               	bcf	3980,2,c	;volatile
 13044                           
 13045                           ;lcd.c: 66:     send_byte(data);
 13046  0035FE  5004               	movf	lcdInst@data,w,c
 13047  003600  ECE8  F01A         	call	_send_byte
 13048  003604  0012               	return		;funcret
 13049  003606                     __end_of_lcdInst:
 13050                           	opt callstack 0
 13051                           
 13052 ;; *************** function _send_byte *****************
 13053 ;; Defined at:
 13054 ;;		line 55 in file "lcd.c"
 13055 ;; Parameters:    Size  Location     Type
 13056 ;;  data            1    wreg     unsigned char 
 13057 ;; Auto vars:     Size  Location     Type
 13058 ;;  data            1    2[COMRAM] unsigned char 
 13059 ;; Return value:  Size  Location     Type
 13060 ;;                  1    wreg      void 
 13061 ;; Registers used:
 13062 ;;		wreg, status,2, status,0, cstack
 13063 ;; Tracked objects:
 13064 ;;		On entry : 0/0
 13065 ;;		On exit  : 0/0
 13066 ;;		Unchanged: 0/0
 13067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13069 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13071 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13072 ;;Total ram usage:        1 bytes
 13073 ;; Hardware stack levels used:    1
 13074 ;; Hardware stack levels required when called:    3
 13075 ;; This function calls:
 13076 ;;		_send_nibble
 13077 ;; This function is called by:
 13078 ;;		_lcdInst
 13079 ;;		_initLCD
 13080 ;;		_putch
 13081 ;; This function uses a non-reentrant model
 13082 ;;
 13083                           
 13084                           	psect	text60
 13085  0035D0                     __ptext60:
 13086                           	opt callstack 0
 13087  0035D0                     _send_byte:
 13088                           	opt callstack 18
 13089                           
 13090                           ;incstack = 0
 13091                           ;send_byte@data stored from wreg
 13092  0035D0  6E03               	movwf	send_byte@data,c
 13093                           
 13094                           ;lcd.c: 57:     send_nibble(data >> 4);
 13095  0035D2  3803               	swapf	send_byte@data,w,c
 13096  0035D4  0B0F               	andlw	15
 13097  0035D6  ECCA  F01A         	call	_send_nibble
 13098                           
 13099                           ;lcd.c: 60:     send_nibble(data);
 13100  0035DA  5003               	movf	send_byte@data,w,c
 13101  0035DC  ECCA  F01A         	call	_send_nibble
 13102  0035E0  0012               	return		;funcret
 13103  0035E2                     __end_of_send_byte:
 13104                           	opt callstack 0
 13105                           
 13106 ;; *************** function _send_nibble *****************
 13107 ;; Defined at:
 13108 ;;		line 44 in file "lcd.c"
 13109 ;; Parameters:    Size  Location     Type
 13110 ;;  data            1    wreg     unsigned char 
 13111 ;; Auto vars:     Size  Location     Type
 13112 ;;  data            1    1[COMRAM] unsigned char 
 13113 ;; Return value:  Size  Location     Type
 13114 ;;                  1    wreg      void 
 13115 ;; Registers used:
 13116 ;;		wreg, status,2, status,0, cstack
 13117 ;; Tracked objects:
 13118 ;;		On entry : 0/0
 13119 ;;		On exit  : 0/0
 13120 ;;		Unchanged: 0/0
 13121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13123 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13125 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13126 ;;Total ram usage:        1 bytes
 13127 ;; Hardware stack levels used:    1
 13128 ;; Hardware stack levels required when called:    2
 13129 ;; This function calls:
 13130 ;;		_pulse_e
 13131 ;; This function is called by:
 13132 ;;		_send_byte
 13133 ;;		_initLCD
 13134 ;; This function uses a non-reentrant model
 13135 ;;
 13136                           
 13137                           	psect	text61
 13138  003594                     __ptext61:
 13139                           	opt callstack 0
 13140  003594                     _send_nibble:
 13141                           	opt callstack 18
 13142                           
 13143                           ;incstack = 0
 13144                           ;send_nibble@data stored from wreg
 13145  003594  6E02               	movwf	send_nibble@data,c
 13146                           
 13147                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
 13148  003596  508C               	movf	3980,w,c	;volatile
 13149  003598  0B0F               	andlw	15
 13150  00359A  6E8C               	movwf	3980,c	;volatile
 13151                           
 13152                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
 13153  00359C  3802               	swapf	send_nibble@data,w,c
 13154  00359E  0BF0               	andlw	240
 13155  0035A0  108C               	iorwf	3980,w,c	;volatile
 13156  0035A2  6E8C               	movwf	3980,c	;volatile
 13157                           
 13158                           ;lcd.c: 48:     pulse_e();
 13159  0035A4  EC5A  F01A         	call	_pulse_e	;wreg free
 13160  0035A8  0012               	return		;funcret
 13161  0035AA                     __end_of_send_nibble:
 13162                           	opt callstack 0
 13163                           
 13164 ;; *************** function _pulse_e *****************
 13165 ;; Defined at:
 13166 ;;		line 28 in file "lcd.c"
 13167 ;; Parameters:    Size  Location     Type
 13168 ;;		None
 13169 ;; Auto vars:     Size  Location     Type
 13170 ;;  interruptSta    1    0[COMRAM] unsigned char 
 13171 ;; Return value:  Size  Location     Type
 13172 ;;                  1    wreg      void 
 13173 ;; Registers used:
 13174 ;;		wreg
 13175 ;; Tracked objects:
 13176 ;;		On entry : 0/0
 13177 ;;		On exit  : 0/0
 13178 ;;		Unchanged: 0/0
 13179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13181 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13183 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13184 ;;Total ram usage:        1 bytes
 13185 ;; Hardware stack levels used:    1
 13186 ;; Hardware stack levels required when called:    1
 13187 ;; This function calls:
 13188 ;;		Nothing
 13189 ;; This function is called by:
 13190 ;;		_send_nibble
 13191 ;; This function uses a non-reentrant model
 13192 ;;
 13193                           
 13194                           	psect	text62
 13195  0034B4                     __ptext62:
 13196                           	opt callstack 0
 13197  0034B4                     _pulse_e:
 13198                           	opt callstack 18
 13199                           
 13200                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
 13201                           
 13202                           ;incstack = 0
 13203  0034B4  0E00               	movlw	0
 13204  0034B6  BEF2               	btfsc	4082,7,c	;volatile
 13205  0034B8  0E01               	movlw	1
 13206  0034BA  6E01               	movwf	pulse_e@interruptState,c
 13207                           
 13208                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
 13209  0034BC  9EF2               	bcf	4082,7,c	;volatile
 13210                           
 13211                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
 13212  0034BE  868C               	bsf	3980,3,c	;volatile
 13213                           
 13214                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
 13215  0034C0  0E14               	movlw	20
 13216  0034C2                     u7887:
 13217  0034C2  2EE8               	decfsz	wreg,f,c
 13218  0034C4  D7FE               	bra	u7887
 13219  0034C6  D000               	nop2	
 13220                           
 13221                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
 13222  0034C8  968C               	bcf	3980,3,c	;volatile
 13223                           
 13224                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
 13225  0034CA  0E53               	movlw	83
 13226  0034CC                     u7897:
 13227  0034CC  2EE8               	decfsz	wreg,f,c
 13228  0034CE  D7FE               	bra	u7897
 13229  0034D0  F000               	nop	
 13230                           
 13231                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
 13232  0034D2  B001               	btfsc	pulse_e@interruptState,0,c
 13233  0034D4  D002               	bra	u3835
 13234  0034D6  9EF2               	bcf	4082,7,c	;volatile
 13235  0034D8  D001               	bra	u3836
 13236  0034DA                     u3835:
 13237  0034DA  8EF2               	bsf	4082,7,c	;volatile
 13238  0034DC                     u3836:
 13239  0034DC  0012               	return		;funcret
 13240  0034DE                     __end_of_pulse_e:
 13241                           	opt callstack 0
 13242                           
 13243 ;; *************** function _I2C_Master_Init *****************
 13244 ;; Defined at:
 13245 ;;		line 32 in file "I2C.c"
 13246 ;; Parameters:    Size  Location     Type
 13247 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 13248 ;; Auto vars:     Size  Location     Type
 13249 ;;		None
 13250 ;; Return value:  Size  Location     Type
 13251 ;;                  1    wreg      void 
 13252 ;; Registers used:
 13253 ;;		wreg, status,2, status,0, cstack
 13254 ;; Tracked objects:
 13255 ;;		On entry : 0/0
 13256 ;;		On exit  : 0/0
 13257 ;;		Unchanged: 0/0
 13258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13259 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13261 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13262 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13263 ;;Total ram usage:        8 bytes
 13264 ;; Hardware stack levels used:    1
 13265 ;; Hardware stack levels required when called:    2
 13266 ;; This function calls:
 13267 ;;		___lldiv
 13268 ;; This function is called by:
 13269 ;;		_main
 13270 ;; This function uses a non-reentrant model
 13271 ;;
 13272                           
 13273                           	psect	text63
 13274  0030E4                     __ptext63:
 13275                           	opt callstack 0
 13276  0030E4                     _I2C_Master_Init:
 13277                           	opt callstack 28
 13278                           
 13279                           ;I2C.c: 34:     SSPCON1bits.SSPEN = 0;
 13280                           
 13281                           ;incstack = 0
 13282  0030E4  9AC6               	bcf	4038,5,c	;volatile
 13283                           
 13284                           ;I2C.c: 37:     TRISCbits.TRISC3 = 1;
 13285  0030E6  8694               	bsf	3988,3,c	;volatile
 13286                           
 13287                           ;I2C.c: 38:     TRISCbits.TRISC4 = 1;
 13288  0030E8  8894               	bsf	3988,4,c	;volatile
 13289                           
 13290                           ;I2C.c: 43:     SSPADD = (10000000 / (4 * clockFreq)) - 1;
 13291  0030EA  0E80               	movlw	128
 13292  0030EC  6E01               	movwf	___lldiv@dividend,c
 13293  0030EE  0E96               	movlw	150
 13294  0030F0  6E02               	movwf	___lldiv@dividend+1,c
 13295  0030F2  0E98               	movlw	152
 13296  0030F4  6E03               	movwf	___lldiv@dividend+2,c
 13297  0030F6  0E00               	movlw	0
 13298  0030F8  6E04               	movwf	___lldiv@dividend+3,c
 13299  0030FA  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 13300  0030FE  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 13301  003102  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 13302  003106  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 13303  00310A  0E02               	movlw	2
 13304  00310C                     u5725:
 13305  00310C  90D8               	bcf	status,0,c
 13306  00310E  3612               	rlcf	??_I2C_Master_Init,f,c
 13307  003110  3613               	rlcf	??_I2C_Master_Init+1,f,c
 13308  003112  3614               	rlcf	??_I2C_Master_Init+2,f,c
 13309  003114  3615               	rlcf	??_I2C_Master_Init+3,f,c
 13310  003116  2EE8               	decfsz	wreg,f,c
 13311  003118  D7F9               	goto	u5725
 13312  00311A  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
 13313  00311E  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 13314  003122  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 13315  003126  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 13316  00312A  EC22  F017         	call	___lldiv	;wreg free
 13317  00312E  0401               	decf	?___lldiv,w,c
 13318  003130  6EC8               	movwf	4040,c	;volatile
 13319                           
 13320                           ;I2C.c: 46:     SSPSTAT = 0b10000000;
 13321  003132  0E80               	movlw	128
 13322  003134  6EC7               	movwf	4039,c	;volatile
 13323                           
 13324                           ;I2C.c: 49:     SSPCON1 = 0b00101000;
 13325  003136  0E28               	movlw	40
 13326  003138  6EC6               	movwf	4038,c	;volatile
 13327                           
 13328                           ;I2C.c: 52:     SSPCON2 = 0b00000000;
 13329  00313A  0E00               	movlw	0
 13330  00313C  6EC5               	movwf	4037,c	;volatile
 13331  00313E  0012               	return		;funcret
 13332  003140                     __end_of_I2C_Master_Init:
 13333                           	opt callstack 0
 13334                           
 13335 ;; *************** function ___lldiv *****************
 13336 ;; Defined at:
 13337 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 13338 ;; Parameters:    Size  Location     Type
 13339 ;;  dividend        4    0[COMRAM] unsigned long 
 13340 ;;  divisor         4    4[COMRAM] unsigned long 
 13341 ;; Auto vars:     Size  Location     Type
 13342 ;;  quotient        4    8[COMRAM] unsigned long 
 13343 ;;  counter         1   12[COMRAM] unsigned char 
 13344 ;; Return value:  Size  Location     Type
 13345 ;;                  4    0[COMRAM] unsigned long 
 13346 ;; Registers used:
 13347 ;;		wreg, status,2, status,0
 13348 ;; Tracked objects:
 13349 ;;		On entry : 0/0
 13350 ;;		On exit  : 0/0
 13351 ;;		Unchanged: 0/0
 13352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13353 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13354 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13356 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13357 ;;Total ram usage:       13 bytes
 13358 ;; Hardware stack levels used:    1
 13359 ;; Hardware stack levels required when called:    1
 13360 ;; This function calls:
 13361 ;;		Nothing
 13362 ;; This function is called by:
 13363 ;;		_I2C_Master_Init
 13364 ;; This function uses a non-reentrant model
 13365 ;;
 13366                           
 13367                           	psect	text64
 13368  002E44                     __ptext64:
 13369                           	opt callstack 0
 13370  002E44                     ___lldiv:
 13371                           	opt callstack 28
 13372                           
 13373                           ;incstack = 0
 13374  002E44  0E00               	movlw	0
 13375  002E46  6E09               	movwf	___lldiv@quotient,c
 13376  002E48  0E00               	movlw	0
 13377  002E4A  6E0A               	movwf	___lldiv@quotient+1,c
 13378  002E4C  0E00               	movlw	0
 13379  002E4E  6E0B               	movwf	___lldiv@quotient+2,c
 13380  002E50  0E00               	movlw	0
 13381  002E52  6E0C               	movwf	___lldiv@quotient+3,c
 13382  002E54  5005               	movf	___lldiv@divisor,w,c
 13383  002E56  1006               	iorwf	___lldiv@divisor+1,w,c
 13384  002E58  1007               	iorwf	___lldiv@divisor+2,w,c
 13385  002E5A  1008               	iorwf	___lldiv@divisor+3,w,c
 13386  002E5C  B4D8               	btfsc	status,2,c
 13387  002E5E  D02A               	goto	l1002
 13388  002E60  0E01               	movlw	1
 13389  002E62  6E0D               	movwf	___lldiv@counter,c
 13390  002E64  D006               	goto	l5480
 13391  002E66                     l5478:
 13392  002E66  90D8               	bcf	status,0,c
 13393  002E68  3605               	rlcf	___lldiv@divisor,f,c
 13394  002E6A  3606               	rlcf	___lldiv@divisor+1,f,c
 13395  002E6C  3607               	rlcf	___lldiv@divisor+2,f,c
 13396  002E6E  3608               	rlcf	___lldiv@divisor+3,f,c
 13397  002E70  2A0D               	incf	___lldiv@counter,f,c
 13398  002E72                     l5480:
 13399  002E72  AE08               	btfss	___lldiv@divisor+3,7,c
 13400  002E74  D7F8               	goto	l5478
 13401  002E76                     u5580:
 13402  002E76  90D8               	bcf	status,0,c
 13403  002E78  3609               	rlcf	___lldiv@quotient,f,c
 13404  002E7A  360A               	rlcf	___lldiv@quotient+1,f,c
 13405  002E7C  360B               	rlcf	___lldiv@quotient+2,f,c
 13406  002E7E  360C               	rlcf	___lldiv@quotient+3,f,c
 13407  002E80  5005               	movf	___lldiv@divisor,w,c
 13408  002E82  5C01               	subwf	___lldiv@dividend,w,c
 13409  002E84  5006               	movf	___lldiv@divisor+1,w,c
 13410  002E86  5802               	subwfb	___lldiv@dividend+1,w,c
 13411  002E88  5007               	movf	___lldiv@divisor+2,w,c
 13412  002E8A  5803               	subwfb	___lldiv@dividend+2,w,c
 13413  002E8C  5008               	movf	___lldiv@divisor+3,w,c
 13414  002E8E  5804               	subwfb	___lldiv@dividend+3,w,c
 13415  002E90  A0D8               	btfss	status,0,c
 13416  002E92  D009               	goto	l5490
 13417  002E94  5005               	movf	___lldiv@divisor,w,c
 13418  002E96  5E01               	subwf	___lldiv@dividend,f,c
 13419  002E98  5006               	movf	___lldiv@divisor+1,w,c
 13420  002E9A  5A02               	subwfb	___lldiv@dividend+1,f,c
 13421  002E9C  5007               	movf	___lldiv@divisor+2,w,c
 13422  002E9E  5A03               	subwfb	___lldiv@dividend+2,f,c
 13423  002EA0  5008               	movf	___lldiv@divisor+3,w,c
 13424  002EA2  5A04               	subwfb	___lldiv@dividend+3,f,c
 13425  002EA4  8009               	bsf	___lldiv@quotient,0,c
 13426  002EA6                     l5490:
 13427  002EA6  90D8               	bcf	status,0,c
 13428  002EA8  3208               	rrcf	___lldiv@divisor+3,f,c
 13429  002EAA  3207               	rrcf	___lldiv@divisor+2,f,c
 13430  002EAC  3206               	rrcf	___lldiv@divisor+1,f,c
 13431  002EAE  3205               	rrcf	___lldiv@divisor,f,c
 13432  002EB0  2E0D               	decfsz	___lldiv@counter,f,c
 13433  002EB2  D7E1               	goto	u5580
 13434  002EB4                     l1002:
 13435  002EB4  C009  F001         	movff	___lldiv@quotient,?___lldiv
 13436  002EB8  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 13437  002EBC  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 13438  002EC0  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 13439  002EC4  0012               	return		;funcret
 13440  002EC6                     __end_of___lldiv:
 13441                           	opt callstack 0
 13442                           
 13443 ;; *************** function _interruptHandler *****************
 13444 ;; Defined at:
 13445 ;;		line 130 in file "main.c"
 13446 ;; Parameters:    Size  Location     Type
 13447 ;;		None
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;		None
 13450 ;; Return value:  Size  Location     Type
 13451 ;;                  1    wreg      void 
 13452 ;; Registers used:
 13453 ;;		wreg, status,2
 13454 ;; Tracked objects:
 13455 ;;		On entry : 0/0
 13456 ;;		On exit  : 0/0
 13457 ;;		Unchanged: 0/0
 13458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13463 ;;Total ram usage:        0 bytes
 13464 ;; Hardware stack levels used:    1
 13465 ;; This function calls:
 13466 ;;		Nothing
 13467 ;; This function is called by:
 13468 ;;		Interrupt level 2
 13469 ;; This function uses a non-reentrant model
 13470 ;;
 13471                           
 13472                           	psect	intcode
 13473  000008                     __pintcode:
 13474                           	opt callstack 0
 13475  000008                     _interruptHandler:
 13476                           	opt callstack 17
 13477                           
 13478                           ;incstack = 0
 13479  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13480  00000A  EDBA  F01A         	call	int_func,f	;refresh shadow registers
 13481                           
 13482                           	psect	intcode_body
 13483  003574                     __pintcode_body:
 13484                           	opt callstack 17
 13485  003574                     int_func:
 13486                           	opt callstack 17
 13487  003574  0006               	pop		; remove dummy address from shadow register refresh
 13488                           
 13489                           ;main.c: 131:     if(INT1IF){
 13490  003576  A0F0               	btfss	4080,0,c	;volatile
 13491  003578  D005               	goto	i2l131
 13492                           
 13493                           ;main.c: 132:         int1Pressed = 1;
 13494  00357A  0E01               	movlw	1
 13495  00357C  0100               	movlb	0	; () banked
 13496  00357E  6FE8               	movwf	_int1Pressed& (0+255),b	;volatile
 13497                           
 13498                           ; BSR set to: 0
 13499                           ;main.c: 133:         INT1IF = 0;
 13500  003580  90F0               	bcf	4080,0,c	;volatile
 13501                           
 13502                           ;main.c: 134:     }
 13503  003582  D006               	goto	i2l134
 13504  003584                     i2l131:
 13505  003584  A2F2               	btfss	4082,1,c	;volatile
 13506  003586  D004               	goto	i2l134
 13507                           
 13508                           ;main.c: 136:         int0Pressed = 1;
 13509  003588  0E01               	movlw	1
 13510  00358A  0100               	movlb	0	; () banked
 13511  00358C  6FE7               	movwf	_int0Pressed& (0+255),b	;volatile
 13512                           
 13513                           ; BSR set to: 0
 13514                           ;main.c: 137:         INT0IF = 0;
 13515  00358E  92F2               	bcf	4082,1,c	;volatile
 13516  003590                     i2l134:
 13517  003590  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13518  003592  0011               	retfie		f
 13519  003594                     __end_of_interruptHandler:
 13520                           	opt callstack 0
 13521                           
 13522                           	psect	rparam
 13523  0000                     
 13524                           	psect	temp
 13525  00007F                     btemp:
 13526                           	opt callstack 0
 13527  00007F                     	ds	1
 13528  0000                     int$flags	set	btemp
 13529  0000                     wtemp8	set	btemp+1
 13530  0000                     ttemp5	set	btemp+1
 13531  0000                     ttemp6	set	btemp+4
 13532  0000                     ttemp7	set	btemp+8
 13533                           tosu	equ	0xFFF
 13534                           tosh	equ	0xFFE
 13535                           tosl	equ	0xFFD
 13536                           stkptr	equ	0xFFC
 13537                           pclatu	equ	0xFFB
 13538                           pclath	equ	0xFFA
 13539                           pcl	equ	0xFF9
 13540                           tblptru	equ	0xFF8
 13541                           tblptrh	equ	0xFF7
 13542                           tblptrl	equ	0xFF6
 13543                           tablat	equ	0xFF5
 13544                           prodh	equ	0xFF4
 13545                           prodl	equ	0xFF3
 13546                           indf0	equ	0xFEF
 13547                           postinc0	equ	0xFEE
 13548                           postdec0	equ	0xFED
 13549                           preinc0	equ	0xFEC
 13550                           plusw0	equ	0xFEB
 13551                           fsr0h	equ	0xFEA
 13552                           fsr0l	equ	0xFE9
 13553                           wreg	equ	0xFE8
 13554                           indf1	equ	0xFE7
 13555                           postinc1	equ	0xFE6
 13556                           postdec1	equ	0xFE5
 13557                           preinc1	equ	0xFE4
 13558                           plusw1	equ	0xFE3
 13559                           fsr1h	equ	0xFE2
 13560                           fsr1l	equ	0xFE1
 13561                           bsr	equ	0xFE0
 13562                           indf2	equ	0xFDF
 13563                           postinc2	equ	0xFDE
 13564                           postdec2	equ	0xFDD
 13565                           preinc2	equ	0xFDC
 13566                           plusw2	equ	0xFDB
 13567                           fsr2h	equ	0xFDA
 13568                           fsr2l	equ	0xFD9
 13569                           status	equ	0xFD8


Data Sizes:
    Strings     938
    Constant    6
    Data        8
    BSS         123
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    126     126
    BANK0           128     57     113
    BANK1           256      0      75
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> ?_printf(COMRAM[2]), stoa@nuls(COMRAM[7]), dbuf(BANK0[32]), runOp@endTime(BANK0[3]), 
		 -> STR_89(CODE[5]), STR_88(CODE[5]), STR_86(CODE[5]), STR_85(CODE[5]), 
		 -> STR_80(CODE[5]), STR_79(CODE[5]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> ?_printf(COMRAM[2]), stoa@nuls(COMRAM[7]), dbuf(BANK0[32]), runOp@endTime(BANK0[3]), 
		 -> STR_89(CODE[5]), STR_88(CODE[5]), STR_86(CODE[5]), STR_85(CODE[5]), 
		 -> STR_80(CODE[5]), STR_79(CODE[5]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_91(CODE[15]), STR_90(CODE[17]), STR_87(CODE[16]), STR_84(CODE[16]), 
		 -> STR_83(CODE[17]), STR_82(CODE[17]), STR_81(CODE[5]), STR_78(CODE[16]), 
		 -> STR_77(CODE[17]), STR_76(CODE[17]), STR_75(CODE[19]), STR_74(CODE[19]), 
		 -> STR_73(CODE[23]), STR_72(CODE[17]), STR_71(CODE[17]), STR_70(CODE[17]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[18]), STR_66(CODE[18]), 
		 -> STR_65(CODE[18]), STR_64(CODE[17]), STR_63(CODE[18]), STR_62(CODE[18]), 
		 -> STR_61(CODE[17]), STR_60(CODE[17]), STR_59(CODE[18]), STR_58(CODE[18]), 
		 -> STR_57(CODE[18]), STR_56(CODE[17]), STR_55(CODE[17]), STR_54(CODE[17]), 
		 -> STR_53(CODE[17]), STR_52(CODE[17]), STR_51(CODE[18]), STR_50(CODE[18]), 
		 -> STR_49(CODE[18]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), STR_22(CODE[17]), 
		 -> STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), STR_18(CODE[17]), 
		 -> STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[19]), STR_14(CODE[19]), 
		 -> STR_13(CODE[23]), STR_12(CODE[17]), STR_11(CODE[18]), STR_10(CODE[18]), 
		 -> STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), 
		 -> STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[23]), STR_2(CODE[23]), 
		 -> STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2022_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_91(CODE[15]), STR_90(CODE[17]), STR_87(CODE[16]), STR_84(CODE[16]), 
		 -> STR_83(CODE[17]), STR_82(CODE[17]), STR_81(CODE[5]), STR_78(CODE[16]), 
		 -> STR_77(CODE[17]), STR_76(CODE[17]), STR_75(CODE[19]), STR_74(CODE[19]), 
		 -> STR_73(CODE[23]), STR_72(CODE[17]), STR_71(CODE[17]), STR_70(CODE[17]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[18]), STR_66(CODE[18]), 
		 -> STR_65(CODE[18]), STR_64(CODE[17]), STR_63(CODE[18]), STR_62(CODE[18]), 
		 -> STR_61(CODE[17]), STR_60(CODE[17]), STR_59(CODE[18]), STR_58(CODE[18]), 
		 -> STR_57(CODE[18]), STR_56(CODE[17]), STR_55(CODE[17]), STR_54(CODE[17]), 
		 -> STR_53(CODE[17]), STR_52(CODE[17]), STR_51(CODE[18]), STR_50(CODE[18]), 
		 -> STR_49(CODE[18]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), STR_22(CODE[17]), 
		 -> STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), STR_18(CODE[17]), 
		 -> STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[19]), STR_14(CODE[19]), 
		 -> STR_13(CODE[23]), STR_12(CODE[17]), STR_11(CODE[18]), STR_10(CODE[18]), 
		 -> STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), 
		 -> STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[23]), STR_2(CODE[23]), 
		 -> STR_1(CODE[17]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_91(CODE[15]), STR_90(CODE[17]), STR_87(CODE[16]), STR_84(CODE[16]), 
		 -> STR_83(CODE[17]), STR_82(CODE[17]), STR_81(CODE[5]), STR_78(CODE[16]), 
		 -> STR_77(CODE[17]), STR_76(CODE[17]), STR_75(CODE[19]), STR_74(CODE[19]), 
		 -> STR_73(CODE[23]), STR_72(CODE[17]), STR_71(CODE[17]), STR_70(CODE[17]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[18]), STR_66(CODE[18]), 
		 -> STR_65(CODE[18]), STR_64(CODE[17]), STR_63(CODE[18]), STR_62(CODE[18]), 
		 -> STR_61(CODE[17]), STR_60(CODE[17]), STR_59(CODE[18]), STR_58(CODE[18]), 
		 -> STR_57(CODE[18]), STR_56(CODE[17]), STR_55(CODE[17]), STR_54(CODE[17]), 
		 -> STR_53(CODE[17]), STR_52(CODE[17]), STR_51(CODE[18]), STR_50(CODE[18]), 
		 -> STR_49(CODE[18]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), STR_22(CODE[17]), 
		 -> STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), STR_18(CODE[17]), 
		 -> STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[19]), STR_14(CODE[19]), 
		 -> STR_13(CODE[23]), STR_12(CODE[17]), STR_11(CODE[18]), STR_10(CODE[18]), 
		 -> STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), 
		 -> STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[23]), STR_2(CODE[23]), 
		 -> STR_1(CODE[17]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 23
		 -> STR_91(CODE[15]), STR_90(CODE[17]), STR_87(CODE[16]), STR_84(CODE[16]), 
		 -> STR_83(CODE[17]), STR_82(CODE[17]), STR_81(CODE[5]), STR_78(CODE[16]), 
		 -> STR_77(CODE[17]), STR_76(CODE[17]), STR_75(CODE[19]), STR_74(CODE[19]), 
		 -> STR_73(CODE[23]), STR_72(CODE[17]), STR_71(CODE[17]), STR_70(CODE[17]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[18]), STR_66(CODE[18]), 
		 -> STR_65(CODE[18]), STR_64(CODE[17]), STR_63(CODE[18]), STR_62(CODE[18]), 
		 -> STR_61(CODE[17]), STR_60(CODE[17]), STR_59(CODE[18]), STR_58(CODE[18]), 
		 -> STR_57(CODE[18]), STR_56(CODE[17]), STR_55(CODE[17]), STR_54(CODE[17]), 
		 -> STR_53(CODE[17]), STR_52(CODE[17]), STR_51(CODE[18]), STR_50(CODE[18]), 
		 -> STR_49(CODE[18]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), STR_22(CODE[17]), 
		 -> STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), STR_18(CODE[17]), 
		 -> STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[19]), STR_14(CODE[19]), 
		 -> STR_13(CODE[23]), STR_12(CODE[17]), STR_11(CODE[18]), STR_10(CODE[18]), 
		 -> STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), 
		 -> STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[23]), STR_2(CODE[23]), 
		 -> STR_1(CODE[17]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), runOp@endTime(BANK0[3]), STR_89(CODE[5]), STR_88(CODE[5]), 
		 -> STR_86(CODE[5]), STR_85(CODE[5]), STR_80(CODE[5]), STR_79(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    xtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    stoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), runOp@endTime(BANK0[3]), STR_89(CODE[5]), STR_88(CODE[5]), 
		 -> STR_86(CODE[5]), STR_85(CODE[5]), STR_80(CODE[5]), STR_79(CODE[5]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_printf(COMRAM[2]), stoa@nuls(COMRAM[7]), runOp@endTime(BANK0[3]), STR_89(CODE[5]), 
		 -> STR_88(CODE[5]), STR_86(CODE[5]), STR_85(CODE[5]), STR_80(CODE[5]), 
		 -> STR_79(CODE[5]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    runOp@opTime	PTR unsigned char  size(2) Largest target is 1
		 -> totalTime(BANK0[1]), 

    runOp@time	PTR unsigned char  size(2) Largest target is 3
		 -> main@startTimeInt(BANK0[3]), 

    runOp@infoArr	PTR struct poleInfo size(2) Largest target is 75
		 -> poleInfoArr(BANK1[75]), 

    runOp@pInt0P	PTR volatile _Bool  size(2) Largest target is 1
		 -> int0Pressed(BANK0[1]), 

    runOp@pNumPoles	PTR unsigned char  size(2) Largest target is 1
		 -> poleCount(BANK0[1]), 

    runOp@pTotalSupplied	PTR unsigned char  size(2) Largest target is 1
		 -> tiresSupp(BANK0[1]), 

    storeLog@infoArr	PTR struct poleInfo size(2) Largest target is 75
		 -> poleInfoArr(BANK1[75]), 

    storeLog@pLastLog	PTR unsigned char  size(2) Largest target is 1
		 -> lastStored(BANK0[1]), 

    runSM@int1Pressed	PTR volatile _Bool  size(2) Largest target is 1
		 -> int1Pressed(BANK0[1]), 

    runSM@pSMposition	PTR unsigned int  size(2) Largest target is 2
		 -> main@SMposition(BANK0[2]), 

    dispStateTrans@pLogToShow	PTR unsigned char  size(2) Largest target is 1
		 -> logToShow(BANK0[1]), 

    dispStateTrans@pStepDir2	PTR unsigned char  size(2) Largest target is 1
		 -> main@direction2(BANK0[1]), 

    dispStateTrans@pStepDir1	PTR unsigned char  size(2) Largest target is 1
		 -> main@direction1(BANK0[1]), 

    dispStateTrans@startTime	PTR unsigned char  size(2) Largest target is 3
		 -> main@startTimeInt(BANK0[3]), 

    dispSMrun$976	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_80(CODE[5]), STR_79(CODE[5]), 

    getTime@pTime	PTR unsigned char  size(2) Largest target is 3
		 -> runOp@endTime(BANK0[3]), main@startTimeInt(BANK0[3]), 

    fixTime@Time	PTR unsigned char  size(2) Largest target is 3
		 -> runOp@endTime(BANK0[3]), main@startTimeInt(BANK0[3]), 

    scrDonePoleDet@poleData	PTR struct poleInfo size(2) Largest target is 75
		 -> poleInfoArr(BANK1[75]), 

    showTime@pTime	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK0[7]), 


Critical Paths under _main in COMRAM

    _main->_dispSMrun
    _main->_scrDonePoleDet
    _main->_showTime
    _storeLog->_write_EEPROM
    _showTime->_printf
    _scrDonePoleDet->_printf
    _scrDoneMain->_printf
    _scrDoneGen->_printf
    _runOp->_dispProcMode
    _deployRight->_runSMB
    _deployLeft->_runSMA
    _deployBoth->_runSMs
    _dispProcMode->_printf
    _initLCD->_lcdInst
    _dispStateTrans->_getTime
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _dispShowLogs->_printf
    _dispSMrun->_printf
    _dispLogPoleDet->_printf
    ___awmod->___wmul
    ___awdiv->___awmod
    _dispLogMain->_printf
    _dispLogGen->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _toupper->_islower
    _utoa->_pad
    _stoa->_fputc
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_send_byte
    _abs->___aomod
    _atoi->_isspace
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_runOp

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0  364185
                                             37 BANK0     20    20      0
                    _I2C_Master_Init
                         _dispLogGen
                        _dispLogMain
                     _dispLogPoleDet
                          _dispSMrun
                       _dispShowLogs
                     _dispStateTrans
                            _initLCD
                        _read_EEPROM
                              _runOp
                              _runSM
                         _scrDoneGen
                        _scrDoneMain
                     _scrDonePoleDet
                           _showTime
                           _storeLog
 ---------------------------------------------------------------------------------
 (1) _storeLog                                            14     8      6    1540
                                              2 COMRAM    14     8      6
                       _write_EEPROM
 ---------------------------------------------------------------------------------
 (2) _write_EEPROM                                         2     1      1     652
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _showTime                                             6     4      2   32125
                                            123 COMRAM     3     1      2
                                              0 BANK0      3     3      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _scrDonePoleDet                                      13     9      4   34910
                                            123 COMRAM     3     3      0
                                              0 BANK0     10     6      4
                            ___awdiv
                            ___awmod
                             ___wmul
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _scrDoneMain                                          1     1      0   31282
                                            123 COMRAM     1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _scrDoneGen                                           5     1      4   31576
                                            123 COMRAM     1     1      0
                                              0 BANK0      4     0      4
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _runSM                                                7     3      4     512
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _runOp                                               37    25     12   68814
                                              0 BANK0     37    25     12
                            ___awdiv
                       _dispProcMode
                            _fixTime
                            _getTime
                            _lcdInst
                             _printf
                         _tireDeploy
 ---------------------------------------------------------------------------------
 (2) _tireDeploy                                           2     1      1    1345
                                              7 COMRAM     2     1      1
                         _deployBoth
                         _deployLeft
                        _deployRight
 ---------------------------------------------------------------------------------
 (3) _deployRight                                          0     0      0     294
                             _runSMB
 ---------------------------------------------------------------------------------
 (3) _deployLeft                                           0     0      0     294
                             _runSMA
 ---------------------------------------------------------------------------------
 (3) _deployBoth                                           0     0      0     615
                             _runSMs
 ---------------------------------------------------------------------------------
 (4) _runSMs                                               7     6      1     615
                                              0 COMRAM     7     6      1
 ---------------------------------------------------------------------------------
 (2) _dispProcMode                                         2     2      0   31370
                                            123 COMRAM     2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     245
                                              4 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _dispStateTrans                                      12     2     10    3413
                                              6 COMRAM    12     2     10
                            _fixTime
                            _getTime
                        _read_EEPROM
                             _runSMA
                             _runSMB
 ---------------------------------------------------------------------------------
 (4) _runSMB                                               5     5      0     294
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (4) _runSMA                                               4     4      0     294
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _getTime                                              3     1      2     787
                                              3 COMRAM     3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     478
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _fixTime                                              4     2      2     350
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _dispShowLogs                                         1     1      0   31282
                                            123 COMRAM     1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _dispSMrun                                            6     4      2   31426
                                            123 COMRAM     3     1      2
                                              0 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _dispLogPoleDet                                      10     9      1   33285
                                            123 COMRAM     1     0      1
                                              0 BANK0      9     9      0
                            ___awdiv
                            ___awmod
                            _lcdInst
                             _printf
                        _read_EEPROM
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     546
                                              6 COMRAM     6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     898
                                             12 COMRAM     8     4      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _dispLogMain                                          2     2      0   31348
                                            123 COMRAM     2     2      0
                            _lcdInst
                             _printf
                        _read_EEPROM
 ---------------------------------------------------------------------------------
 (1) _dispLogGen                                           2     2      0   31414
                                            123 COMRAM     2     2      0
                            _lcdInst
                             _printf
                        _read_EEPROM
 ---------------------------------------------------------------------------------
 (1) _read_EEPROM                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              12     4      8   31171
                                            111 COMRAM    12     4      8
                            ___awdiv (ARG)
                            ___awmod (ARG)
                        _read_EEPROM (ARG)
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6   24649
                                            103 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           45    39      6   24265
                                             70 COMRAM    33    27      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
                               _stoa
                               _utoa
                               _xtoa
 ---------------------------------------------------------------------------------
 (5) _xtoa                                                39    28     11    5797
                                             31 COMRAM    39    28     11
                            _isalpha
                            _isupper
                                _pad
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              8     6      2     412
                                              6 COMRAM     8     6      2
                            _islower
 ---------------------------------------------------------------------------------
 (7) _islower                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _isupper                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _utoa                                                32    22     10    5293
                                             31 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (6) ___lomod                                             17     1     16     311
                                              0 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (6) ___lodiv                                             25     9     16     314
                                              0 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (5) _stoa                                                22    18      4    2184
                                             13 COMRAM    22    18      4
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    5892
                                             31 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    4243
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               4     2      2     242
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1736
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (8) _fputc                                                9     5      4    1335
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (9) _putch                                                1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (5) _atoi                                                15    13      2    2234
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (6) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1393
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (10) _send_byte                                           1     1      0      89
                                              2 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (11) _send_nibble                                         1     1      0      45
                                              1 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (12) _pulse_e                                             1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _interruptHandler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _dispLogGen
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
         ___wmul (ARG)
       _read_EEPROM (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _stoa
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _strlen
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
     _read_EEPROM
   _dispLogMain
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
         ___wmul (ARG)
       _read_EEPROM (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _stoa
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _strlen
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
     _read_EEPROM
   _dispLogPoleDet
     ___awdiv
       ___awmod (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
     ___awmod
       ___wmul (ARG)
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
         ___wmul (ARG)
       _read_EEPROM (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _stoa
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _strlen
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
     _read_EEPROM
   _dispSMrun
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
         ___wmul (ARG)
       _read_EEPROM (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _stoa
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _strlen
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
   _dispShowLogs
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
         ___wmul (ARG)
       _read_EEPROM (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _stoa
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _strlen
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
   _dispStateTrans
     _fixTime
     _getTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _read_EEPROM
     _runSMA
     _runSMB
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _read_EEPROM
   _runOp
     ___awdiv
       ___awmod (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
     _dispProcMode
       _lcdInst
         _send_byte
           _send_nibble
             _pulse_e
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
           ___wmul (ARG)
         _read_EEPROM (ARG)
         _vfprintf (ARG)
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
                 _fputs
                   _fputc
                     _putch
                       _send_byte
                         _send_nibble
                           _pulse_e
                 _strlen
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _isdigit
             _stoa
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _strlen
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
                 _fputs
                   _fputc
                     _putch
                       _send_byte
                         _send_nibble
                           _pulse_e
                 _strlen
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
                 _fputs
                   _fputc
                     _putch
                       _send_byte
                         _send_nibble
                           _pulse_e
                 _strlen
               _toupper
                 _islower
     _fixTime
     _getTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
         ___wmul (ARG)
       _read_EEPROM (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _stoa
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _strlen
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
     _tireDeploy
       _deployBoth
         _runSMs
       _deployLeft
         _runSMA
       _deployRight
         _runSMB
   _runSM
   _scrDoneGen
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
         ___wmul (ARG)
       _read_EEPROM (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _stoa
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _strlen
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
   _scrDoneMain
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
         ___wmul (ARG)
       _read_EEPROM (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _stoa
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _strlen
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
   _scrDonePoleDet
     ___awdiv
       ___awmod (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
     ___awmod
       ___wmul (ARG)
     ___wmul
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
         ___wmul (ARG)
       _read_EEPROM (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _stoa
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _strlen
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
   _showTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
         ___wmul (ARG)
       _read_EEPROM (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _stoa
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _strlen
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
   _storeLog
     _write_EEPROM

 _interruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      4B       7       29.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     39      71       5       88.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     7E      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13A      34        0.0%
DATA                 0      0     13A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Apr 09 16:06:45 2019

                __CFG_CPD$ON 000000                 ___awdiv@sign 0012          ___wmul@multiplicand 0003  
                __CFG_BORV$3 000000            dispSMrun@motorPos 007C                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                __CFG_OSC$HS 000000                          l116 0FB6                          l500 2B40  
                        l525 29AA                          l471 27EE                          l552 1CF0  
                        l393 16C0                          l721 0322                          l641 34AC  
                        l714 0232                          l731 02A8                          l723 025C  
                        l740 034A                          l724 0276                          l708 0162  
                        l567 1D72                          l832 2CD0                          l752 044A  
                        l906 145E                          l843 103E                          l763 0524  
                        l908 1466                          l756 04C4                          l845 1046  
                        l775 06CE                          l872 2076                          l891 1A8C  
                        l787 07CE                          l893 1A94                 __CFG_CPB$OFF 000000  
                        _abs 33C8                          _pad 2CA0                 ___awmod@sign 000C  
                        wreg 000FE8                  fixTime@Time 0001               ??_dispProcMode 007C  
               runOp@endTime 0099               ??_dispShowLogs 007C                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1002 2EB4                         ?_abs 0013  
                       l1413 2A66                         l1423 2BD4                 runOp@infoArr 0086  
                       l1650 33F0                         l5010 0C7A                         l5020 0CC0  
                       l5016 0CB6                         l5104 2B2E                         l1681 228A  
                       l5026 0CD8                         l5122 290E                         l5114 28FE  
                       l5210 1C80                         l5202 1C68                         l6010 01A6  
                       l6002 018E                         l1748 328A                         l5060 2AB8  
                       l5054 2AA4                         l5046 2A96                         l5142 2948  
                       l5134 2936                         l5222 1C9E                         l5080 2AEE  
                       l5160 297A                         l5136 293A                         l5128 2922  
                       l5400 26BE                         l5240 1CD0                         l5216 1C8E  
                       l5208 1C7C                         l6200 06A4                         l6032 0220  
                       l4610 24CE                         l4602 2492                         l4450 2FBC  
                       l5306 3208                         l5074 2ADE                         l5066 2ACC  
                       l5154 2968                         l5234 1CC0                         l4460 3366  
                       l4620 29E0                         l5308 322E                         l5092 2B10  
                       l5068 2AD0                         l5172 2998                         l5148 2958  
                       l5228 1CAE                         l6220 06E6                         l6116 0398  
                       l6108 0378                         l4542 1DAE                         l4606 24A8  
                       l4470 32E8                         l4622 29F4                         l5502 2DD4  
                       l5086 2AFE                         l5166 298A                         l5270 1D20  
                       l5246 1CDE                         l5190 1C44                         l5182 1C34  
                       l6206 06BC                         l6054 0298                         l6310 22F6  
                       ?_pad 0015                         l4464 337C                         l4632 2A50  
                       l4640 2B62                         l5352 35AC                         l5408 26EC  
                       l5264 1D10                         l5256 1CFE                         l6064 02C2  
                       l6152 04EC                         l4554 1DFC                         l4570 1E82  
                       l4490 2CDA                         l4722 11E6                         l4642 2B76  
                       l5514 2DFA                         l5530 2E2C                         l5426 30AE  
                       l5098 2B20                         l5282 1D42                         l5258 1D02  
                       l5450 34FE                         l6082 0318                         l4660 3354  
                       l4556 1E10                         l4548 1DD6                         l4468 32E4  
                       l4484 2CBA                         l4820 14A8                         l5516 2E02  
                       l5508 2DE4                         l5276 1D30                         l5196 1C58  
                       l6260 077E                         l6252 0764                         l6172 054C  
                       l6076 0306                         l6420 271C                         l5452 348C  
                       l6316 2306                         l4574 1EA8                         l4566 1E6C  
                       l4590 241C                         l4494 2CF2                         l4718 11CE  
                       l4670 1020                         l4734 203A                         l4814 147A  
                       l5534 2E3A                         l5526 2E22                         l5550 2EE6  
                       l6406 2D76                         l5294 1D60                         l6174 055A  
                       l6086 0338                         l5480 2E72                         l4488 2CC8  
                       l4752 20C4                         l4744 208E                         l4648 2BBE  
                       l5392 2690                         l5384 2664                         l5288 1D52  
                       l5448 34F8                         l6272 07BE                         l6248 0752  
                       l6432 2742                         l5490 2EA6                         l4594 2436  
                       l4586 23F8                         l4498 2D20                         l4762 211E  
                       l4842 1558                         l4850 15CE                         l4930 08B4  
                       l4922 089A                         l5570 2F2C                         l5562 2F14  
                       l5554 2EF4                         l5546 2EDA                         l5810 181E  
                       l5730 1780                         l5706 1758                         l5634 16B4  
                       l5626 16A8                         l5618 169C                         l6178 0592  
                       l6450 277E                         l6442 2762                         l4596 244A  
                       l4684 1060                         l4748 20A6                         l4780 1ACA  
                       l4828 14CA                         l4924 089E                         l5556 2EFC  
                       l5820 1832                         l5716 176C                         l5804 181A  
                       l5644 16CC                         l6284 0818                         l6700 0DE0  
                       l5478 2E66                         l4766 2136                         l4758 2102  
                       l4790 1BB6                         l4942 08C6                         l4934 08BA  
                       l4926 08AE                         l5566 2F1E                         l6614 129A  
                       l5742 17AC                         l5662 1700                         l5638 16C8  
                       l6462 279C                         l4872 2166                         l4688 106E  
                       l4960 0980                         l5840 1862                         l6480 27CE  
                       l6456 278C                         l6448 277A                         l6720 0E5E  
                       l4890 21C8                         l4882 21B0                         l4874 216A  
                       l4698 1166                         l4866 1646                         l4962 099E  
                       l4946 08D0                         l4938 08C0                         l6538 2892  
                       l6634 1304                         l5762 17F0                         l5658 16F0  
                       l5674 171A                         l5930 0054                         l6474 27BE  
                       l6714 0E4A                         l4892 21CE                         l4980 0AA4  
                       l4964 09AC                         l4948 0912                         l5828 183E  
                       l5756 17D2                         l5692 173A                         l5684 172E  
                       l6468 27AC                         l6724 0E7A                         l4894 21F6  
                       l6486 27DC                         l6734 0EA4                         l6718 0E56  
                       l4888 21C0                         l6576 2570                         l5848 1874  
                       l5768 17F4                         l6728 0E96                         l4898 222A  
                       l5858 1888                         l5778 1800                         l5698 1744  
                       l5954 00A4                         l5946 008A                         l6754 0F0E  
                       l6738 0EAA                         l6690 0DBE                         l4996 0BAC  
                       l4988 0B12                         l5788 180E                         l5972 00F8  
                       l6772 0F50                         l6764 0F2C                         l6748 0EDE  
                       l6684 0D7C                         l5982 0138                         l6782 0F6E  
                       l6758 0F1C                         l5984 0148                         l5888 1EFE  
                       l6768 0F3C                         l6698 0DDC                         STR_1 FF4B  
                       STR_2 FC55                         STR_3 FC6C                         STR_4 FF8F  
                       STR_5 FEE5                         STR_6 FDF7                         STR_7 FE08  
                       STR_8 FEC3                         STR_9 FFA0                         _LATA 000F89  
                       _LATB 000F8A                         u4000 33C0                         _LATD 000F8C  
                       u4010 33C2                         u4020 3272                         u4110 1E14  
                       u4030 3274                         u4201 29C0                         u4050 3482  
                       u4060 3484                         u4300 0FF4                         u4220 29F8  
                       u4400 11AA                         u4170 244E                         u4330 1034  
                       u4250 2B7A                         u4091 1DDC                         u4420 11B8  
                       u4500 20E6                         u4350 105A                         u5230 29B8  
                       u4280 3350                         u4360 1174                         u4600 1BF4  
                       u4441 201A                         u4290 0FF2                         u4530 214A  
                       u6210 00AC                         u4507 20DC                         u4380 1196  
                       u4620 1454                         u4381 1194                         u4390 11A4  
                       u4550 1A82                         u3910 3422                         u4710 15AA  
                       u5430 1D80                         u6230 00CE                         u3920 3424  
                       u4720 15DE                         u4640 14C6                         u6216 00AE  
                       u4810 225A                         u3850 2FB4                         u4490 20BA  
                       u4650 14FC                         u7130 2806                         u3835 34DA  
                       u4715 1598                         u3836 34DC                         u4820 225C  
                       u4580 1BE0                         u4740 1600                         u4660 14FE  
                       u4900 09E4                         u6420 022C                         u6236 00D0  
                       u6180 0064                         u4581 1BDE                         u4741 15FE  
                       u3870 2FFC                         u4590 1BEE                         u4750 160E  
                       u4910 09E6                         u5630 2E06                         u6430 022E  
                       u6350 01AE                         u6270 0134                         u5455 356C  
                       u4760 1614                         u4680 1536                         u4920 09F2  
                       u5456 356E                         u6520 02CA                         u6280 0136  
                       u3970 33D6                         u3890 330A                         u4690 1538  
                       u6370 01D2                         u5580 2E76                         u3980 3452  
                       u4940 0A26                         u6540 02EE                         u6356 01B0  
                       u7260 0E82                         u5725 310C                         u4790 21AC  
                       u3990 3454                         u5750 16A4                         u6526 02CC  
                       u5760 16B0                         u6800 06EE                         u6640 03B6  
                       u6376 01D4                         u3897 3300                         u5690 2F00  
                       u6570 0314                         u6546 02F0                         u7507 2F42  
                       u4980 0BE0                         u5940 17A0                         u6820 0710  
                       u6580 0316                         u7517 2764                         u5950 17A2  
                       u5870 1754                         u6910 07A8                         u6806 06F0  
                       u6750 055A                         u6590 031E                         u7607 02B4  
                       u7527 00BC                         u6760 05F4                         u7617 02DC  
                       u7537 0106                         u5970 17C4                         u6826 0712  
                       u7707 1C46                         u7627 035E                         u7547 0172  
                       u7467 0FBE                         u5980 17C6                         u6940 07CA  
                       u6916 07AA                         u6860 075E                         u7717 2610  
                       u7637 0384                         u7557 019A                         u7477 1F40  
                       u6950 07CC                         u6870 0760                         u7807 2D4A  
                       u7727 3016                         u7647 04D0                         u7567 01C0  
                       u7487 18A8                         u7817 1238                         u7737 302E  
                       u7657 050E                         u7577 0246                         u7497 314C  
                       u6890 0786                         u7827 12B8                         u7747 3040  
                       u7667 0534                         u7587 0268                         u7837 1358  
                       u7757 3062                         u7677 0696                         u7597 0286  
                       u7847 2832                         u7767 16DE                         u7687 06FE  
                       u6896 0788                         u7857 289E                         u7777 2910  
                       u7697 0796                         u7867 2510                         u7787 2AA6  
                       u7877 257C                         u7797 31A6                         u7887 34C2  
                       u7897 34CC                         abs@a 0013                         _dbuf 00C3  
                       _atoi 2154                         _main 0D0C                         _dtoa 0FCA  
   __end_of_interruptHandler 3594                         _tick 00C1                         _prec 00BD  
               runOp@tireVar 00A1                         _nout 00B9                         pad@i 001C  
                       pad@p 0019                         fsr1h 000FE2                         fsr2h 000FDA  
                       indf1 000FE7                         indf2 000FDF                         fsr1l 000FE1  
                       pad@w 001E                         fsr2l 000FD9                         _stoa 2010  
                       btemp 007F                         _utoa 1A6E                         _xtoa 1440  
                       prodh 000FF4                         prodl 000FF3                         start 000E  
              __CFG_IESO$OFF 000000                 ?_read_EEPROM 0001                __CFG_MCLRE$ON 000000  
               ___param_bank 000000               main@SMposition 00B5                        ??_abs 0015  
           ??_dispLogPoleDet 0080                        ??_pad 001B        I2C_Master_Read@ackBit 0002  
           ?_I2C_Master_Init 000E             ?_I2C_Master_Read 0001             ?_I2C_Master_Wait 0001  
               main@dispMode 00B8             ?_I2C_Master_Stop 0001              __end_of___aodiv 1ECA  
                      ?_atoi 0008                        ?_main 0001                        ?_dtoa 0020  
            __end_of___aomod 24F0              __end_of___awdiv 2E44                        _EEADR 000FA9  
                      STR_10 FCF6                        STR_11 FD08                        STR_12 FED4  
                      STR_20 FD3C                        STR_21 FD3C                        STR_13 FC83  
                      STR_22 FD3C                        STR_30 FF6D                        STR_14 FC9A  
                      STR_23 FD3C                        STR_31 FDA2                        STR_15 FCAD  
                      STR_32 FF3A                        STR_16 FF07                        STR_40 FE4C  
                      STR_24 FE19                        STR_33 FE7F                        STR_17 FDE6  
                      STR_25 FD80                        STR_26 FF29                        STR_34 FE5D  
                      STR_18 FDC4                        STR_50 FCE4                        STR_35 FE2A  
                      STR_19 FDB3                        STR_27 FD6F                        STR_51 FCD2  
                      STR_60 FED4                        STR_52 FED4                        STR_28 FF7E  
                      STR_36 FE90              __end_of___awmod 2F36                        STR_61 FFA0  
                      STR_45 FF5C                        STR_53 FEF6                        STR_37 FEA1  
                      STR_29 FDD5                        STR_54 FDF7                        STR_62 FCF6  
                      STR_46 FEB2                        STR_38 FE3B                        STR_70 FD5E  
                      STR_55 FE08                        STR_63 FD08                        STR_47 FF18  
                      STR_39 FE6E                        STR_71 FD4D                        STR_56 FEC3  
                      STR_48 FEC3                        STR_72 FED4                        STR_64 FED4  
                      STR_80 FFF0                        STR_65 FCC0                        STR_57 FCC0  
                      STR_73 FC83                        STR_81 FFFA                        STR_49 FCC0  
                      STR_66 FCE4                        STR_58 FCE4                        STR_74 FC9A  
                      STR_82 FD2B                        STR_67 FCD2                        STR_59 FCD2  
                      STR_75 FCAD                        STR_91 FFE1                        STR_68 FED4  
                      STR_76 FF07                        STR_84 FFB1                        STR_69 FD91  
                      STR_77 FD1A                        STR_78 FFD1                        STR_79 FFF5  
                      STR_87 FFC1                        ?_stoa 000E              __end_of___lldiv 2EC6  
                      ?_utoa 0020              __end_of___lodiv 2A88              ___awdiv@divisor 000F  
                      ?_xtoa 0020              __end_of___lomod 2BF6                        i2l131 3584  
                      i2l134 3590              ___awdiv@counter 0011                 vfpfcnvrt@fmt 0049  
               vfpfcnvrt@llu 0060                        _PORTB 000F81                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 3606               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
            __end_of_getTime 30E4               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000              __end_of_fixTime 2CA0                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_initLCD 307A  
             __CFG_EBTRB$OFF 000000                        _flags 00BF                runOp@procMode 00A4  
                      _fputc 2FA4              __end_of_isalpha 33C8                        _fputs 335C  
            __end_of_isdigit 348A                runOp@posTurns 00A3                        _runSM 2712  
                      atoi@n 0015                        pad@fp 0015                        _runOp 0012  
                      atoi@s 0008                        _width 00BB                        _putch 35EE  
                      dtoa@d 0022                        dtoa@i 0042                        dtoa@n 003A  
                      dtoa@p 0034                        dtoa@s 0038                        dtoa@w 0036  
            __end_of_islower 342A              __end_of_isspace 335C        __size_of_write_EEPROM 002A  
            __end_of_isupper 345A                        tablat 000FF5              send_nibble@data 0002  
                      plusw1 000FE3                        plusw2 000FDB                        stoa@i 001A  
                      stoa@l 0022                        stoa@p 0020                        stoa@s 0010  
                      stoa@w 001C              __end_of_pulse_e 34DE                 ?_scrDoneMain 0001  
                      ttemp5 0080                        ttemp6 0083                        ttemp7 0087  
                      utoa@d 0022                        utoa@i 003E                        utoa@n 0036  
                      utoa@p 0032                        utoa@w 0034                        status 000FD8  
I2C_Master_Read@receivedByte 0003                        wtemp8 0080                        xtoa@c 0045  
                      xtoa@d 0022                        xtoa@i 0043                        xtoa@n 003B  
                      xtoa@p 0037                        xtoa@w 0039                        xtoa@x 002A  
            __end_of_toupper 3294             ___lodiv@dividend 0001               __CFG_PBADEN$ON 000000  
               _toupper$2073 000D              __initialization 3294                 __end_of_atoi 2294  
               __end_of_main 0FCA                 __end_of_dtoa 1210                 __end_of_stoa 2154  
               __end_of_utoa 1C1E                 __end_of_xtoa 1670               runOp@pNumPoles 0084  
                     ??_atoi 000A                       ??_main 00A5                       ??_dtoa 002A  
                     ??_stoa 0012                       ??_utoa 002A                       ??_xtoa 002B  
              __activetblptr 000002                 _write_EEPROM 348A            ?_I2C_Master_Start 0001  
           ___lodiv@quotient 0011            ?_I2C_Master_Write 0002           ??_I2C_Master_Start 0002  
                     _ADCON1 000FC1           ??_I2C_Master_Write 0004         __size_of_deployRight 0008  
             scrDoneGen@time 0080                 ?_send_nibble 0001                       ?_fputc 0005  
                     ?_fputs 000E                       _EEDATA 000FA8                       _EECON2 000FA7  
           ??_dispStateTrans 0011             ___awdiv@dividend 000D                       ?_runSM 0001  
                     ?_runOp 0080                       ?_putch 0001                       _INT0IE 007F94  
                     _INT0IF 007F91                       _INT1IE 007F83                       _INT1IF 007F80  
             runOp@oldPosSig 009C                vfpfcnvrt@done 005B                       _SSPADD 000FC8  
       __size_of_dispLogMain 00DA                       _SSPBUF 000FC9               __CFG_XINST$OFF 000000  
               vfprintf@cfmt 006E                    ??___aodiv 0011                    ??___aomod 0011  
                     ___wmul 352A         __end_of_dispProcMode 2712                    ??___awdiv 0011  
             __CFG_STVREN$ON 000000                    ??___awmod 000B         __end_of_dispShowLogs 31F4  
                  ??___lldiv 0009                    ??___lodiv 0011                    ??___lomod 0011  
           ??_scrDonePoleDet 007C                       clear_0 32BA                       clear_1 32C6  
           ___awdiv@quotient 0013              ___awmod@divisor 0009                       _runSMA 2A88  
                     _runSMB 28EC                       _runSMs 1C1E              ___awmod@counter 000B  
                  ??_lcdInst 0004                       _printf 3504                       pad@buf 0017  
                  ??_getTime 0006                       dtoa@fp 0020                    ??_fixTime 0003  
                     _strlen 32DA                    ??_initLCD 0005                       fputc@c 0005  
                     fputs@c 0012                       fputs@i 0013                       fputs@s 000E  
                  ??_isalpha 0003                    ??_isdigit 0003                    ??_islower 0003  
           __end_of_showTime 2010                 __mediumconst FC4E                    ??_isspace 0003  
                     tblptrh 000FF7                    ??_isupper 0003                       tblptrl 000FF6  
                     tblptru 000FF8                       runOp@i 0093                       stoa@cp 001E  
                     stoa@fp 000E             __end_of_vfprintf 324A                    ??_pulse_e 0001  
                     utoa@fp 0020                       xtoa@fp 0020                    ??_toupper 0009  
        runOp@pTotalSupplied 0082             __end_of_storeLog 23CC    dispStateTrans@lastWritten 0010  
      pulse_e@interruptState 0001                   __accesstop 0080      __end_of__initialization 32CC  
              ___rparam_used 000001               __pcstackCOMRAM 0001                 __pidataBANK0 3610  
       __size_of_read_EEPROM 0014                __end_of_fputc 3010                __end_of_fputs 3394  
              __end_of_runSM 2812                __end_of_runOp 0854                __end_of_putch 35FA  
           dispProcMode@mode 007D           read_EEPROM@address 0001           __size_of_dispSMrun 0086  
           write_EEPROM@data 0001                      ??_fputc 0009                      ??_fputs 0012  
                    ??_runSM 0005                      ??_runOp 008C                      ??_putch 0004  
                 __pbssBANK0 00B9                   __pbssBANK1 0100            ?_interruptHandler 0001  
             main@direction1 00B7               main@direction2 00B4         __size_of_scrDoneMain 005A  
         ??_interruptHandler 0001                      ?___wmul 0001           __size_of_send_byte 0012  
            scrDoneGen@poles 0083                   _deployBoth 35E2                   _deployLeft 3620  
                    ?_runSMA 0001                      ?_runSMB 0001                      ?_runSMs 0001  
                    ?_printf 0070                      ?_strlen 0001                   _dispLogGen 24F0  
               storeLog@time 000D           __size_of_vfpfcnvrt 04B8                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7             ___lomod@dividend 0001  
       __size_of_send_nibble 0016        __size_of_dispProcMode 0110        __size_of_dispShowLogs 005A  
                    __Hparam 0000            __end_of_dispSMrun 2DC0                      __Lparam 0000  
                 _lastStored 00F0                    ?_showTime 007C              runOp@origDetLoc 0092  
                    ___aodiv 1D82                      ___aomod 23CC                      ___awdiv 2DC0  
                    ___awmod 2EC6                      ___lldiv 2E44              __size_of___wmul 0026  
                    ___lodiv 29BA                      ___lomod 2B48                    ?_vfprintf 0068  
                    __pcinit 3294                    ?_storeLog 0003                      __ramtop 1000  
                    _lcdInst 35FA                      __ptext0 0D0C                      __ptext1 2294  
                    __ptext2 348A                      __ptext3 1ECA                      _getTime 307A  
                    __ptext4 189C                      __ptext5 3140                      __ptext6 2F36  
                    __ptext7 2712                      __ptext8 0012                      __ptext9 34DE  
            __size_of_runSMA 00C0              __size_of_runSMB 00CE              __size_of_runSMs 0164  
            __size_of_printf 0026                      _fixTime 2BF6              __size_of_strlen 0044  
                    _initLCD 3010       scrDonePoleDet@currPole 0082                 __size_of_abs 0032  
                 _scrDoneGen 2F36                 __size_of_pad 009A                      _isalpha 3394  
                    _isdigit 345A             ___awmod@dividend 0007                      _islower 33FA  
                    _isspace 331E                      _isupper 342A     __size_of_I2C_Master_Init 005C  
   __size_of_I2C_Master_Read 0024     __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008  
                    atoi@neg 000E       scrDonePoleDet@poleData 0080                      _pulse_e 34B4  
               _dispProcMode 2602               __pintcode_body 3574                      _toupper 324A  
               _dispShowLogs 319A         end_of_initialization 32CC        __end_of_LCD_SIZE_HORZ FC55  
          __end_of_send_byte 35E2        __end_of_LCD_SIZE_VERT FC54          write_EEPROM@address 0002  
                    fputc@fp 0007                __Lmediumconst FC4E                      int_func 3574  
                    fputs@fp 0010    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
            ___lldiv@divisor 0005              ___lldiv@counter 000D            __end_of_vfpfcnvrt 0D0C  
                runSM@ticksA 0007                   ??_showTime 0080                      postdec1 000FE5  
                    postdec2 000FDD                      postinc0 000FEE                      postinc1 000FE6  
                    postinc2 000FDE                   _tireDeploy 34DE                   ??_vfprintf 006E  
                ?_deployBoth 0001                  ?_deployLeft 0001                      strlen@a 0003  
                    strlen@s 0001                   ??_storeLog 0009                    _PORTBbits 000F81  
                  _PORTCbits 000F82                    _PORTEbits 000F84                  ?_dispLogGen 0001  
          dispLogPoleDet@log 0088            dispLogPoleDet@pos 0086                ??_deployRight 0006  
                  _TRISCbits 000F94      __size_of_dispLogPoleDet 0230                ??_dispLogMain 007C  
                runOp@pInt0P 0088                  runOp@opTime 008A                send_byte@data 0003  
         runOp@distSinceBase 0096                  vfpfcnvrt@ap 004B                  vfpfcnvrt@cp 0059  
                vfpfcnvrt@fp 0047                  vfpfcnvrt@ll 0051          scrDoneGen@tireCount 0082  
             __end_of___wmul 3550               __end_of_runSMA 2B48               __end_of_runSMB 29BA  
             __end_of_runSMs 1D82               __end_of_printf 352A                  ?_scrDoneGen 0080  
             __end_of_strlen 331E          start_initialization 3294              ___lodiv@divisor 0009  
            ___lodiv@counter 0019                  __end_of_abs 33FA                  __end_of_pad 2D3A  
        __end_of_deployRight 3620            ??_I2C_Master_Init 0012            ??_I2C_Master_Read 0002  
        __size_of_deployBoth 000C            ??_I2C_Master_Wait 0001          __size_of_deployLeft 0008  
          ??_I2C_Master_Stop 0002          __size_of_dispLogGen 0112          __end_of_dispLogMain 28EC  
              ??_read_EEPROM 0001      __size_of_dispStateTrans 022C                  vfprintf@fmt 006A  
                   ??___wmul 0005                  ?_tireDeploy 0008     I2C_Master_Init@clockFreq 000E  
                __pdataBANK0 00E9             __CFG_LPT1OSC$OFF 000000          _scrDonePoleDet$2355 0088  
        _scrDonePoleDet$2356 0084          _scrDonePoleDet$2357 0086                     ??_runSMA 0001  
                   ??_runSMB 0001                     ??_runSMs 0002                     ??_printf 0078  
  __size_of_interruptHandler 358C                     ??_strlen 0003             runOp@distPoleDet 0095  
              __pcstackBANK0 0080             ___aodiv@dividend 0001      __size_of_scrDonePoleDet 01D2  
              ??_scrDoneMain 007C                    _atoi$1982 0010                    _atoi$1983 0014  
                  _atoi$1984 0012             _I2C_Master_Start 3630             _I2C_Master_Write 3606  
        __size_of_scrDoneGen 006E                    _dtoa$1478 0032            __CFG_CCP2MX$PORTC 000000  
                  __pintcode 0008                __pmediumconst FC4E                     ?___aodiv 0001  
                   ?___aomod 0001                     ?___awdiv 000D             ___aodiv@quotient 0013  
                   ?___awmod 0007                     ?___lldiv 0001                     ?___lodiv 0001  
                   ?___lomod 0001                    _dispSMrun 2D3A            __size_of_showTime 0146  
        __end_of_read_EEPROM 35BE                     ?_lcdInst 0001                     ?_getTime 0004  
          __size_of_vfprintf 0056                     ?_fixTime 0001              ___lomod@divisor 0009  
           runSM@pSMposition 0001                     ?_initLCD 0001            __size_of_storeLog 0138  
            ___lomod@counter 0011                ?_write_EEPROM 0001                     ?_isalpha 0001  
                   ?_isdigit 0001                  _deployRight 3618                     ?_islower 0001  
                   ?_isspace 0001               runSM@direction 0005               _dispLogPoleDet 1210  
                   ?_isupper 0001                    _logToShow 00E3                ??_send_nibble 0002  
                   ?_pulse_e 0001               __size_of_fputc 006C               __size_of_fputs 0038  
                   ?_toupper 0007               __size_of_runSM 0100               __size_of_runOp 0842  
        tireDeploy@firstTank 0008               __size_of_putch 000C                  _dispLogMain 2812  
        __size_of_tireDeploy 0026                  _int0Pressed 00E7               ___wmul@product 0005  
                _int1Pressed 00E8                     _LATAbits 000F89                   runSMA@dirA 0001  
                   _LATCbits 000F8B                   runSMB@dirB 0001                     _LATDbits 000F8C  
                   _LATEbits 000F8D                    _send_byte 35D0                    _poleCount 00E4  
             _LCD_LINE1_ADDR FC52               _LCD_LINE2_ADDR FC51               _LCD_LINE3_ADDR FC50  
             _LCD_LINE4_ADDR FC4F          __end_of_scrDoneMain 319A             __CFG_WDTPS$32768 000000  
     dispLogPoleDet@currPole 007C                   ?_dispSMrun 007C     dispStateTrans@pLogToShow 000E  
               ??_deployBoth 0008                 ??_deployLeft 0005                   runSMs@dirA 0002  
                 runSMs@dirB 0001                    _tiresSupp 00E5                    _vfpfcnvrt 0854  
                  _xtoa$1507 0033                    _xtoa$1508 0035            ___wmul@multiplier 0001  
               ??_dispLogGen 007C               ??_write_EEPROM 0002       __end_of_dispLogPoleDet 1440  
                  _totalTime 00E6                   runOp@found 0098                 _isspace$2009 0007  
                 vfpfcnvrt@c 005F                    copy_data0 32A8             storeLog@pLastLog 0007  
     __end_of_LCD_LINE1_ADDR FC53       __end_of_LCD_LINE2_ADDR FC52       __end_of_LCD_LINE3_ADDR FC51  
         __end_of_deployBoth 35EE       __end_of_LCD_LINE4_ADDR FC50           __end_of_deployLeft 3628  
        __end_of_send_nibble 35AA                   _EECON1bits 000FA6                   ?_send_byte 0001  
                   __Hrparam 0000               _dispStateTrans 1670           __end_of_dispLogGen 2602  
           runSM@int1Pressed 0003                  _read_EEPROM 35AA                   vfprintf@ap 006C  
                   __Lrparam 0000                   vfprintf@fp 0068           __CFG_BOREN$SBORDIS 000000  
           __size_of___aodiv 0148             __size_of___aomod 0124             __size_of___awdiv 0084  
           __size_of___awmod 0070             __size_of___lldiv 0082             __size_of___lodiv 00CE  
           __size_of___lomod 00AE                   ?_vfpfcnvrt 0047              ___aodiv@divisor 0009  
           _interruptHandler 0008              ___aodiv@counter 0011             storeLog@numPoles 0003  
           __size_of_lcdInst 000C             __size_of_getTime 006A                _dispSMrun$976 0081  
            ?_dispLogPoleDet 007C                 ??_scrDoneGen 007C             __size_of_fixTime 00AA  
           storeLog@tiresDep 0004              _I2C_Master_Init 30E4              _I2C_Master_Read 3550  
           __size_of_initLCD 006A              _I2C_Master_Wait 35BE              _I2C_Master_Stop 3628  
           __size_of_isalpha 0034             __size_of_isdigit 0030               _scrDonePoleDet 189C  
           __size_of_islower 0030             __size_of_isspace 003E                     __ptext10 3618  
                   __ptext11 3620                     __ptext20 3606                     __ptext12 35E2  
                   __ptext21 3628                     __ptext13 1C1E                     __ptext30 2DC0  
                   __ptext22 3630                     __ptext14 2602             tireDeploy@amount 0009  
                   __ptext31 2812                     __ptext23 3550                     __ptext15 3010  
                   __ptext40 342A                     __ptext32 24F0                     __ptext24 35BE  
                   __ptext16 1670                     __ptext41 3394                     __ptext33 35AA  
                   __ptext25 2BF6                     __ptext17 28EC                     __ptext50 2FA4  
                   __ptext42 1A6E                     __ptext34 3504                     __ptext26 319A  
                   __ptext18 2A88                     __ptext51 35EE                     __ptext43 2B48  
                   __ptext35 31F4                     __ptext27 2D3A                     __ptext19 307A  
                   __ptext60 35D0                     __ptext52 33C8                     __ptext44 29BA  
                   __ptext36 0854                     __ptext28 1210                     __ptext61 3594  
                   __ptext53 23CC                     __ptext45 2010                     __ptext37 1440  
                   __ptext29 2EC6                     __ptext62 34B4                     __ptext54 1D82  
                   __ptext46 0FCA                     __ptext38 324A                     __ptext63 30E4  
                   __ptext55 2154                     __ptext47 2CA0                     __ptext39 33FA  
                   __ptext64 2E44                     __ptext56 331E                     __ptext48 32DA  
                   __ptext57 345A                     __ptext49 335C                     __ptext58 352A  
                   __ptext59 35FA             __size_of_isupper 0030             __size_of_pulse_e 002A  
           __size_of_toupper 004A                     _currPole 00C2                  _scrDoneMain 3140  
              __size_of_atoi 0140                __size_of_main 02BE                __size_of_dtoa 0246  
     __end_of_dispStateTrans 189C                __size_of_stoa 0144                __size_of_utoa 01B0  
              __size_of_xtoa 0230                    runSMA@ctr 0002                    runSMB@ctr 0002  
        runOp@oldPosSig_1403 009F          runOp@oldPosSig_1404 00A0          runOp@oldPosSig_1381 009D  
        runOp@oldPosSig_1391 009E           __end_of_scrDoneGen 2FA4                    stoa@F1139 00E9  
              runSM@hundreds 0006                     _showTime 1ECA                     getTime@i 0006  
               ??_tireDeploy 0009                    showTime@i 007E               dispSMrun@direc 0080  
                   int$flags 007F                    runSMs@ctr 0003                  ??_dispSMrun 007E  
                   _vfprintf 31F4                    printf@fmt 0070                    runOp@temp 0097  
                  runOp@time 0080                     main@time 00AA                     _storeLog 2294  
I2C_Master_Write@byteToWrite 0002             ___aomod@dividend 0001       __end_of_scrDonePoleDet 1A6E  
               runSMA@ticksA 0004                    putch@data 0004                 runSMA@subCtr 0003  
   __end_of_I2C_Master_Start 3638               _vfpfcnvrt$1522 005D                 runSMB@ticksB 0005  
    dispStateTrans@pStepDir1 000A      dispStateTrans@pStepDir2 000C     __end_of_I2C_Master_Write 3610  
               runSMB@subCtr 0004                   _INTCONbits 000FF2              storeLog@infoArr 0005  
            storeLog@currAdr 0010              storeLog@currLog 000E             main@startTimeInt 00B1  
                   isalpha@c 0001                     isdigit@c 0001                  _send_nibble 3594  
                _poleInfoArr 0100                     intlevel2 0000           __end_of_tireDeploy 3504  
             dispLogMain@log 007D                _LCD_SIZE_HORZ FC54                     islower@c 0001  
              _LCD_SIZE_VERT FC53                     isspace@c 0001             ___lldiv@dividend 0001  
                  storeLog@i 000F              ?_dispStateTrans 0007         __end_of_write_EEPROM 34B4  
                ??_send_byte 0003                     isupper@c 0001                 getTime@pTime 0004  
                   printf@ap 007A                     runOp@pos 00A2      __end_of_I2C_Master_Init 3140  
            ___aomod@divisor 0009      __end_of_I2C_Master_Read 3574       dispStateTrans@dispMode 0007  
    __end_of_I2C_Master_Wait 35D0      __end_of_I2C_Master_Stop 3630                  ??_vfpfcnvrt 004D  
                lcdInst@data 0004                     stoa@nuls 0013              ___aomod@counter 0011  
              dispLogGen@log 007D              ?_scrDonePoleDet 0080             ___lldiv@quotient 0009  
               ?_deployRight 0001       dispStateTrans@keypress 0012                     toupper@c 0007  
    dispStateTrans@startTime 0008                showTime@pTime 007C                  _SSPCON1bits 000FC6  
                _SSPCON2bits 000FC5                ?_dispProcMode 0001                ?_dispShowLogs 0001  
               ?_dispLogMain 0001                 ___aodiv@sign 0012                 ___aomod@sign 0012  
               runSMs@ticksA 0006                 runSMs@ticksB 0007                 runSMs@subCtr 0005  
